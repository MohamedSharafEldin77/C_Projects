
SAFE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e42  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00000e42  00000eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00001650  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012df  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058a  00000000  00000000  00002a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a2b  00000000  00000000  00003019  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003cc  00000000  00000000  00003a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f1  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001280  00000000  00000000  00004201  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00005481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <main>
  8a:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_set_PIN_dir>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void DIO_set_PIN_dir (unsigned char portname,unsigned char pin_number_0_7,unsigned char direction)
{
	switch (portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_set_PIN_dir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_set_PIN_dir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_set_PIN_dir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_set_PIN_dir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_set_PIN_dir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_set_PIN_dir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_set_PIN_dir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_set_PIN_dir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_set_PIN_dir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_set_PIN_dir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_set_PIN_dir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_set_PIN_dir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_set_PIN_dir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_set_PIN_dir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_set_PIN_dir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_set_PIN_dir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_set_PIN_dir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_set_PIN_dir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_set_PIN_dir+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_set_PIN_dir+0x58>
		{
			SET_BIT(DDRA,pin_number_0_7);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_set_PIN_dir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_set_PIN_dir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin_number_0_7);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_set_PIN_dir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_set_PIN_dir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		//DDRA=dir==1?DDRA|(1<<pin):DDRA&~(1<<pin);
		case 'B':
		case 'b':
		if (direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_set_PIN_dir+0x92>
		{
			SET_BIT(DDRB,pin_number_0_7);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_set_PIN_dir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_set_PIN_dir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin_number_0_7);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_set_PIN_dir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_set_PIN_dir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_set_PIN_dir+0xcc>
		{
			SET_BIT(DDRC,pin_number_0_7);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_set_PIN_dir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_set_PIN_dir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin_number_0_7);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_set_PIN_dir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_set_PIN_dir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_set_PIN_dir+0x106>
		{
			SET_BIT(DDRD,pin_number_0_7);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_set_PIN_dir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_set_PIN_dir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin_number_0_7);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_set_PIN_dir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_set_PIN_dir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_output_PIN_on_port>:
		break;
	}
}
void DIO_output_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7,unsigned char output)
{
	switch (portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_output_PIN_on_port+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_output_PIN_on_port+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_output_PIN_on_port+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_output_PIN_on_port+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_output_PIN_on_port+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_output_PIN_on_port+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_output_PIN_on_port+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_output_PIN_on_port+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_output_PIN_on_port+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_output_PIN_on_port+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_output_PIN_on_port+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_output_PIN_on_port+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_output_PIN_on_port+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_output_PIN_on_port+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_output_PIN_on_port+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_output_PIN_on_port+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_output_PIN_on_port+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_output_PIN_on_port+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_output_PIN_on_port+0xe8>
	{
		case 'A':
		case 'a':
		if (output==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_output_PIN_on_port+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_output_PIN_on_port+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_output_PIN_on_port+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_output_PIN_on_port+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_output_PIN_on_port+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (output==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_output_PIN_on_port+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_output_PIN_on_port+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_output_PIN_on_port+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_output_PIN_on_port+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_output_PIN_on_port+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (output==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_output_PIN_on_port+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_output_PIN_on_port+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_output_PIN_on_port+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_output_PIN_on_port+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_output_PIN_on_port+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (output==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_output_PIN_on_port+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_output_PIN_on_port+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_output_PIN_on_port+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_output_PIN_on_port+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_output_PIN_on_port+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_Toggle_PIN_on_port>:
		break;
	}
}
void DIO_Toggle_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7)
{
	switch (portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_Toggle_PIN_on_port+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_Toggle_PIN_on_port+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_Toggle_PIN_on_port+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_Toggle_PIN_on_port+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_Toggle_PIN_on_port+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_Toggle_PIN_on_port+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_Toggle_PIN_on_port+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_Toggle_PIN_on_port+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_Toggle_PIN_on_port+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_Toggle_PIN_on_port+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_Toggle_PIN_on_port+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_Toggle_PIN_on_port+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_Toggle_PIN_on_port+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_Toggle_PIN_on_port+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_Toggle_PIN_on_port+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,pin_number_0_7);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_Toggle_PIN_on_port+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_Toggle_PIN_on_port+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,pin_number_0_7);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Toggle_PIN_on_port+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Toggle_PIN_on_port+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
		break;
 33a:	08 95       	ret
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,pin_number_0_7);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_Toggle_PIN_on_port+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_Toggle_PIN_on_port+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
		break;
 354:	08 95       	ret
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,pin_number_0_7);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_Toggle_PIN_on_port+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_Toggle_PIN_on_port+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_READ_PIN>:
	}
}
unsigned char DIO_READ_PIN (unsigned char portname,unsigned char pin_number_0_7)
{
	unsigned char val;
	switch (portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_READ_PIN+0x6>
 374:	51 c0       	rjmp	.+162    	; 0x418 <DIO_READ_PIN+0xa8>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_READ_PIN+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	39 f1       	breq	.+78     	; 0x3cc <DIO_READ_PIN+0x5c>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	c0 f5       	brcc	.+112    	; 0x3f2 <DIO_READ_PIN+0x82>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_READ_PIN+0x18>
 386:	5a c0       	rjmp	.+180    	; 0x43c <DIO_READ_PIN+0xcc>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_READ_PIN+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f9 f0       	breq	.+62     	; 0x3cc <DIO_READ_PIN+0x5c>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_READ_PIN+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_READ_PIN+0x28>
 396:	52 c0       	rjmp	.+164    	; 0x43c <DIO_READ_PIN+0xcc>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_READ_PIN+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	51 f1       	breq	.+84     	; 0x3f2 <DIO_READ_PIN+0x82>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_READ_PIN+0x34>
 3a2:	4c c0       	rjmp	.+152    	; 0x43c <DIO_READ_PIN+0xcc>
 3a4:	39 c0       	rjmp	.+114    	; 0x418 <DIO_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pin_number_0_7);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_READ_PIN+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_READ_PIN+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_READ_PIN+0x54>
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_READ_PIN+0x50>
 3c8:	98 2f       	mov	r25, r24
		break;
 3ca:	38 c0       	rjmp	.+112    	; 0x43c <DIO_READ_PIN+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin_number_0_7);
 3cc:	26 b3       	in	r18, 0x16	; 22
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	06 2e       	mov	r0, r22
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_READ_PIN+0x6a>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_READ_PIN+0x66>
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	82 23       	and	r24, r18
 3e2:	93 23       	and	r25, r19
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_READ_PIN+0x7a>
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_READ_PIN+0x76>
 3ee:	98 2f       	mov	r25, r24
		break;
 3f0:	25 c0       	rjmp	.+74     	; 0x43c <DIO_READ_PIN+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin_number_0_7);
 3f2:	23 b3       	in	r18, 0x13	; 19
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	06 2e       	mov	r0, r22
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_READ_PIN+0x90>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_READ_PIN+0x8c>
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	82 23       	and	r24, r18
 408:	93 23       	and	r25, r19
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_READ_PIN+0xa0>
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_READ_PIN+0x9c>
 414:	98 2f       	mov	r25, r24
		break;
 416:	12 c0       	rjmp	.+36     	; 0x43c <DIO_READ_PIN+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin_number_0_7);
 418:	20 b3       	in	r18, 0x10	; 16
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	06 2e       	mov	r0, r22
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_READ_PIN+0xb6>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_READ_PIN+0xb2>
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	82 23       	and	r24, r18
 42e:	93 23       	and	r25, r19
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_READ_PIN+0xc6>
 432:	96 95       	lsr	r25
 434:	87 95       	ror	r24
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_READ_PIN+0xc2>
 43a:	98 2f       	mov	r25, r24
		break;
		default:
		break;	
	}
	return val;
}
 43c:	89 2f       	mov	r24, r25
 43e:	08 95       	ret

00000440 <DIO_set_PORT_dir>:
void DIO_set_PORT_dir (unsigned char portname,unsigned char portvalue)
{
	switch (portname)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <DIO_set_PORT_dir+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <DIO_set_PORT_dir+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <DIO_set_PORT_dir+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_set_PORT_dir+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <DIO_set_PORT_dir+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_set_PORT_dir+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <DIO_set_PORT_dir+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_set_PORT_dir+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <DIO_set_PORT_dir+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_set_PORT_dir+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <DIO_set_PORT_dir+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <DIO_set_PORT_dir+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_set_PORT_dir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=portvalue;
 46e:	6a bb       	out	0x1a, r22	; 26
		break;
 470:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=portvalue;
 472:	67 bb       	out	0x17, r22	; 23
		break;
 474:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=portvalue;
 476:	64 bb       	out	0x14, r22	; 20
		break;
 478:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=portvalue;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <DIO_output_on_PORT>:
		break;
	}
}
void DIO_output_on_PORT (unsigned char portname,unsigned char output_on_port)
{
	switch (portname)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_output_on_PORT+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <DIO_output_on_PORT+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_output_on_PORT+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_output_on_PORT+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_output_on_PORT+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_output_on_PORT+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_output_on_PORT+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_output_on_PORT+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_output_on_PORT+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_output_on_PORT+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_output_on_PORT+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_output_on_PORT+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_output_on_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=output_on_port;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=output_on_port;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=output_on_port;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=output_on_port;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <DIO_Toggle_PORT>:
		break;
	}
}
void DIO_Toggle_PORT (unsigned char portname)
{
	switch (portname)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	09 f1       	breq	.+66     	; 0x502 <DIO_Toggle_PORT+0x46>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_Toggle_PORT+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	a9 f0       	breq	.+42     	; 0x4f2 <DIO_Toggle_PORT+0x36>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	b8 f4       	brcc	.+46     	; 0x4fa <DIO_Toggle_PORT+0x3e>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	e1 f4       	brne	.+56     	; 0x508 <DIO_Toggle_PORT+0x4c>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_Toggle_PORT+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	71 f0       	breq	.+28     	; 0x4f2 <DIO_Toggle_PORT+0x36>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_Toggle_PORT+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	a9 f4       	brne	.+42     	; 0x508 <DIO_Toggle_PORT+0x4c>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_Toggle_PORT+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	59 f0       	breq	.+22     	; 0x4fa <DIO_Toggle_PORT+0x3e>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	81 f4       	brne	.+32     	; 0x508 <DIO_Toggle_PORT+0x4c>
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <DIO_Toggle_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 4ea:	8b b3       	in	r24, 0x1b	; 27
 4ec:	80 95       	com	r24
 4ee:	8b bb       	out	0x1b, r24	; 27
		break;
 4f0:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
 4f2:	88 b3       	in	r24, 0x18	; 24
 4f4:	80 95       	com	r24
 4f6:	88 bb       	out	0x18, r24	; 24
		break;
 4f8:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
 4fa:	85 b3       	in	r24, 0x15	; 21
 4fc:	80 95       	com	r24
 4fe:	85 bb       	out	0x15, r24	; 21
		break;
 500:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
 502:	82 b3       	in	r24, 0x12	; 18
 504:	80 95       	com	r24
 506:	82 bb       	out	0x12, r24	; 18
 508:	08 95       	ret

0000050a <DIO_READ_PORT>:
	}
}
unsigned char DIO_READ_PORT (unsigned char portname)
{
	unsigned char returned_value;
	switch (portname)
 50a:	84 34       	cpi	r24, 0x44	; 68
 50c:	d9 f0       	breq	.+54     	; 0x544 <DIO_READ_PORT+0x3a>
 50e:	85 34       	cpi	r24, 0x45	; 69
 510:	38 f4       	brcc	.+14     	; 0x520 <DIO_READ_PORT+0x16>
 512:	82 34       	cpi	r24, 0x42	; 66
 514:	99 f0       	breq	.+38     	; 0x53c <DIO_READ_PORT+0x32>
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	98 f4       	brcc	.+38     	; 0x540 <DIO_READ_PORT+0x36>
 51a:	81 34       	cpi	r24, 0x41	; 65
 51c:	a1 f4       	brne	.+40     	; 0x546 <DIO_READ_PORT+0x3c>
 51e:	0c c0       	rjmp	.+24     	; 0x538 <DIO_READ_PORT+0x2e>
 520:	82 36       	cpi	r24, 0x62	; 98
 522:	61 f0       	breq	.+24     	; 0x53c <DIO_READ_PORT+0x32>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	18 f4       	brcc	.+6      	; 0x52e <DIO_READ_PORT+0x24>
 528:	81 36       	cpi	r24, 0x61	; 97
 52a:	69 f4       	brne	.+26     	; 0x546 <DIO_READ_PORT+0x3c>
 52c:	05 c0       	rjmp	.+10     	; 0x538 <DIO_READ_PORT+0x2e>
 52e:	83 36       	cpi	r24, 0x63	; 99
 530:	39 f0       	breq	.+14     	; 0x540 <DIO_READ_PORT+0x36>
 532:	84 36       	cpi	r24, 0x64	; 100
 534:	41 f4       	brne	.+16     	; 0x546 <DIO_READ_PORT+0x3c>
 536:	06 c0       	rjmp	.+12     	; 0x544 <DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		returned_value=PORTA;
 538:	8b b3       	in	r24, 0x1b	; 27
		break;
 53a:	08 95       	ret
		case 'B':
		case 'b':
		returned_value=PORTB;
 53c:	88 b3       	in	r24, 0x18	; 24
		break;
 53e:	08 95       	ret
		case 'C':
		case 'c':
		returned_value=PORTC;
 540:	85 b3       	in	r24, 0x15	; 21
		break;
 542:	08 95       	ret
		case 'D':
		case 'd':
		returned_value=PORTD;
 544:	82 b3       	in	r24, 0x12	; 18
		break;
		default:
		break;
	}
}
 546:	08 95       	ret

00000548 <DIO_enable_PULLUP>:
void DIO_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7,unsigned char enable_pullup)
{
	switch (portname)
 548:	84 34       	cpi	r24, 0x44	; 68
 54a:	09 f4       	brne	.+2      	; 0x54e <DIO_enable_PULLUP+0x6>
 54c:	71 c0       	rjmp	.+226    	; 0x630 <DIO_enable_PULLUP+0xe8>
 54e:	85 34       	cpi	r24, 0x45	; 69
 550:	48 f4       	brcc	.+18     	; 0x564 <DIO_enable_PULLUP+0x1c>
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	99 f1       	breq	.+102    	; 0x5bc <DIO_enable_PULLUP+0x74>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	08 f0       	brcs	.+2      	; 0x55c <DIO_enable_PULLUP+0x14>
 55a:	4d c0       	rjmp	.+154    	; 0x5f6 <DIO_enable_PULLUP+0xae>
 55c:	81 34       	cpi	r24, 0x41	; 65
 55e:	09 f0       	breq	.+2      	; 0x562 <DIO_enable_PULLUP+0x1a>
 560:	83 c0       	rjmp	.+262    	; 0x668 <DIO_enable_PULLUP+0x120>
 562:	0f c0       	rjmp	.+30     	; 0x582 <DIO_enable_PULLUP+0x3a>
 564:	82 36       	cpi	r24, 0x62	; 98
 566:	51 f1       	breq	.+84     	; 0x5bc <DIO_enable_PULLUP+0x74>
 568:	83 36       	cpi	r24, 0x63	; 99
 56a:	20 f4       	brcc	.+8      	; 0x574 <DIO_enable_PULLUP+0x2c>
 56c:	81 36       	cpi	r24, 0x61	; 97
 56e:	09 f0       	breq	.+2      	; 0x572 <DIO_enable_PULLUP+0x2a>
 570:	7b c0       	rjmp	.+246    	; 0x668 <DIO_enable_PULLUP+0x120>
 572:	07 c0       	rjmp	.+14     	; 0x582 <DIO_enable_PULLUP+0x3a>
 574:	83 36       	cpi	r24, 0x63	; 99
 576:	09 f4       	brne	.+2      	; 0x57a <DIO_enable_PULLUP+0x32>
 578:	3e c0       	rjmp	.+124    	; 0x5f6 <DIO_enable_PULLUP+0xae>
 57a:	84 36       	cpi	r24, 0x64	; 100
 57c:	09 f0       	breq	.+2      	; 0x580 <DIO_enable_PULLUP+0x38>
 57e:	74 c0       	rjmp	.+232    	; 0x668 <DIO_enable_PULLUP+0x120>
 580:	57 c0       	rjmp	.+174    	; 0x630 <DIO_enable_PULLUP+0xe8>
	{
		case 'A':
		case 'a':
		if (enable_pullup==1)
 582:	41 30       	cpi	r20, 0x01	; 1
 584:	69 f4       	brne	.+26     	; 0x5a0 <DIO_enable_PULLUP+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
 586:	2b b3       	in	r18, 0x1b	; 27
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	ac 01       	movw	r20, r24
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_enable_PULLUP+0x4c>
 590:	44 0f       	add	r20, r20
 592:	55 1f       	adc	r21, r21
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_enable_PULLUP+0x48>
 598:	ba 01       	movw	r22, r20
 59a:	62 2b       	or	r22, r18
 59c:	6b bb       	out	0x1b, r22	; 27
 59e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
 5a0:	2b b3       	in	r18, 0x1b	; 27
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	ac 01       	movw	r20, r24
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_enable_PULLUP+0x66>
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_enable_PULLUP+0x62>
 5b2:	ba 01       	movw	r22, r20
 5b4:	60 95       	com	r22
 5b6:	62 23       	and	r22, r18
 5b8:	6b bb       	out	0x1b, r22	; 27
 5ba:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (enable_pullup==1)
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	69 f4       	brne	.+26     	; 0x5da <DIO_enable_PULLUP+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
 5c0:	28 b3       	in	r18, 0x18	; 24
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	ac 01       	movw	r20, r24
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_enable_PULLUP+0x86>
 5ca:	44 0f       	add	r20, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_enable_PULLUP+0x82>
 5d2:	ba 01       	movw	r22, r20
 5d4:	62 2b       	or	r22, r18
 5d6:	68 bb       	out	0x18, r22	; 24
 5d8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
 5da:	28 b3       	in	r18, 0x18	; 24
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	ac 01       	movw	r20, r24
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_enable_PULLUP+0xa0>
 5e4:	44 0f       	add	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_enable_PULLUP+0x9c>
 5ec:	ba 01       	movw	r22, r20
 5ee:	60 95       	com	r22
 5f0:	62 23       	and	r22, r18
 5f2:	68 bb       	out	0x18, r22	; 24
 5f4:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (enable_pullup==1)
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	69 f4       	brne	.+26     	; 0x614 <DIO_enable_PULLUP+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
 5fa:	25 b3       	in	r18, 0x15	; 21
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	ac 01       	movw	r20, r24
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_enable_PULLUP+0xc0>
 604:	44 0f       	add	r20, r20
 606:	55 1f       	adc	r21, r21
 608:	6a 95       	dec	r22
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_enable_PULLUP+0xbc>
 60c:	ba 01       	movw	r22, r20
 60e:	62 2b       	or	r22, r18
 610:	65 bb       	out	0x15, r22	; 21
 612:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
 614:	25 b3       	in	r18, 0x15	; 21
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	ac 01       	movw	r20, r24
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_enable_PULLUP+0xda>
 61e:	44 0f       	add	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_enable_PULLUP+0xd6>
 626:	ba 01       	movw	r22, r20
 628:	60 95       	com	r22
 62a:	62 23       	and	r22, r18
 62c:	65 bb       	out	0x15, r22	; 21
 62e:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (enable_pullup==1)
 630:	41 30       	cpi	r20, 0x01	; 1
 632:	69 f4       	brne	.+26     	; 0x64e <DIO_enable_PULLUP+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
 634:	22 b3       	in	r18, 0x12	; 18
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	ac 01       	movw	r20, r24
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_enable_PULLUP+0xfa>
 63e:	44 0f       	add	r20, r20
 640:	55 1f       	adc	r21, r21
 642:	6a 95       	dec	r22
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_enable_PULLUP+0xf6>
 646:	ba 01       	movw	r22, r20
 648:	62 2b       	or	r22, r18
 64a:	62 bb       	out	0x12, r22	; 18
 64c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
 64e:	22 b3       	in	r18, 0x12	; 18
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	ac 01       	movw	r20, r24
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_enable_PULLUP+0x114>
 658:	44 0f       	add	r20, r20
 65a:	55 1f       	adc	r21, r21
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_enable_PULLUP+0x110>
 660:	ba 01       	movw	r22, r20
 662:	60 95       	com	r22
 664:	62 23       	and	r22, r18
 666:	62 bb       	out	0x12, r22	; 18
 668:	08 95       	ret

0000066a <EEPROM_WRITE>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void EEPROM_WRITE (unsigned short address,unsigned char data)
{
	EEAR=address;
 66a:	9f bb       	out	0x1f, r25	; 31
 66c:	8e bb       	out	0x1e, r24	; 30
	EEDR=data;
 66e:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
 670:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
 672:	e1 9a       	sbi	0x1c, 1	; 28
	while(READ_BIT(EECR,EEWE)==1);
 674:	e1 99       	sbic	0x1c, 1	; 28
 676:	fe cf       	rjmp	.-4      	; 0x674 <EEPROM_WRITE+0xa>
}
 678:	08 95       	ret

0000067a <EEPROM_READ>:
unsigned char EEPROM_READ (unsigned short address)
{
	EEAR=address;
 67a:	9f bb       	out	0x1f, r25	; 31
 67c:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE);
 67e:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR;
 680:	8d b3       	in	r24, 0x1d	; 29
 682:	08 95       	ret

00000684 <Keypad_INIT>:


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
 684:	4f 92       	push	r4
 686:	5f 92       	push	r5
 688:	6f 92       	push	r6
 68a:	7f 92       	push	r7
 68c:	8f 92       	push	r8
 68e:	9f 92       	push	r9
 690:	af 92       	push	r10
 692:	bf 92       	push	r11
 694:	cf 92       	push	r12
 696:	df 92       	push	r13
 698:	ef 92       	push	r14
 69a:	ff 92       	push	r15
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	f8 2e       	mov	r15, r24
 6a6:	e4 2e       	mov	r14, r20
 6a8:	00 e0       	ldi	r16, 0x00	; 0
 6aa:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
 6ac:	c6 2e       	mov	r12, r22
 6ae:	dd 24       	eor	r13, r13
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 6b0:	82 2e       	mov	r8, r18
 6b2:	99 24       	eor	r9, r9
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
		DIO_set_PIN_dir(input_portname,input_firstpin+counter,0);
		DIO_enable_PULLUP(input_portname,input_firstpin+counter,1);
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
 6b4:	56 01       	movw	r10, r12
 6b6:	08 94       	sec
 6b8:	a1 1c       	adc	r10, r1
 6ba:	b1 1c       	adc	r11, r1
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
 6bc:	66 24       	eor	r6, r6
 6be:	77 24       	eor	r7, r7
 6c0:	68 94       	set
 6c2:	61 f8       	bld	r6, 1
 6c4:	6c 0c       	add	r6, r12
 6c6:	7d 1c       	adc	r7, r13
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
 6c8:	0f 2e       	mov	r0, r31
 6ca:	f3 e0       	ldi	r31, 0x03	; 3
 6cc:	4f 2e       	mov	r4, r31
 6ce:	55 24       	eor	r5, r5
 6d0:	f0 2d       	mov	r31, r0
 6d2:	4c 0c       	add	r4, r12
 6d4:	5d 1c       	adc	r5, r13
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 6d6:	b8 01       	movw	r22, r16
 6d8:	6c 0d       	add	r22, r12
 6da:	7d 1d       	adc	r23, r13
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
 6dc:	8f 2d       	mov	r24, r15
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	41 e0       	ldi	r20, 0x01	; 1
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 6e8:	e8 01       	movw	r28, r16
 6ea:	c8 0d       	add	r28, r8
 6ec:	d9 1d       	adc	r29, r9
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
		DIO_set_PIN_dir(input_portname,input_firstpin+counter,0);
 6ee:	8e 2d       	mov	r24, r14
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	be 01       	movw	r22, r28
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
		DIO_enable_PULLUP(input_portname,input_firstpin+counter,1);
 6fc:	8e 2d       	mov	r24, r14
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	be 01       	movw	r22, r28
 702:	41 e0       	ldi	r20, 0x01	; 1
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_enable_PULLUP>
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
 70a:	8f 2d       	mov	r24, r15
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	b6 01       	movw	r22, r12
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
 718:	8f 2d       	mov	r24, r15
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	b5 01       	movw	r22, r10
 71e:	41 e0       	ldi	r20, 0x01	; 1
 720:	50 e0       	ldi	r21, 0x00	; 0
 722:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
 726:	8f 2d       	mov	r24, r15
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	b3 01       	movw	r22, r6
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	50 e0       	ldi	r21, 0x00	; 0
 730:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
 734:	8f 2d       	mov	r24, r15
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b2 01       	movw	r22, r4
 73a:	41 e0       	ldi	r20, 0x01	; 1
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 742:	0f 5f       	subi	r16, 0xFF	; 255
 744:	1f 4f       	sbci	r17, 0xFF	; 255
unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
 746:	04 30       	cpi	r16, 0x04	; 4
 748:	11 05       	cpc	r17, r1
 74a:	29 f6       	brne	.-118    	; 0x6d6 <Keypad_INIT+0x52>
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	ff 90       	pop	r15
 756:	ef 90       	pop	r14
 758:	df 90       	pop	r13
 75a:	cf 90       	pop	r12
 75c:	bf 90       	pop	r11
 75e:	af 90       	pop	r10
 760:	9f 90       	pop	r9
 762:	8f 90       	pop	r8
 764:	7f 90       	pop	r7
 766:	6f 90       	pop	r6
 768:	5f 90       	pop	r5
 76a:	4f 90       	pop	r4
 76c:	08 95       	ret

0000076e <Keypad_READ>:
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
 76e:	2f 92       	push	r2
 770:	3f 92       	push	r3
 772:	4f 92       	push	r4
 774:	5f 92       	push	r5
 776:	6f 92       	push	r6
 778:	7f 92       	push	r7
 77a:	8f 92       	push	r8
 77c:	9f 92       	push	r9
 77e:	af 92       	push	r10
 780:	bf 92       	push	r11
 782:	cf 92       	push	r12
 784:	df 92       	push	r13
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	00 d0       	rcall	.+0      	; 0x794 <Keypad_READ+0x26>
 794:	00 d0       	rcall	.+0      	; 0x796 <Keypad_READ+0x28>
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
 79a:	68 2e       	mov	r6, r24
 79c:	cc 24       	eor	r12, r12
 79e:	dd 24       	eor	r13, r13
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 7a0:	86 2f       	mov	r24, r22
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	9a 83       	std	Y+2, r25	; 0x02
 7a6:	89 83       	std	Y+1, r24	; 0x01
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
 7a8:	77 24       	eor	r7, r7
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 7aa:	82 2e       	mov	r8, r18
 7ac:	99 24       	eor	r9, r9
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
 7ae:	f4 2e       	mov	r15, r20
 7b0:	e7 2c       	mov	r14, r7
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
 7b2:	16 01       	movw	r2, r12
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 7b4:	49 80       	ldd	r4, Y+1	; 0x01
 7b6:	5a 80       	ldd	r5, Y+2	; 0x02
 7b8:	4c 0c       	add	r4, r12
 7ba:	5d 1c       	adc	r5, r13
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
 7bc:	86 2d       	mov	r24, r6
 7be:	97 2d       	mov	r25, r7
 7c0:	b2 01       	movw	r22, r4
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 7ca:	1c 82       	std	Y+4, r1	; 0x04
 7cc:	1b 82       	std	Y+3, r1	; 0x03
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
 7ce:	ab 80       	ldd	r10, Y+3	; 0x03
 7d0:	bc 80       	ldd	r11, Y+4	; 0x04
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 7d2:	85 01       	movw	r16, r10
 7d4:	08 0d       	add	r16, r8
 7d6:	19 1d       	adc	r17, r9
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
 7d8:	8f 2d       	mov	r24, r15
 7da:	9e 2d       	mov	r25, r14
 7dc:	b8 01       	movw	r22, r16
 7de:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_READ_PIN>
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	e1 f4       	brne	.+56     	; 0x81e <Keypad_READ+0xb0>
			{
				while(DIO_READ_PIN(input_portname,input_firstpin+col)==0);
 7e6:	8f 2d       	mov	r24, r15
 7e8:	9e 2d       	mov	r25, r14
 7ea:	b8 01       	movw	r22, r16
 7ec:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_READ_PIN>
 7f0:	00 97       	sbiw	r24, 0x00	; 0
 7f2:	c9 f3       	breq	.-14     	; 0x7e6 <Keypad_READ+0x78>
				return_val = arr[row][col];
 7f4:	c1 01       	movw	r24, r2
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	8a 0d       	add	r24, r10
 800:	9b 1d       	adc	r25, r11
 802:	80 5a       	subi	r24, 0xA0	; 160
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	fc 01       	movw	r30, r24
 808:	00 81       	ld	r16, Z
				break;
			}
		}
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,1);
 80a:	86 2d       	mov	r24, r6
 80c:	97 2d       	mov	r25, r7
 80e:	b2 01       	movw	r22, r4
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	50 e0       	ldi	r21, 0x00	; 0
 814:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		if (return_val!=0xff)
 818:	0f 3f       	cpi	r16, 0xFF	; 255
 81a:	51 f0       	breq	.+20     	; 0x830 <Keypad_READ+0xc2>
 81c:	12 c0       	rjmp	.+36     	; 0x842 <Keypad_READ+0xd4>
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	9c 81       	ldd	r25, Y+4	; 0x04
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	9c 83       	std	Y+4, r25	; 0x04
 826:	8b 83       	std	Y+3, r24	; 0x03
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
 828:	84 30       	cpi	r24, 0x04	; 4
 82a:	91 05       	cpc	r25, r1
 82c:	81 f6       	brne	.-96     	; 0x7ce <Keypad_READ+0x60>
 82e:	21 c0       	rjmp	.+66     	; 0x872 <__stack+0x13>
 830:	08 94       	sec
 832:	c1 1c       	adc	r12, r1
 834:	d1 1c       	adc	r13, r1
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
	
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
 836:	94 e0       	ldi	r25, 0x04	; 4
 838:	c9 16       	cp	r12, r25
 83a:	d1 04       	cpc	r13, r1
 83c:	09 f0       	breq	.+2      	; 0x840 <Keypad_READ+0xd2>
 83e:	b9 cf       	rjmp	.-142    	; 0x7b2 <Keypad_READ+0x44>
 840:	0f ef       	ldi	r16, 0xFF	; 255
		{
			break;
		}
	}	
	return return_val;
}
 842:	80 2f       	mov	r24, r16
 844:	0f 90       	pop	r0
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	1f 91       	pop	r17
 852:	0f 91       	pop	r16
 854:	ff 90       	pop	r15
 856:	ef 90       	pop	r14
 858:	df 90       	pop	r13
 85a:	cf 90       	pop	r12
 85c:	bf 90       	pop	r11
 85e:	af 90       	pop	r10
 860:	9f 90       	pop	r9
 862:	8f 90       	pop	r8
 864:	7f 90       	pop	r7
 866:	6f 90       	pop	r6
 868:	5f 90       	pop	r5
 86a:	4f 90       	pop	r4
 86c:	3f 90       	pop	r3
 86e:	2f 90       	pop	r2
 870:	08 95       	ret
				return_val = arr[row][col];
				break;
			}
		}
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,1);
 872:	86 2d       	mov	r24, r6
 874:	97 2d       	mov	r25, r7
 876:	b2 01       	movw	r22, r4
 878:	41 e0       	ldi	r20, 0x01	; 1
 87a:	50 e0       	ldi	r21, 0x00	; 0
 87c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 880:	d7 cf       	rjmp	.-82     	; 0x830 <Keypad_READ+0xc2>

00000882 <enable_pulse>:
#define command 0
#define data 1

void static enable_pulse (void)
{
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,1);
 882:	83 e6       	ldi	r24, 0x63	; 99
 884:	65 e0       	ldi	r22, 0x05	; 5
 886:	41 e0       	ldi	r20, 0x01	; 1
 888:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 88c:	8f e9       	ldi	r24, 0x9F	; 159
 88e:	9f e0       	ldi	r25, 0x0F	; 15
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	f1 f7       	brne	.-4      	; 0x890 <enable_pulse+0xe>
 894:	00 c0       	rjmp	.+0      	; 0x896 <enable_pulse+0x14>
 896:	00 00       	nop
	_delay_ms(2);
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,0);
 898:	83 e6       	ldi	r24, 0x63	; 99
 89a:	65 e0       	ldi	r22, 0x05	; 5
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
}
 8a2:	08 95       	ret

000008a4 <LCD_send_char>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
 8a4:	af 92       	push	r10
 8a6:	bf 92       	push	r11
 8a8:	cf 92       	push	r12
 8aa:	df 92       	push	r13
 8ac:	ef 92       	push	r14
 8ae:	ff 92       	push	r15
 8b0:	0f 93       	push	r16
 8b2:	1f 93       	push	r17
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	c0 e0       	ldi	r28, 0x00	; 0
 8ba:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
 8bc:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
 8be:	0f 2e       	mov	r0, r31
 8c0:	f7 e0       	ldi	r31, 0x07	; 7
 8c2:	ef 2e       	mov	r14, r31
 8c4:	ff 24       	eor	r15, r15
 8c6:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 8c8:	cc 24       	eor	r12, r12
 8ca:	dd 24       	eor	r13, r13
 8cc:	c3 94       	inc	r12
 8ce:	a8 2e       	mov	r10, r24
 8d0:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
			x=3;
 8d2:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
 8d4:	a7 01       	movw	r20, r14
 8d6:	4c 1b       	sub	r20, r28
 8d8:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 8da:	c6 01       	movw	r24, r12
 8dc:	04 2e       	mov	r0, r20
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <LCD_send_char+0x40>
 8e0:	88 0f       	add	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	0a 94       	dec	r0
 8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <LCD_send_char+0x3c>
 8e8:	8a 21       	and	r24, r10
 8ea:	9b 21       	and	r25, r11
 8ec:	9c 01       	movw	r18, r24
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <LCD_send_char+0x50>
 8f0:	36 95       	lsr	r19
 8f2:	27 95       	ror	r18
 8f4:	4a 95       	dec	r20
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <LCD_send_char+0x4c>
 8f8:	a9 01       	movw	r20, r18
 8fa:	83 e6       	ldi	r24, 0x63	; 99
 8fc:	61 2f       	mov	r22, r17
 8fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
 902:	c3 30       	cpi	r28, 0x03	; 3
 904:	21 f0       	breq	.+8      	; 0x90e <LCD_send_char+0x6a>
 906:	c7 30       	cpi	r28, 0x07	; 7
 908:	11 f0       	breq	.+4      	; 0x90e <LCD_send_char+0x6a>
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
 90a:	11 50       	subi	r17, 0x01	; 1
 90c:	08 c0       	rjmp	.+16     	; 0x91e <LCD_send_char+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
 90e:	83 e6       	ldi	r24, 0x63	; 99
 910:	64 e0       	ldi	r22, 0x04	; 4
 912:	41 e0       	ldi	r20, 0x01	; 1
 914:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
			enable_pulse();
 918:	0e 94 41 04 	call	0x882	; 0x882 <enable_pulse>
			x=3;
 91c:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
 91e:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
 920:	c8 30       	cpi	r28, 0x08	; 8
 922:	d1 05       	cpc	r29, r1
 924:	b9 f6       	brne	.-82     	; 0x8d4 <LCD_send_char+0x30>
 926:	8f ec       	ldi	r24, 0xCF	; 207
 928:	97 e0       	ldi	r25, 0x07	; 7
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	f1 f7       	brne	.-4      	; 0x92a <LCD_send_char+0x86>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <LCD_send_char+0x8c>
 930:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	1f 91       	pop	r17
 938:	0f 91       	pop	r16
 93a:	ff 90       	pop	r15
 93c:	ef 90       	pop	r14
 93e:	df 90       	pop	r13
 940:	cf 90       	pop	r12
 942:	bf 90       	pop	r11
 944:	af 90       	pop	r10
 946:	08 95       	ret

00000948 <LCD_send_cmd>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
 948:	af 92       	push	r10
 94a:	bf 92       	push	r11
 94c:	cf 92       	push	r12
 94e:	df 92       	push	r13
 950:	ef 92       	push	r14
 952:	ff 92       	push	r15
 954:	0f 93       	push	r16
 956:	1f 93       	push	r17
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	c0 e0       	ldi	r28, 0x00	; 0
 95e:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//;
 960:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
 962:	0f 2e       	mov	r0, r31
 964:	f7 e0       	ldi	r31, 0x07	; 7
 966:	ef 2e       	mov	r14, r31
 968:	ff 24       	eor	r15, r15
 96a:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 96c:	cc 24       	eor	r12, r12
 96e:	dd 24       	eor	r13, r13
 970:	c3 94       	inc	r12
 972:	a8 2e       	mov	r10, r24
 974:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
			x=3;
 976:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
 978:	a7 01       	movw	r20, r14
 97a:	4c 1b       	sub	r20, r28
 97c:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 97e:	c6 01       	movw	r24, r12
 980:	04 2e       	mov	r0, r20
 982:	02 c0       	rjmp	.+4      	; 0x988 <LCD_send_cmd+0x40>
 984:	88 0f       	add	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	0a 94       	dec	r0
 98a:	e2 f7       	brpl	.-8      	; 0x984 <LCD_send_cmd+0x3c>
 98c:	8a 21       	and	r24, r10
 98e:	9b 21       	and	r25, r11
 990:	9c 01       	movw	r18, r24
 992:	02 c0       	rjmp	.+4      	; 0x998 <LCD_send_cmd+0x50>
 994:	36 95       	lsr	r19
 996:	27 95       	ror	r18
 998:	4a 95       	dec	r20
 99a:	e2 f7       	brpl	.-8      	; 0x994 <LCD_send_cmd+0x4c>
 99c:	a9 01       	movw	r20, r18
 99e:	83 e6       	ldi	r24, 0x63	; 99
 9a0:	61 2f       	mov	r22, r17
 9a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
 9a6:	c3 30       	cpi	r28, 0x03	; 3
 9a8:	21 f0       	breq	.+8      	; 0x9b2 <LCD_send_cmd+0x6a>
 9aa:	c7 30       	cpi	r28, 0x07	; 7
 9ac:	11 f0       	breq	.+4      	; 0x9b2 <LCD_send_cmd+0x6a>
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
 9ae:	11 50       	subi	r17, 0x01	; 1
 9b0:	08 c0       	rjmp	.+16     	; 0x9c2 <LCD_send_cmd+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
 9b2:	83 e6       	ldi	r24, 0x63	; 99
 9b4:	64 e0       	ldi	r22, 0x04	; 4
 9b6:	40 e0       	ldi	r20, 0x00	; 0
 9b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
			enable_pulse();
 9bc:	0e 94 41 04 	call	0x882	; 0x882 <enable_pulse>
			x=3;
 9c0:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
 9c2:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
 9c4:	c8 30       	cpi	r28, 0x08	; 8
 9c6:	d1 05       	cpc	r29, r1
 9c8:	b9 f6       	brne	.-82     	; 0x978 <LCD_send_cmd+0x30>
 9ca:	8f ec       	ldi	r24, 0xCF	; 207
 9cc:	97 e0       	ldi	r25, 0x07	; 7
 9ce:	01 97       	sbiw	r24, 0x01	; 1
 9d0:	f1 f7       	brne	.-4      	; 0x9ce <LCD_send_cmd+0x86>
 9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <LCD_send_cmd+0x8c>
 9d4:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	bf 90       	pop	r11
 9e8:	af 90       	pop	r10
 9ea:	08 95       	ret

000009ec <LCD_CLEAR_Screen>:
#endif


void LCD_CLEAR_Screen (void)
{
	LCD_send_cmd(0x01);
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
 9f2:	8f e1       	ldi	r24, 0x1F	; 31
 9f4:	9e e4       	ldi	r25, 0x4E	; 78
 9f6:	01 97       	sbiw	r24, 0x01	; 1
 9f8:	f1 f7       	brne	.-4      	; 0x9f6 <LCD_CLEAR_Screen+0xa>
 9fa:	00 c0       	rjmp	.+0      	; 0x9fc <LCD_CLEAR_Screen+0x10>
 9fc:	00 00       	nop
	_delay_ms(10);
}
 9fe:	08 95       	ret

00000a00 <LCD_INIT>:
	LCD_send_cmd(ENTRY_MODE_RTL);
	
}
#elif defined Four_BITS_MODE
void LCD_INIT (void)
{
 a00:	cf 93       	push	r28
 a02:	8f e7       	ldi	r24, 0x7F	; 127
 a04:	98 e3       	ldi	r25, 0x38	; 56
 a06:	a1 e0       	ldi	r26, 0x01	; 1
 a08:	81 50       	subi	r24, 0x01	; 1
 a0a:	90 40       	sbci	r25, 0x00	; 0
 a0c:	a0 40       	sbci	r26, 0x00	; 0
 a0e:	e1 f7       	brne	.-8      	; 0xa08 <LCD_INIT+0x8>
 a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCD_INIT+0x12>
 a12:	00 00       	nop
	_delay_ms(50);
	unsigned char counter=0;
 a14:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
 a16:	83 e6       	ldi	r24, 0x63	; 99
 a18:	6c 2f       	mov	r22, r28
 a1a:	41 e0       	ldi	r20, 0x01	; 1
 a1c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
void LCD_INIT (void)
{
	_delay_ms(50);
	unsigned char counter=0;
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
 a20:	cf 5f       	subi	r28, 0xFF	; 255
 a22:	c4 30       	cpi	r28, 0x04	; 4
 a24:	c1 f7       	brne	.-16     	; 0xa16 <LCD_INIT+0x16>
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
		x++;
	}
	DIO_set_PIN_dir(En_Rg_selection,En_Pn_selection,1);
 a26:	83 e6       	ldi	r24, 0x63	; 99
 a28:	65 e0       	ldi	r22, 0x05	; 5
 a2a:	41 e0       	ldi	r20, 0x01	; 1
 a2c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_set_PIN_dir(RS_Rg_selection,RS_Pn_selection,1);
 a30:	83 e6       	ldi	r24, 0x63	; 99
 a32:	64 e0       	ldi	r22, 0x04	; 4
 a34:	41 e0       	ldi	r20, 0x01	; 1
 a36:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	LCD_send_cmd(RETURN_HOME);
 a3a:	82 e0       	ldi	r24, 0x02	; 2
 a3c:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
 a40:	af e0       	ldi	r26, 0x0F	; 15
 a42:	b7 e2       	ldi	r27, 0x27	; 39
 a44:	11 97       	sbiw	r26, 0x01	; 1
 a46:	f1 f7       	brne	.-4      	; 0xa44 <LCD_INIT+0x44>
 a48:	00 c0       	rjmp	.+0      	; 0xa4a <LCD_INIT+0x4a>
 a4a:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(0x28);
 a4c:	88 e2       	ldi	r24, 0x28	; 40
 a4e:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
 a52:	8e e0       	ldi	r24, 0x0E	; 14
 a54:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
	LCD_send_cmd(CLEAR_SCREEN);
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
 a5e:	8f e0       	ldi	r24, 0x0F	; 15
 a60:	97 e2       	ldi	r25, 0x27	; 39
 a62:	01 97       	sbiw	r24, 0x01	; 1
 a64:	f1 f7       	brne	.-4      	; 0xa62 <LCD_INIT+0x62>
 a66:	00 c0       	rjmp	.+0      	; 0xa68 <LCD_INIT+0x68>
 a68:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(ENTRY_MODE_RTL);
 a6a:	86 e0       	ldi	r24, 0x06	; 6
 a6c:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
}
 a70:	cf 91       	pop	r28
 a72:	08 95       	ret

00000a74 <LCD_MOVE_CURSOR>:
#endif

void LCD_MOVE_CURSOR (unsigned char row,unsigned char coloumn)
{
	if (row>2||row<1||coloumn>16||coloumn<1)
 a74:	98 2f       	mov	r25, r24
 a76:	91 50       	subi	r25, 0x01	; 1
 a78:	92 30       	cpi	r25, 0x02	; 2
 a7a:	20 f4       	brcc	.+8      	; 0xa84 <LCD_MOVE_CURSOR+0x10>
 a7c:	61 31       	cpi	r22, 0x11	; 17
 a7e:	10 f4       	brcc	.+4      	; 0xa84 <LCD_MOVE_CURSOR+0x10>
 a80:	66 23       	and	r22, r22
 a82:	21 f4       	brne	.+8      	; 0xa8c <LCD_MOVE_CURSOR+0x18>
	{
		LCD_send_cmd(0x80);
 a84:	80 e8       	ldi	r24, 0x80	; 128
 a86:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
 a8a:	08 95       	ret
	}
	else if (row==1)
 a8c:	81 30       	cpi	r24, 0x01	; 1
 a8e:	29 f4       	brne	.+10     	; 0xa9a <LCD_MOVE_CURSOR+0x26>
	{
		LCD_send_cmd(0x80+coloumn-1);
 a90:	86 2f       	mov	r24, r22
 a92:	81 58       	subi	r24, 0x81	; 129
 a94:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
 a98:	08 95       	ret
	}
	else if (row==2)
 a9a:	82 30       	cpi	r24, 0x02	; 2
 a9c:	21 f4       	brne	.+8      	; 0xaa6 <LCD_MOVE_CURSOR+0x32>
	{
		LCD_send_cmd(0xc0+coloumn-1);
 a9e:	86 2f       	mov	r24, r22
 aa0:	81 54       	subi	r24, 0x41	; 65
 aa2:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
 aa6:	08 95       	ret

00000aa8 <LCD_send_string>:
	}
}
void LCD_send_string (char*ptr)
{
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	ec 01       	movw	r28, r24
	while (*ptr!=0)
 aae:	88 81       	ld	r24, Y
 ab0:	88 23       	and	r24, r24
 ab2:	31 f0       	breq	.+12     	; 0xac0 <LCD_send_string+0x18>
	else if (row==2)
	{
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
 ab4:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		LCD_send_char(*ptr);
 ab6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
{
	while (*ptr!=0)
 aba:	89 91       	ld	r24, Y+
 abc:	88 23       	and	r24, r24
 abe:	d9 f7       	brne	.-10     	; 0xab6 <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	08 95       	ret

00000ac6 <scan_value>:
int scan_value (unsigned char first_asci,int first_value)
{
	
	first_value*=10;
 ac6:	26 2f       	mov	r18, r22
 ac8:	37 2f       	mov	r19, r23
 aca:	22 0f       	add	r18, r18
 acc:	33 1f       	adc	r19, r19
 ace:	a9 01       	movw	r20, r18
 ad0:	44 0f       	add	r20, r20
 ad2:	55 1f       	adc	r21, r21
 ad4:	44 0f       	add	r20, r20
 ad6:	55 1f       	adc	r21, r21
 ad8:	24 0f       	add	r18, r20
 ada:	35 1f       	adc	r19, r21
	first_value+=(first_asci-0x30);
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	c0 97       	sbiw	r24, 0x30	; 48
 ae0:	82 0f       	add	r24, r18
 ae2:	93 1f       	adc	r25, r19
	
	return first_value;
}
 ae4:	08 95       	ret

00000ae6 <print_val>:
void print_val (int val)
{
 ae6:	ef 92       	push	r14
 ae8:	ff 92       	push	r15
 aea:	0f 93       	push	r16
 aec:	1f 93       	push	r17
 aee:	cf 93       	push	r28
 af0:	df 93       	push	r29
 af2:	7c 01       	movw	r14, r24
	int asci_val,counter=1,x=val;
	if (val==0)
 af4:	00 97       	sbiw	r24, 0x00	; 0
 af6:	21 f4       	brne	.+8      	; 0xb00 <print_val+0x1a>
	{
		LCD_send_char('0');
 af8:	80 e3       	ldi	r24, 0x30	; 48
 afa:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
 afe:	40 c0       	rjmp	.+128    	; 0xb80 <print_val+0x9a>
	}
	else if (val<10)
 b00:	8a e0       	ldi	r24, 0x0A	; 10
 b02:	e8 16       	cp	r14, r24
 b04:	f1 04       	cpc	r15, r1
 b06:	2c f4       	brge	.+10     	; 0xb12 <print_val+0x2c>
	{
		LCD_send_char(val+0x30);
 b08:	8e 2d       	mov	r24, r14
 b0a:	80 5d       	subi	r24, 0xD0	; 208
 b0c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
 b10:	37 c0       	rjmp	.+110    	; 0xb80 <print_val+0x9a>
	int asci_val,counter=1,x=val;
	if (val==0)
	{
		LCD_send_char('0');
	}
	else if (val<10)
 b12:	c7 01       	movw	r24, r14
 b14:	c1 e0       	ldi	r28, 0x01	; 1
 b16:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else
	{
		while (x>=10)
		{
			x=x/10;
 b18:	ea e0       	ldi	r30, 0x0A	; 10
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	bf 01       	movw	r22, r30
 b1e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 b22:	cb 01       	movw	r24, r22
			counter*=10;
 b24:	9e 01       	movw	r18, r28
 b26:	22 0f       	add	r18, r18
 b28:	33 1f       	adc	r19, r19
 b2a:	cc 0f       	add	r28, r28
 b2c:	dd 1f       	adc	r29, r29
 b2e:	cc 0f       	add	r28, r28
 b30:	dd 1f       	adc	r29, r29
 b32:	cc 0f       	add	r28, r28
 b34:	dd 1f       	adc	r29, r29
 b36:	c2 0f       	add	r28, r18
 b38:	d3 1f       	adc	r29, r19
	{
		LCD_send_char(val+0x30);
	}
	else
	{
		while (x>=10)
 b3a:	6a 30       	cpi	r22, 0x0A	; 10
 b3c:	71 05       	cpc	r23, r1
 b3e:	74 f7       	brge	.-36     	; 0xb1c <print_val+0x36>
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
 b40:	ca 30       	cpi	r28, 0x0A	; 10
 b42:	d1 05       	cpc	r29, r1
 b44:	ac f0       	brlt	.+42     	; 0xb70 <print_val+0x8a>
		{
			asci_val=(val/counter)%10;
 b46:	0a e0       	ldi	r16, 0x0A	; 10
 b48:	10 e0       	ldi	r17, 0x00	; 0
 b4a:	c7 01       	movw	r24, r14
 b4c:	be 01       	movw	r22, r28
 b4e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 b52:	cb 01       	movw	r24, r22
 b54:	b8 01       	movw	r22, r16
 b56:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
			LCD_send_char(asci_val+0x30);
 b5a:	80 5d       	subi	r24, 0xD0	; 208
 b5c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
			counter/=10;
 b60:	ce 01       	movw	r24, r28
 b62:	b8 01       	movw	r22, r16
 b64:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 b68:	eb 01       	movw	r28, r22
		while (x>=10)
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
 b6a:	6a 30       	cpi	r22, 0x0A	; 10
 b6c:	71 05       	cpc	r23, r1
 b6e:	6c f7       	brge	.-38     	; 0xb4a <print_val+0x64>
		{
			asci_val=(val/counter)%10;
			LCD_send_char(asci_val+0x30);
			counter/=10;
		}
		LCD_send_char((val%10)+0x30);
 b70:	c7 01       	movw	r24, r14
 b72:	6a e0       	ldi	r22, 0x0A	; 10
 b74:	70 e0       	ldi	r23, 0x00	; 0
 b76:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divmodhi4>
 b7a:	80 5d       	subi	r24, 0xD0	; 208
 b7c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
	}
}
 b80:	df 91       	pop	r29
 b82:	cf 91       	pop	r28
 b84:	1f 91       	pop	r17
 b86:	0f 91       	pop	r16
 b88:	ff 90       	pop	r15
 b8a:	ef 90       	pop	r14
 b8c:	08 95       	ret

00000b8e <LED_INIT>:
 *  Author: MT
 */ 
#include "DIO.h"
void LED_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,1);
 b8e:	41 e0       	ldi	r20, 0x01	; 1
 b90:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
}
 b94:	08 95       	ret

00000b96 <BUTTON_INIT>:
void BUTTON_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
 b96:	40 e0       	ldi	r20, 0x00	; 0
 b98:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
}
 b9c:	08 95       	ret

00000b9e <BUTTON_INIT_enable_PULLUP>:
void BUTTON_INIT_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
 b9e:	cf 93       	push	r28
 ba0:	df 93       	push	r29
 ba2:	d8 2f       	mov	r29, r24
 ba4:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
 ba6:	40 e0       	ldi	r20, 0x00	; 0
 ba8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,1);
 bac:	8d 2f       	mov	r24, r29
 bae:	6c 2f       	mov	r22, r28
 bb0:	41 e0       	ldi	r20, 0x01	; 1
 bb2:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_enable_PULLUP>
}
 bb6:	df 91       	pop	r29
 bb8:	cf 91       	pop	r28
 bba:	08 95       	ret

00000bbc <BUTTON_INIT_disable_PULLUP>:
void BUTTON_INIT_disable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
 bbc:	cf 93       	push	r28
 bbe:	df 93       	push	r29
 bc0:	d8 2f       	mov	r29, r24
 bc2:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
 bc4:	40 e0       	ldi	r20, 0x00	; 0
 bc6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,0);
 bca:	8d 2f       	mov	r24, r29
 bcc:	6c 2f       	mov	r22, r28
 bce:	40 e0       	ldi	r20, 0x00	; 0
 bd0:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_enable_PULLUP>
}
 bd4:	df 91       	pop	r29
 bd6:	cf 91       	pop	r28
 bd8:	08 95       	ret

00000bda <LED_ON>:

void LED_ON (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,1);
 bda:	41 e0       	ldi	r20, 0x01	; 1
 bdc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
}
 be0:	08 95       	ret

00000be2 <LED_OFF>:
void LED_OFF (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,0);
 be2:	40 e0       	ldi	r20, 0x00	; 0
 be4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
}
 be8:	08 95       	ret

00000bea <LED_TOGGLE>:
void LED_TOGGLE (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_Toggle_PIN_on_port(portname,pin_number_0_7);
 bea:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_Toggle_PIN_on_port>
}
 bee:	08 95       	ret

00000bf0 <READ_PIN_status>:
unsigned char READ_PIN_status (unsigned char portname,unsigned char pin_number_0_7)
{	
	return DIO_READ_PIN(portname,pin_number_0_7);
 bf0:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_READ_PIN>
}	
 bf4:	08 95       	ret

00000bf6 <main>:
#include "EEPROM.h"
#include "LED.h"

int main(void)
{
    LCD_INIT();
 bf6:	0e 94 00 05 	call	0xa00	; 0xa00 <LCD_INIT>
	Keypad_INIT('d',0,'d',4);
 bfa:	84 e6       	ldi	r24, 0x64	; 100
 bfc:	60 e0       	ldi	r22, 0x00	; 0
 bfe:	44 e6       	ldi	r20, 0x64	; 100
 c00:	24 e0       	ldi	r18, 0x04	; 4
 c02:	0e 94 42 03 	call	0x684	; 0x684 <Keypad_INIT>
	LED_INIT('a',0);
 c06:	81 e6       	ldi	r24, 0x61	; 97
 c08:	60 e0       	ldi	r22, 0x00	; 0
 c0a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LED_INIT>
	LED_INIT('a',1);
 c0e:	81 e6       	ldi	r24, 0x61	; 97
 c10:	61 e0       	ldi	r22, 0x01	; 1
 c12:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LED_INIT>
	
	char i=1,pressed=NOT_PRESSED,counter=0;
	int password=0,firstpassword=0;
	if (EEPROM_READ(0x00)==0xff)
 c16:	80 e0       	ldi	r24, 0x00	; 0
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	0e 94 3d 03 	call	0x67a	; 0x67a <EEPROM_READ>
 c1e:	8f 3f       	cpi	r24, 0xFF	; 255
 c20:	b9 f5       	brne	.+110    	; 0xc90 <main+0x9a>
	{
		LCD_send_string("Set Pass:");
 c22:	80 e7       	ldi	r24, 0x70	; 112
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCD_send_string>
	Keypad_INIT('d',0,'d',4);
	LED_INIT('a',0);
	LED_INIT('a',1);
	
	char i=1,pressed=NOT_PRESSED,counter=0;
	int password=0,firstpassword=0;
 c2a:	ee 24       	eor	r14, r14
 c2c:	ff 24       	eor	r15, r15
    LCD_INIT();
	Keypad_INIT('d',0,'d',4);
	LED_INIT('a',0);
	LED_INIT('a',1);
	
	char i=1,pressed=NOT_PRESSED,counter=0;
 c2e:	c1 e0       	ldi	r28, 0x01	; 1
	if (EEPROM_READ(0x00)==0xff)
	{
		LCD_send_string("Set Pass:");
		while (i<=4)
		{
			pressed=Keypad_READ('d',0,'d',4);
 c30:	84 e6       	ldi	r24, 0x64	; 100
 c32:	60 e0       	ldi	r22, 0x00	; 0
 c34:	44 e6       	ldi	r20, 0x64	; 100
 c36:	24 e0       	ldi	r18, 0x04	; 4
 c38:	0e 94 b7 03 	call	0x76e	; 0x76e <Keypad_READ>
 c3c:	d8 2f       	mov	r29, r24
			if (pressed!=NOT_PRESSED)
 c3e:	8f 3f       	cpi	r24, 0xFF	; 255
 c40:	b9 f3       	breq	.-18     	; 0xc30 <main+0x3a>
			{
				LCD_send_char(pressed);
 c42:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
				EEPROM_WRITE(i,pressed);
 c46:	8c 2f       	mov	r24, r28
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	6d 2f       	mov	r22, r29
 c4c:	0e 94 35 03 	call	0x66a	; 0x66a <EEPROM_WRITE>
 c50:	8f ef       	ldi	r24, 0xFF	; 255
 c52:	92 e5       	ldi	r25, 0x52	; 82
 c54:	a7 e0       	ldi	r26, 0x07	; 7
 c56:	81 50       	subi	r24, 0x01	; 1
 c58:	90 40       	sbci	r25, 0x00	; 0
 c5a:	a0 40       	sbci	r26, 0x00	; 0
 c5c:	e1 f7       	brne	.-8      	; 0xc56 <main+0x60>
 c5e:	00 c0       	rjmp	.+0      	; 0xc60 <main+0x6a>
 c60:	00 00       	nop
				_delay_ms(300);
				LCD_send_cmd(SHIFT_CURSOR_POSITION_LEFT);
 c62:	80 e1       	ldi	r24, 0x10	; 16
 c64:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
				LCD_send_char('*');
 c68:	8a e2       	ldi	r24, 0x2A	; 42
 c6a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
				firstpassword=scan_value(EEPROM_READ(i),firstpassword);
 c6e:	8c 2f       	mov	r24, r28
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	0e 94 3d 03 	call	0x67a	; 0x67a <EEPROM_READ>
 c76:	b7 01       	movw	r22, r14
 c78:	0e 94 63 05 	call	0xac6	; 0xac6 <scan_value>
 c7c:	7c 01       	movw	r14, r24
				i++;
 c7e:	cf 5f       	subi	r28, 0xFF	; 255
	char i=1,pressed=NOT_PRESSED,counter=0;
	int password=0,firstpassword=0;
	if (EEPROM_READ(0x00)==0xff)
	{
		LCD_send_string("Set Pass:");
		while (i<=4)
 c80:	c5 30       	cpi	r28, 0x05	; 5
 c82:	b0 f2       	brcs	.-84     	; 0xc30 <main+0x3a>
				firstpassword=scan_value(EEPROM_READ(i),firstpassword);
				i++;
			}
		}
		
		EEPROM_WRITE(0x00,0);
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	60 e0       	ldi	r22, 0x00	; 0
 c8a:	0e 94 35 03 	call	0x66a	; 0x66a <EEPROM_WRITE>
 c8e:	0f c0       	rjmp	.+30     	; 0xcae <main+0xb8>
	}
	else
	{
		LCD_send_string("Welcome");
 c90:	8a e7       	ldi	r24, 0x7A	; 122
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCD_send_string>
 c98:	8f ef       	ldi	r24, 0xFF	; 255
 c9a:	96 e1       	ldi	r25, 0x16	; 22
 c9c:	a1 e1       	ldi	r26, 0x11	; 17
 c9e:	81 50       	subi	r24, 0x01	; 1
 ca0:	90 40       	sbci	r25, 0x00	; 0
 ca2:	a0 40       	sbci	r26, 0x00	; 0
 ca4:	e1 f7       	brne	.-8      	; 0xc9e <main+0xa8>
 ca6:	00 c0       	rjmp	.+0      	; 0xca8 <main+0xb2>
 ca8:	00 00       	nop
	Keypad_INIT('d',0,'d',4);
	LED_INIT('a',0);
	LED_INIT('a',1);
	
	char i=1,pressed=NOT_PRESSED,counter=0;
	int password=0,firstpassword=0;
 caa:	ee 24       	eor	r14, r14
 cac:	ff 24       	eor	r15, r15
	else
	{
		LCD_send_string("Welcome");
		_delay_ms(700);
	}
	LCD_CLEAR_Screen();
 cae:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_CLEAR_Screen>
	LCD_send_string("Enter pass:");
 cb2:	82 e8       	ldi	r24, 0x82	; 130
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCD_send_string>
	Keypad_INIT('d',0,'d',4);
	LED_INIT('a',0);
	LED_INIT('a',1);
	
	char i=1,pressed=NOT_PRESSED,counter=0;
	int password=0,firstpassword=0;
 cba:	00 e0       	ldi	r16, 0x00	; 0
 cbc:	10 e0       	ldi	r17, 0x00	; 0
    LCD_INIT();
	Keypad_INIT('d',0,'d',4);
	LED_INIT('a',0);
	LED_INIT('a',1);
	
	char i=1,pressed=NOT_PRESSED,counter=0;
 cbe:	d0 e0       	ldi	r29, 0x00	; 0
			 }
			 counter=0;
			 password=0;
			 pressed=NOT_PRESSED;
			 LCD_CLEAR_Screen();
			 LCD_send_string("Enter pass:");
 cc0:	0f 2e       	mov	r0, r31
 cc2:	f2 e8       	ldi	r31, 0x82	; 130
 cc4:	cf 2e       	mov	r12, r31
 cc6:	f0 e0       	ldi	r31, 0x00	; 0
 cc8:	df 2e       	mov	r13, r31
 cca:	f0 2d       	mov	r31, r0
				 LED_TOGGLE('a',1);
				 _delay_ms(5000);
				 
			 }
			 counter=0;
			 password=0;
 ccc:	aa 24       	eor	r10, r10
 cce:	bb 24       	eor	r11, r11
				 _delay_ms(5000);
				 LED_OFF('a',0);
			 } 
			 else
			 {
				 LCD_send_string("Wrong Password");
 cd0:	0f 2e       	mov	r0, r31
 cd2:	f5 e9       	ldi	r31, 0x95	; 149
 cd4:	8f 2e       	mov	r8, r31
 cd6:	f0 e0       	ldi	r31, 0x00	; 0
 cd8:	9f 2e       	mov	r9, r31
 cda:	f0 2d       	mov	r31, r0
		 else if (counter==4)
		 {
			 LCD_CLEAR_Screen();
			 if (password==firstpassword)
			 {
				 LCD_send_string("Opened");
 cdc:	0f 2e       	mov	r0, r31
 cde:	fe e8       	ldi	r31, 0x8E	; 142
 ce0:	6f 2e       	mov	r6, r31
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	7f 2e       	mov	r7, r31
 ce6:	f0 2d       	mov	r31, r0
	}
	LCD_CLEAR_Screen();
	LCD_send_string("Enter pass:");
	while(1)
    {
         LED_ON('a',1); 
 ce8:	81 e6       	ldi	r24, 0x61	; 97
 cea:	61 e0       	ldi	r22, 0x01	; 1
 cec:	0e 94 ed 05 	call	0xbda	; 0xbda <LED_ON>
		 
		 pressed=Keypad_READ('d',0,'d',4);
 cf0:	84 e6       	ldi	r24, 0x64	; 100
 cf2:	60 e0       	ldi	r22, 0x00	; 0
 cf4:	44 e6       	ldi	r20, 0x64	; 100
 cf6:	24 e0       	ldi	r18, 0x04	; 4
 cf8:	0e 94 b7 03 	call	0x76e	; 0x76e <Keypad_READ>
 cfc:	c8 2f       	mov	r28, r24
		 if (pressed!=NOT_PRESSED)
 cfe:	8f 3f       	cpi	r24, 0xFF	; 255
 d00:	c1 f0       	breq	.+48     	; 0xd32 <main+0x13c>
		 {
			 LCD_send_char(pressed);
 d02:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
 d06:	8f ef       	ldi	r24, 0xFF	; 255
 d08:	92 e5       	ldi	r25, 0x52	; 82
 d0a:	a7 e0       	ldi	r26, 0x07	; 7
 d0c:	81 50       	subi	r24, 0x01	; 1
 d0e:	90 40       	sbci	r25, 0x00	; 0
 d10:	a0 40       	sbci	r26, 0x00	; 0
 d12:	e1 f7       	brne	.-8      	; 0xd0c <main+0x116>
 d14:	00 c0       	rjmp	.+0      	; 0xd16 <main+0x120>
 d16:	00 00       	nop
			 _delay_ms(300);
			 LCD_send_cmd(SHIFT_CURSOR_POSITION_LEFT);
 d18:	80 e1       	ldi	r24, 0x10	; 16
 d1a:	0e 94 a4 04 	call	0x948	; 0x948 <LCD_send_cmd>
			 LCD_send_char('*');
 d1e:	8a e2       	ldi	r24, 0x2A	; 42
 d20:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_send_char>
			 password=scan_value(pressed,password);
 d24:	8c 2f       	mov	r24, r28
 d26:	b8 01       	movw	r22, r16
 d28:	0e 94 63 05 	call	0xac6	; 0xac6 <scan_value>
 d2c:	8c 01       	movw	r16, r24
			 counter++;
 d2e:	df 5f       	subi	r29, 0xFF	; 255
 d30:	db cf       	rjmp	.-74     	; 0xce8 <main+0xf2>
			 
		 } 
		 else if (counter==4)
 d32:	d4 30       	cpi	r29, 0x04	; 4
 d34:	c9 f6       	brne	.-78     	; 0xce8 <main+0xf2>
		 {
			 LCD_CLEAR_Screen();
 d36:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_CLEAR_Screen>
			 if (password==firstpassword)
 d3a:	0e 15       	cp	r16, r14
 d3c:	1f 05       	cpc	r17, r15
 d3e:	c9 f4       	brne	.+50     	; 0xd72 <main+0x17c>
			 {
				 LCD_send_string("Opened");
 d40:	c3 01       	movw	r24, r6
 d42:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCD_send_string>
				 LED_ON('a',0);
 d46:	81 e6       	ldi	r24, 0x61	; 97
 d48:	60 e0       	ldi	r22, 0x00	; 0
 d4a:	0e 94 ed 05 	call	0xbda	; 0xbda <LED_ON>
				 LED_OFF('a',1);
 d4e:	81 e6       	ldi	r24, 0x61	; 97
 d50:	61 e0       	ldi	r22, 0x01	; 1
 d52:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LED_OFF>
 d56:	8f ef       	ldi	r24, 0xFF	; 255
 d58:	91 e1       	ldi	r25, 0x11	; 17
 d5a:	aa e7       	ldi	r26, 0x7A	; 122
 d5c:	81 50       	subi	r24, 0x01	; 1
 d5e:	90 40       	sbci	r25, 0x00	; 0
 d60:	a0 40       	sbci	r26, 0x00	; 0
 d62:	e1 f7       	brne	.-8      	; 0xd5c <main+0x166>
 d64:	00 c0       	rjmp	.+0      	; 0xd66 <main+0x170>
 d66:	00 00       	nop
				 _delay_ms(5000);
				 LED_OFF('a',0);
 d68:	81 e6       	ldi	r24, 0x61	; 97
 d6a:	60 e0       	ldi	r22, 0x00	; 0
 d6c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <LED_OFF>
 d70:	37 c0       	rjmp	.+110    	; 0xde0 <main+0x1ea>
			 } 
			 else
			 {
				 LCD_send_string("Wrong Password");
 d72:	c4 01       	movw	r24, r8
 d74:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCD_send_string>
				 LED_TOGGLE('a',1);
 d78:	81 e6       	ldi	r24, 0x61	; 97
 d7a:	61 e0       	ldi	r22, 0x01	; 1
 d7c:	0e 94 f5 05 	call	0xbea	; 0xbea <LED_TOGGLE>
 d80:	8f ef       	ldi	r24, 0xFF	; 255
 d82:	94 e3       	ldi	r25, 0x34	; 52
 d84:	ac e0       	ldi	r26, 0x0C	; 12
 d86:	81 50       	subi	r24, 0x01	; 1
 d88:	90 40       	sbci	r25, 0x00	; 0
 d8a:	a0 40       	sbci	r26, 0x00	; 0
 d8c:	e1 f7       	brne	.-8      	; 0xd86 <main+0x190>
 d8e:	00 c0       	rjmp	.+0      	; 0xd90 <main+0x19a>
 d90:	00 00       	nop
				 _delay_ms(500);
				 LED_TOGGLE('a',1);
 d92:	81 e6       	ldi	r24, 0x61	; 97
 d94:	61 e0       	ldi	r22, 0x01	; 1
 d96:	0e 94 f5 05 	call	0xbea	; 0xbea <LED_TOGGLE>
 d9a:	8f ef       	ldi	r24, 0xFF	; 255
 d9c:	94 e3       	ldi	r25, 0x34	; 52
 d9e:	ac e0       	ldi	r26, 0x0C	; 12
 da0:	81 50       	subi	r24, 0x01	; 1
 da2:	90 40       	sbci	r25, 0x00	; 0
 da4:	a0 40       	sbci	r26, 0x00	; 0
 da6:	e1 f7       	brne	.-8      	; 0xda0 <main+0x1aa>
 da8:	00 c0       	rjmp	.+0      	; 0xdaa <main+0x1b4>
 daa:	00 00       	nop
				 _delay_ms(500);
				 LED_TOGGLE('a',1);
 dac:	81 e6       	ldi	r24, 0x61	; 97
 dae:	61 e0       	ldi	r22, 0x01	; 1
 db0:	0e 94 f5 05 	call	0xbea	; 0xbea <LED_TOGGLE>
 db4:	8f ef       	ldi	r24, 0xFF	; 255
 db6:	94 e3       	ldi	r25, 0x34	; 52
 db8:	ac e0       	ldi	r26, 0x0C	; 12
 dba:	81 50       	subi	r24, 0x01	; 1
 dbc:	90 40       	sbci	r25, 0x00	; 0
 dbe:	a0 40       	sbci	r26, 0x00	; 0
 dc0:	e1 f7       	brne	.-8      	; 0xdba <main+0x1c4>
 dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <main+0x1ce>
 dc4:	00 00       	nop
				 _delay_ms(500);
				 LED_TOGGLE('a',1);
 dc6:	81 e6       	ldi	r24, 0x61	; 97
 dc8:	61 e0       	ldi	r22, 0x01	; 1
 dca:	0e 94 f5 05 	call	0xbea	; 0xbea <LED_TOGGLE>
 dce:	8f ef       	ldi	r24, 0xFF	; 255
 dd0:	91 e1       	ldi	r25, 0x11	; 17
 dd2:	aa e7       	ldi	r26, 0x7A	; 122
 dd4:	81 50       	subi	r24, 0x01	; 1
 dd6:	90 40       	sbci	r25, 0x00	; 0
 dd8:	a0 40       	sbci	r26, 0x00	; 0
 dda:	e1 f7       	brne	.-8      	; 0xdd4 <main+0x1de>
 ddc:	00 c0       	rjmp	.+0      	; 0xdde <main+0x1e8>
 dde:	00 00       	nop
				 
			 }
			 counter=0;
			 password=0;
			 pressed=NOT_PRESSED;
			 LCD_CLEAR_Screen();
 de0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_CLEAR_Screen>
			 LCD_send_string("Enter pass:");
 de4:	c6 01       	movw	r24, r12
 de6:	0e 94 54 05 	call	0xaa8	; 0xaa8 <LCD_send_string>
				 LED_TOGGLE('a',1);
				 _delay_ms(5000);
				 
			 }
			 counter=0;
			 password=0;
 dea:	85 01       	movw	r16, r10
				 _delay_ms(500);
				 LED_TOGGLE('a',1);
				 _delay_ms(5000);
				 
			 }
			 counter=0;
 dec:	d0 e0       	ldi	r29, 0x00	; 0
 dee:	7c cf       	rjmp	.-264    	; 0xce8 <main+0xf2>

00000df0 <__divmodhi4>:
 df0:	97 fb       	bst	r25, 7
 df2:	09 2e       	mov	r0, r25
 df4:	07 26       	eor	r0, r23
 df6:	0a d0       	rcall	.+20     	; 0xe0c <__divmodhi4_neg1>
 df8:	77 fd       	sbrc	r23, 7
 dfa:	04 d0       	rcall	.+8      	; 0xe04 <__divmodhi4_neg2>
 dfc:	0c d0       	rcall	.+24     	; 0xe16 <__udivmodhi4>
 dfe:	06 d0       	rcall	.+12     	; 0xe0c <__divmodhi4_neg1>
 e00:	00 20       	and	r0, r0
 e02:	1a f4       	brpl	.+6      	; 0xe0a <__divmodhi4_exit>

00000e04 <__divmodhi4_neg2>:
 e04:	70 95       	com	r23
 e06:	61 95       	neg	r22
 e08:	7f 4f       	sbci	r23, 0xFF	; 255

00000e0a <__divmodhi4_exit>:
 e0a:	08 95       	ret

00000e0c <__divmodhi4_neg1>:
 e0c:	f6 f7       	brtc	.-4      	; 0xe0a <__divmodhi4_exit>
 e0e:	90 95       	com	r25
 e10:	81 95       	neg	r24
 e12:	9f 4f       	sbci	r25, 0xFF	; 255
 e14:	08 95       	ret

00000e16 <__udivmodhi4>:
 e16:	aa 1b       	sub	r26, r26
 e18:	bb 1b       	sub	r27, r27
 e1a:	51 e1       	ldi	r21, 0x11	; 17
 e1c:	07 c0       	rjmp	.+14     	; 0xe2c <__udivmodhi4_ep>

00000e1e <__udivmodhi4_loop>:
 e1e:	aa 1f       	adc	r26, r26
 e20:	bb 1f       	adc	r27, r27
 e22:	a6 17       	cp	r26, r22
 e24:	b7 07       	cpc	r27, r23
 e26:	10 f0       	brcs	.+4      	; 0xe2c <__udivmodhi4_ep>
 e28:	a6 1b       	sub	r26, r22
 e2a:	b7 0b       	sbc	r27, r23

00000e2c <__udivmodhi4_ep>:
 e2c:	88 1f       	adc	r24, r24
 e2e:	99 1f       	adc	r25, r25
 e30:	5a 95       	dec	r21
 e32:	a9 f7       	brne	.-22     	; 0xe1e <__udivmodhi4_loop>
 e34:	80 95       	com	r24
 e36:	90 95       	com	r25
 e38:	bc 01       	movw	r22, r24
 e3a:	cd 01       	movw	r24, r26
 e3c:	08 95       	ret

00000e3e <_exit>:
 e3e:	f8 94       	cli

00000e40 <__stop_program>:
 e40:	ff cf       	rjmp	.-2      	; 0xe40 <__stop_program>
