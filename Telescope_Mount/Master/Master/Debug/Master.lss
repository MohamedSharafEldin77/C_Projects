
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001952  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  00001952  000019c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001890  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000051f  00000000  00000000  000033b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000038d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ce7  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a7  00000000  00000000  0000575f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ef5  00000000  00000000  00005f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000051c  00000000  00000000  00006dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a1  00000000  00000000  00007318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f4a  00000000  00000000  000078b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00009803  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 06 	call	0xd46	; 0xd46 <main>
      8a:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_INIT>:
#include "DIO.h"
//#define 


void UART_INIT (unsigned long baud)
{
      92:	dc 01       	movw	r26, r24
      94:	cb 01       	movw	r24, r22
	unsigned short UBRR;
	UBRR=(F_CPU/(16*baud))-1;
      96:	88 0f       	add	r24, r24
      98:	99 1f       	adc	r25, r25
      9a:	aa 1f       	adc	r26, r26
      9c:	bb 1f       	adc	r27, r27
      9e:	88 0f       	add	r24, r24
      a0:	99 1f       	adc	r25, r25
      a2:	aa 1f       	adc	r26, r26
      a4:	bb 1f       	adc	r27, r27
      a6:	9c 01       	movw	r18, r24
      a8:	ad 01       	movw	r20, r26
      aa:	22 0f       	add	r18, r18
      ac:	33 1f       	adc	r19, r19
      ae:	44 1f       	adc	r20, r20
      b0:	55 1f       	adc	r21, r21
      b2:	22 0f       	add	r18, r18
      b4:	33 1f       	adc	r19, r19
      b6:	44 1f       	adc	r20, r20
      b8:	55 1f       	adc	r21, r21
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	72 e1       	ldi	r23, 0x12	; 18
      be:	8a e7       	ldi	r24, 0x7A	; 122
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__udivmodsi4>
      c6:	21 50       	subi	r18, 0x01	; 1
      c8:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(unsigned char)(UBRR>>8);
      ca:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)(UBRR);//choosing the baud speed from the equation
      cc:	29 b9       	out	0x09, r18	; 9
	
	UCSRB|=(1<<RXEN)|(1<<TXEN);//enable the RX , TX in UCSRB
      ce:	8a b1       	in	r24, 0x0a	; 10
      d0:	88 61       	ori	r24, 0x18	; 24
      d2:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//setting the 8-bit character size with URSEL to choose UCSRC
      d4:	80 b5       	in	r24, 0x20	; 32
      d6:	86 68       	ori	r24, 0x86	; 134
      d8:	80 bd       	out	0x20, r24	; 32
}
      da:	08 95       	ret

000000dc <UART_send_data>:
void UART_send_data (char data)
{
	while (READ_BIT(UCSRA,UDRE)==0);//waiting data register empty bit to be 1 so it is clear to write
      dc:	5d 9b       	sbis	0x0b, 5	; 11
      de:	fe cf       	rjmp	.-4      	; 0xdc <UART_send_data>
	UDR=data;//writing
      e0:	8c b9       	out	0x0c, r24	; 12
}
      e2:	08 95       	ret

000000e4 <UART_receive_data>:
char UART_receive_data (void)
{
	while (READ_BIT(UCSRA,RXC)==0);
      e4:	5f 9b       	sbis	0x0b, 7	; 11
      e6:	fe cf       	rjmp	.-4      	; 0xe4 <UART_receive_data>
	return UDR;
      e8:	8c b1       	in	r24, 0x0c	; 12
}
      ea:	08 95       	ret

000000ec <UART_send_string>:
void UART_send_string (char *ptr)
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	ec 01       	movw	r28, r24
	while (*ptr!=0)
      f2:	88 81       	ld	r24, Y
      f4:	88 23       	and	r24, r24
      f6:	79 f0       	breq	.+30     	; 0x116 <UART_send_string+0x2a>
char UART_receive_data (void)
{
	while (READ_BIT(UCSRA,RXC)==0);
	return UDR;
}
void UART_send_string (char *ptr)
      f8:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		UART_send_data(*ptr);
      fa:	0e 94 6e 00 	call	0xdc	; 0xdc <UART_send_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fe:	8f e7       	ldi	r24, 0x7F	; 127
     100:	98 e3       	ldi	r25, 0x38	; 56
     102:	a1 e0       	ldi	r26, 0x01	; 1
     104:	81 50       	subi	r24, 0x01	; 1
     106:	90 40       	sbci	r25, 0x00	; 0
     108:	a0 40       	sbci	r26, 0x00	; 0
     10a:	e1 f7       	brne	.-8      	; 0x104 <UART_send_string+0x18>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <UART_send_string+0x22>
     10e:	00 00       	nop
	while (READ_BIT(UCSRA,RXC)==0);
	return UDR;
}
void UART_send_string (char *ptr)
{
	while (*ptr!=0)
     110:	89 91       	ld	r24, Y+
     112:	88 23       	and	r24, r24
     114:	91 f7       	brne	.-28     	; 0xfa <UART_send_string+0xe>
	{
		UART_send_data(*ptr);
		ptr++;
		_delay_ms(50);
	}
}
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <SPI_MASTER_INIT>:
void SPI_MASTER_INIT (void)
{
	DIO_set_PIN_dir('b',3,1);
     11c:	82 e6       	ldi	r24, 0x62	; 98
     11e:	63 e0       	ldi	r22, 0x03	; 3
     120:	41 e0       	ldi	r20, 0x01	; 1
     122:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',4,1);//SS
     126:	82 e6       	ldi	r24, 0x62	; 98
     128:	64 e0       	ldi	r22, 0x04	; 4
     12a:	41 e0       	ldi	r20, 0x01	; 1
     12c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',5,1);//MOSI
     130:	82 e6       	ldi	r24, 0x62	; 98
     132:	65 e0       	ldi	r22, 0x05	; 5
     134:	41 e0       	ldi	r20, 0x01	; 1
     136:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',6,0);//MISO
     13a:	82 e6       	ldi	r24, 0x62	; 98
     13c:	66 e0       	ldi	r22, 0x06	; 6
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',7,1);//SCK
     144:	82 e6       	ldi	r24, 0x62	; 98
     146:	67 e0       	ldi	r22, 0x07	; 7
     148:	41 e0       	ldi	r20, 0x01	; 1
     14a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	SET_BIT(SPCR,MSTR);//enable Master
     14e:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPE);//set SPE to enable the SPI
     150:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_output_PIN_on_port('b',4,1);//SS to logic high (idle)
     152:	82 e6       	ldi	r24, 0x62	; 98
     154:	64 e0       	ldi	r22, 0x04	; 4
     156:	41 e0       	ldi	r20, 0x01	; 1
     158:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
	DIO_output_PIN_on_port('b',3,1);
     15c:	82 e6       	ldi	r24, 0x62	; 98
     15e:	63 e0       	ldi	r22, 0x03	; 3
     160:	41 e0       	ldi	r20, 0x01	; 1
     162:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
}
     166:	08 95       	ret

00000168 <SPI_SLAVE_INIT>:
void SPI_SLAVE_INIT (void)
{
	SET_BIT(SPCR,SPE);//set SPE to enable the SPI
     168:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_set_PIN_dir('b',6,1);//Set MISO output
     16a:	82 e6       	ldi	r24, 0x62	; 98
     16c:	66 e0       	ldi	r22, 0x06	; 6
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
}
     174:	08 95       	ret

00000176 <SPI_MASTER_Transmit_char>:
unsigned char SPI_MASTER_Transmit_char (unsigned char data,unsigned char slave_SS)
{
     176:	cf 93       	push	r28
     178:	c8 2f       	mov	r28, r24
	DIO_output_PIN_on_port('b',slave_SS,0);
     17a:	82 e6       	ldi	r24, 0x62	; 98
     17c:	40 e0       	ldi	r20, 0x00	; 0
     17e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
	SPDR=data;//put the data into SPDR to be transmitted
     182:	cf b9       	out	0x0f, r28	; 15
	while (READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
     184:	77 9b       	sbis	0x0e, 7	; 14
     186:	fe cf       	rjmp	.-4      	; 0x184 <SPI_MASTER_Transmit_char+0xe>
	return SPDR;
     188:	8f b1       	in	r24, 0x0f	; 15
}
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <SPI_SLAVE_recieve_char>:
unsigned char SPI_SLAVE_recieve_char (unsigned char data)
{
	SPDR=data;
     18e:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
     190:	77 9b       	sbis	0x0e, 7	; 14
     192:	fe cf       	rjmp	.-4      	; 0x190 <SPI_SLAVE_recieve_char+0x2>
	return SPDR;
     194:	8f b1       	in	r24, 0x0f	; 15
}
     196:	08 95       	ret

00000198 <SPI_MASTER_Transmit_string>:
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
{
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	ec 01       	movw	r28, r24
     1a0:	16 2f       	mov	r17, r22
	while ((*ptr)!=0)
     1a2:	88 81       	ld	r24, Y
     1a4:	88 23       	and	r24, r24
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <SPI_MASTER_Transmit_string+0x30>
{
	SPDR=data;
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
	return SPDR;
}
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
     1a8:	21 96       	adiw	r28, 0x01	; 1
{
	while ((*ptr)!=0)
	{
		SPI_MASTER_Transmit_char(*ptr,slave_SS);
     1aa:	61 2f       	mov	r22, r17
     1ac:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_MASTER_Transmit_char>
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	92 e5       	ldi	r25, 0x52	; 82
     1b4:	a7 e0       	ldi	r26, 0x07	; 7
     1b6:	81 50       	subi	r24, 0x01	; 1
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	a0 40       	sbci	r26, 0x00	; 0
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <SPI_MASTER_Transmit_string+0x1e>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <SPI_MASTER_Transmit_string+0x28>
     1c0:	00 00       	nop
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
	return SPDR;
}
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
{
	while ((*ptr)!=0)
     1c2:	89 91       	ld	r24, Y+
     1c4:	88 23       	and	r24, r24
     1c6:	89 f7       	brne	.-30     	; 0x1aa <SPI_MASTER_Transmit_string+0x12>
	{
		SPI_MASTER_Transmit_char(*ptr,slave_SS);
		_delay_ms(300);
		ptr++;
	}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	08 95       	ret

000001d0 <DIO_set_PIN_dir>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void DIO_set_PIN_dir (unsigned char portname,unsigned char pin_number_0_7,unsigned char direction)
{
	switch (portname)
     1d0:	84 34       	cpi	r24, 0x44	; 68
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <DIO_set_PIN_dir+0x6>
     1d4:	71 c0       	rjmp	.+226    	; 0x2b8 <DIO_set_PIN_dir+0xe8>
     1d6:	85 34       	cpi	r24, 0x45	; 69
     1d8:	48 f4       	brcc	.+18     	; 0x1ec <DIO_set_PIN_dir+0x1c>
     1da:	82 34       	cpi	r24, 0x42	; 66
     1dc:	99 f1       	breq	.+102    	; 0x244 <DIO_set_PIN_dir+0x74>
     1de:	83 34       	cpi	r24, 0x43	; 67
     1e0:	08 f0       	brcs	.+2      	; 0x1e4 <DIO_set_PIN_dir+0x14>
     1e2:	4d c0       	rjmp	.+154    	; 0x27e <DIO_set_PIN_dir+0xae>
     1e4:	81 34       	cpi	r24, 0x41	; 65
     1e6:	09 f0       	breq	.+2      	; 0x1ea <DIO_set_PIN_dir+0x1a>
     1e8:	83 c0       	rjmp	.+262    	; 0x2f0 <DIO_set_PIN_dir+0x120>
     1ea:	0f c0       	rjmp	.+30     	; 0x20a <DIO_set_PIN_dir+0x3a>
     1ec:	82 36       	cpi	r24, 0x62	; 98
     1ee:	51 f1       	breq	.+84     	; 0x244 <DIO_set_PIN_dir+0x74>
     1f0:	83 36       	cpi	r24, 0x63	; 99
     1f2:	20 f4       	brcc	.+8      	; 0x1fc <DIO_set_PIN_dir+0x2c>
     1f4:	81 36       	cpi	r24, 0x61	; 97
     1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_set_PIN_dir+0x2a>
     1f8:	7b c0       	rjmp	.+246    	; 0x2f0 <DIO_set_PIN_dir+0x120>
     1fa:	07 c0       	rjmp	.+14     	; 0x20a <DIO_set_PIN_dir+0x3a>
     1fc:	83 36       	cpi	r24, 0x63	; 99
     1fe:	09 f4       	brne	.+2      	; 0x202 <DIO_set_PIN_dir+0x32>
     200:	3e c0       	rjmp	.+124    	; 0x27e <DIO_set_PIN_dir+0xae>
     202:	84 36       	cpi	r24, 0x64	; 100
     204:	09 f0       	breq	.+2      	; 0x208 <DIO_set_PIN_dir+0x38>
     206:	74 c0       	rjmp	.+232    	; 0x2f0 <DIO_set_PIN_dir+0x120>
     208:	57 c0       	rjmp	.+174    	; 0x2b8 <DIO_set_PIN_dir+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
     20a:	41 30       	cpi	r20, 0x01	; 1
     20c:	69 f4       	brne	.+26     	; 0x228 <DIO_set_PIN_dir+0x58>
		{
			SET_BIT(DDRA,pin_number_0_7);
     20e:	2a b3       	in	r18, 0x1a	; 26
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ac 01       	movw	r20, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_set_PIN_dir+0x4c>
     218:	44 0f       	add	r20, r20
     21a:	55 1f       	adc	r21, r21
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_set_PIN_dir+0x48>
     220:	ba 01       	movw	r22, r20
     222:	62 2b       	or	r22, r18
     224:	6a bb       	out	0x1a, r22	; 26
     226:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin_number_0_7);
     228:	2a b3       	in	r18, 0x1a	; 26
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	ac 01       	movw	r20, r24
     230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_set_PIN_dir+0x66>
     232:	44 0f       	add	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_set_PIN_dir+0x62>
     23a:	ba 01       	movw	r22, r20
     23c:	60 95       	com	r22
     23e:	62 23       	and	r22, r18
     240:	6a bb       	out	0x1a, r22	; 26
     242:	08 95       	ret
		}
		break;
		//DDRA=dir==1?DDRA|(1<<pin):DDRA&~(1<<pin);
		case 'B':
		case 'b':
		if (direction==1)
     244:	41 30       	cpi	r20, 0x01	; 1
     246:	69 f4       	brne	.+26     	; 0x262 <DIO_set_PIN_dir+0x92>
		{
			SET_BIT(DDRB,pin_number_0_7);
     248:	27 b3       	in	r18, 0x17	; 23
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ac 01       	movw	r20, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_set_PIN_dir+0x86>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_set_PIN_dir+0x82>
     25a:	ba 01       	movw	r22, r20
     25c:	62 2b       	or	r22, r18
     25e:	67 bb       	out	0x17, r22	; 23
     260:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin_number_0_7);
     262:	27 b3       	in	r18, 0x17	; 23
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	ac 01       	movw	r20, r24
     26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_set_PIN_dir+0xa0>
     26c:	44 0f       	add	r20, r20
     26e:	55 1f       	adc	r21, r21
     270:	6a 95       	dec	r22
     272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_set_PIN_dir+0x9c>
     274:	ba 01       	movw	r22, r20
     276:	60 95       	com	r22
     278:	62 23       	and	r22, r18
     27a:	67 bb       	out	0x17, r22	; 23
     27c:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
     27e:	41 30       	cpi	r20, 0x01	; 1
     280:	69 f4       	brne	.+26     	; 0x29c <DIO_set_PIN_dir+0xcc>
		{
			SET_BIT(DDRC,pin_number_0_7);
     282:	24 b3       	in	r18, 0x14	; 20
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ac 01       	movw	r20, r24
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_set_PIN_dir+0xc0>
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_set_PIN_dir+0xbc>
     294:	ba 01       	movw	r22, r20
     296:	62 2b       	or	r22, r18
     298:	64 bb       	out	0x14, r22	; 20
     29a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin_number_0_7);
     29c:	24 b3       	in	r18, 0x14	; 20
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	ac 01       	movw	r20, r24
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_set_PIN_dir+0xda>
     2a6:	44 0f       	add	r20, r20
     2a8:	55 1f       	adc	r21, r21
     2aa:	6a 95       	dec	r22
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_set_PIN_dir+0xd6>
     2ae:	ba 01       	movw	r22, r20
     2b0:	60 95       	com	r22
     2b2:	62 23       	and	r22, r18
     2b4:	64 bb       	out	0x14, r22	; 20
     2b6:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (direction==1)
     2b8:	41 30       	cpi	r20, 0x01	; 1
     2ba:	69 f4       	brne	.+26     	; 0x2d6 <DIO_set_PIN_dir+0x106>
		{
			SET_BIT(DDRD,pin_number_0_7);
     2bc:	21 b3       	in	r18, 0x11	; 17
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	ac 01       	movw	r20, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_set_PIN_dir+0xfa>
     2c6:	44 0f       	add	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_set_PIN_dir+0xf6>
     2ce:	ba 01       	movw	r22, r20
     2d0:	62 2b       	or	r22, r18
     2d2:	61 bb       	out	0x11, r22	; 17
     2d4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin_number_0_7);
     2d6:	21 b3       	in	r18, 0x11	; 17
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	ac 01       	movw	r20, r24
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_set_PIN_dir+0x114>
     2e0:	44 0f       	add	r20, r20
     2e2:	55 1f       	adc	r21, r21
     2e4:	6a 95       	dec	r22
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_set_PIN_dir+0x110>
     2e8:	ba 01       	movw	r22, r20
     2ea:	60 95       	com	r22
     2ec:	62 23       	and	r22, r18
     2ee:	61 bb       	out	0x11, r22	; 17
     2f0:	08 95       	ret

000002f2 <DIO_output_PIN_on_port>:
		break;
	}
}
void DIO_output_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7,unsigned char output)
{
	switch (portname)
     2f2:	84 34       	cpi	r24, 0x44	; 68
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <DIO_output_PIN_on_port+0x6>
     2f6:	71 c0       	rjmp	.+226    	; 0x3da <DIO_output_PIN_on_port+0xe8>
     2f8:	85 34       	cpi	r24, 0x45	; 69
     2fa:	48 f4       	brcc	.+18     	; 0x30e <DIO_output_PIN_on_port+0x1c>
     2fc:	82 34       	cpi	r24, 0x42	; 66
     2fe:	99 f1       	breq	.+102    	; 0x366 <DIO_output_PIN_on_port+0x74>
     300:	83 34       	cpi	r24, 0x43	; 67
     302:	08 f0       	brcs	.+2      	; 0x306 <DIO_output_PIN_on_port+0x14>
     304:	4d c0       	rjmp	.+154    	; 0x3a0 <DIO_output_PIN_on_port+0xae>
     306:	81 34       	cpi	r24, 0x41	; 65
     308:	09 f0       	breq	.+2      	; 0x30c <DIO_output_PIN_on_port+0x1a>
     30a:	83 c0       	rjmp	.+262    	; 0x412 <DIO_output_PIN_on_port+0x120>
     30c:	0f c0       	rjmp	.+30     	; 0x32c <DIO_output_PIN_on_port+0x3a>
     30e:	82 36       	cpi	r24, 0x62	; 98
     310:	51 f1       	breq	.+84     	; 0x366 <DIO_output_PIN_on_port+0x74>
     312:	83 36       	cpi	r24, 0x63	; 99
     314:	20 f4       	brcc	.+8      	; 0x31e <DIO_output_PIN_on_port+0x2c>
     316:	81 36       	cpi	r24, 0x61	; 97
     318:	09 f0       	breq	.+2      	; 0x31c <DIO_output_PIN_on_port+0x2a>
     31a:	7b c0       	rjmp	.+246    	; 0x412 <DIO_output_PIN_on_port+0x120>
     31c:	07 c0       	rjmp	.+14     	; 0x32c <DIO_output_PIN_on_port+0x3a>
     31e:	83 36       	cpi	r24, 0x63	; 99
     320:	09 f4       	brne	.+2      	; 0x324 <DIO_output_PIN_on_port+0x32>
     322:	3e c0       	rjmp	.+124    	; 0x3a0 <DIO_output_PIN_on_port+0xae>
     324:	84 36       	cpi	r24, 0x64	; 100
     326:	09 f0       	breq	.+2      	; 0x32a <DIO_output_PIN_on_port+0x38>
     328:	74 c0       	rjmp	.+232    	; 0x412 <DIO_output_PIN_on_port+0x120>
     32a:	57 c0       	rjmp	.+174    	; 0x3da <DIO_output_PIN_on_port+0xe8>
	{
		case 'A':
		case 'a':
		if (output==1)
     32c:	41 30       	cpi	r20, 0x01	; 1
     32e:	69 f4       	brne	.+26     	; 0x34a <DIO_output_PIN_on_port+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
     330:	2b b3       	in	r18, 0x1b	; 27
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	ac 01       	movw	r20, r24
     338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_output_PIN_on_port+0x4c>
     33a:	44 0f       	add	r20, r20
     33c:	55 1f       	adc	r21, r21
     33e:	6a 95       	dec	r22
     340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_output_PIN_on_port+0x48>
     342:	ba 01       	movw	r22, r20
     344:	62 2b       	or	r22, r18
     346:	6b bb       	out	0x1b, r22	; 27
     348:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
     34a:	2b b3       	in	r18, 0x1b	; 27
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	ac 01       	movw	r20, r24
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_output_PIN_on_port+0x66>
     354:	44 0f       	add	r20, r20
     356:	55 1f       	adc	r21, r21
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_output_PIN_on_port+0x62>
     35c:	ba 01       	movw	r22, r20
     35e:	60 95       	com	r22
     360:	62 23       	and	r22, r18
     362:	6b bb       	out	0x1b, r22	; 27
     364:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (output==1)
     366:	41 30       	cpi	r20, 0x01	; 1
     368:	69 f4       	brne	.+26     	; 0x384 <DIO_output_PIN_on_port+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
     36a:	28 b3       	in	r18, 0x18	; 24
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	ac 01       	movw	r20, r24
     372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_output_PIN_on_port+0x86>
     374:	44 0f       	add	r20, r20
     376:	55 1f       	adc	r21, r21
     378:	6a 95       	dec	r22
     37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_output_PIN_on_port+0x82>
     37c:	ba 01       	movw	r22, r20
     37e:	62 2b       	or	r22, r18
     380:	68 bb       	out	0x18, r22	; 24
     382:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
     384:	28 b3       	in	r18, 0x18	; 24
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	ac 01       	movw	r20, r24
     38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_output_PIN_on_port+0xa0>
     38e:	44 0f       	add	r20, r20
     390:	55 1f       	adc	r21, r21
     392:	6a 95       	dec	r22
     394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_output_PIN_on_port+0x9c>
     396:	ba 01       	movw	r22, r20
     398:	60 95       	com	r22
     39a:	62 23       	and	r22, r18
     39c:	68 bb       	out	0x18, r22	; 24
     39e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (output==1)
     3a0:	41 30       	cpi	r20, 0x01	; 1
     3a2:	69 f4       	brne	.+26     	; 0x3be <DIO_output_PIN_on_port+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
     3a4:	25 b3       	in	r18, 0x15	; 21
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	ac 01       	movw	r20, r24
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_output_PIN_on_port+0xc0>
     3ae:	44 0f       	add	r20, r20
     3b0:	55 1f       	adc	r21, r21
     3b2:	6a 95       	dec	r22
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_output_PIN_on_port+0xbc>
     3b6:	ba 01       	movw	r22, r20
     3b8:	62 2b       	or	r22, r18
     3ba:	65 bb       	out	0x15, r22	; 21
     3bc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
     3be:	25 b3       	in	r18, 0x15	; 21
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	ac 01       	movw	r20, r24
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_output_PIN_on_port+0xda>
     3c8:	44 0f       	add	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_output_PIN_on_port+0xd6>
     3d0:	ba 01       	movw	r22, r20
     3d2:	60 95       	com	r22
     3d4:	62 23       	and	r22, r18
     3d6:	65 bb       	out	0x15, r22	; 21
     3d8:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (output==1)
     3da:	41 30       	cpi	r20, 0x01	; 1
     3dc:	69 f4       	brne	.+26     	; 0x3f8 <DIO_output_PIN_on_port+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
     3de:	22 b3       	in	r18, 0x12	; 18
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	ac 01       	movw	r20, r24
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_output_PIN_on_port+0xfa>
     3e8:	44 0f       	add	r20, r20
     3ea:	55 1f       	adc	r21, r21
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_output_PIN_on_port+0xf6>
     3f0:	ba 01       	movw	r22, r20
     3f2:	62 2b       	or	r22, r18
     3f4:	62 bb       	out	0x12, r22	; 18
     3f6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
     3f8:	22 b3       	in	r18, 0x12	; 18
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	ac 01       	movw	r20, r24
     400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_output_PIN_on_port+0x114>
     402:	44 0f       	add	r20, r20
     404:	55 1f       	adc	r21, r21
     406:	6a 95       	dec	r22
     408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_output_PIN_on_port+0x110>
     40a:	ba 01       	movw	r22, r20
     40c:	60 95       	com	r22
     40e:	62 23       	and	r22, r18
     410:	62 bb       	out	0x12, r22	; 18
     412:	08 95       	ret

00000414 <DIO_Toggle_PIN_on_port>:
		break;
	}
}
void DIO_Toggle_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7)
{
	switch (portname)
     414:	84 34       	cpi	r24, 0x44	; 68
     416:	09 f4       	brne	.+2      	; 0x41a <DIO_Toggle_PIN_on_port+0x6>
     418:	3d c0       	rjmp	.+122    	; 0x494 <DIO_Toggle_PIN_on_port+0x80>
     41a:	85 34       	cpi	r24, 0x45	; 69
     41c:	40 f4       	brcc	.+16     	; 0x42e <DIO_Toggle_PIN_on_port+0x1a>
     41e:	82 34       	cpi	r24, 0x42	; 66
     420:	f9 f0       	breq	.+62     	; 0x460 <DIO_Toggle_PIN_on_port+0x4c>
     422:	83 34       	cpi	r24, 0x43	; 67
     424:	50 f5       	brcc	.+84     	; 0x47a <DIO_Toggle_PIN_on_port+0x66>
     426:	81 34       	cpi	r24, 0x41	; 65
     428:	09 f0       	breq	.+2      	; 0x42c <DIO_Toggle_PIN_on_port+0x18>
     42a:	40 c0       	rjmp	.+128    	; 0x4ac <DIO_Toggle_PIN_on_port+0x98>
     42c:	0c c0       	rjmp	.+24     	; 0x446 <DIO_Toggle_PIN_on_port+0x32>
     42e:	82 36       	cpi	r24, 0x62	; 98
     430:	b9 f0       	breq	.+46     	; 0x460 <DIO_Toggle_PIN_on_port+0x4c>
     432:	83 36       	cpi	r24, 0x63	; 99
     434:	18 f4       	brcc	.+6      	; 0x43c <DIO_Toggle_PIN_on_port+0x28>
     436:	81 36       	cpi	r24, 0x61	; 97
     438:	c9 f5       	brne	.+114    	; 0x4ac <DIO_Toggle_PIN_on_port+0x98>
     43a:	05 c0       	rjmp	.+10     	; 0x446 <DIO_Toggle_PIN_on_port+0x32>
     43c:	83 36       	cpi	r24, 0x63	; 99
     43e:	e9 f0       	breq	.+58     	; 0x47a <DIO_Toggle_PIN_on_port+0x66>
     440:	84 36       	cpi	r24, 0x64	; 100
     442:	a1 f5       	brne	.+104    	; 0x4ac <DIO_Toggle_PIN_on_port+0x98>
     444:	27 c0       	rjmp	.+78     	; 0x494 <DIO_Toggle_PIN_on_port+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,pin_number_0_7);
     446:	2b b3       	in	r18, 0x1b	; 27
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	ac 01       	movw	r20, r24
     44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_Toggle_PIN_on_port+0x40>
     450:	44 0f       	add	r20, r20
     452:	55 1f       	adc	r21, r21
     454:	6a 95       	dec	r22
     456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_Toggle_PIN_on_port+0x3c>
     458:	ba 01       	movw	r22, r20
     45a:	62 27       	eor	r22, r18
     45c:	6b bb       	out	0x1b, r22	; 27
		break;
     45e:	08 95       	ret
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,pin_number_0_7);
     460:	28 b3       	in	r18, 0x18	; 24
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	ac 01       	movw	r20, r24
     468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_Toggle_PIN_on_port+0x5a>
     46a:	44 0f       	add	r20, r20
     46c:	55 1f       	adc	r21, r21
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_Toggle_PIN_on_port+0x56>
     472:	ba 01       	movw	r22, r20
     474:	62 27       	eor	r22, r18
     476:	68 bb       	out	0x18, r22	; 24
		break;
     478:	08 95       	ret
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,pin_number_0_7);
     47a:	25 b3       	in	r18, 0x15	; 21
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	ac 01       	movw	r20, r24
     482:	02 c0       	rjmp	.+4      	; 0x488 <DIO_Toggle_PIN_on_port+0x74>
     484:	44 0f       	add	r20, r20
     486:	55 1f       	adc	r21, r21
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <DIO_Toggle_PIN_on_port+0x70>
     48c:	ba 01       	movw	r22, r20
     48e:	62 27       	eor	r22, r18
     490:	65 bb       	out	0x15, r22	; 21
		break;
     492:	08 95       	ret
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,pin_number_0_7);
     494:	22 b3       	in	r18, 0x12	; 18
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	ac 01       	movw	r20, r24
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_Toggle_PIN_on_port+0x8e>
     49e:	44 0f       	add	r20, r20
     4a0:	55 1f       	adc	r21, r21
     4a2:	6a 95       	dec	r22
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_Toggle_PIN_on_port+0x8a>
     4a6:	ba 01       	movw	r22, r20
     4a8:	62 27       	eor	r22, r18
     4aa:	62 bb       	out	0x12, r22	; 18
     4ac:	08 95       	ret

000004ae <DIO_READ_PIN>:
	}
}
unsigned char DIO_READ_PIN (unsigned char portname,unsigned char pin_number_0_7)
{
	unsigned char val;
	switch (portname)
     4ae:	84 34       	cpi	r24, 0x44	; 68
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <DIO_READ_PIN+0x6>
     4b2:	51 c0       	rjmp	.+162    	; 0x556 <DIO_READ_PIN+0xa8>
     4b4:	85 34       	cpi	r24, 0x45	; 69
     4b6:	40 f4       	brcc	.+16     	; 0x4c8 <DIO_READ_PIN+0x1a>
     4b8:	82 34       	cpi	r24, 0x42	; 66
     4ba:	39 f1       	breq	.+78     	; 0x50a <DIO_READ_PIN+0x5c>
     4bc:	83 34       	cpi	r24, 0x43	; 67
     4be:	c0 f5       	brcc	.+112    	; 0x530 <DIO_READ_PIN+0x82>
     4c0:	81 34       	cpi	r24, 0x41	; 65
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <DIO_READ_PIN+0x18>
     4c4:	5a c0       	rjmp	.+180    	; 0x57a <DIO_READ_PIN+0xcc>
     4c6:	0e c0       	rjmp	.+28     	; 0x4e4 <DIO_READ_PIN+0x36>
     4c8:	82 36       	cpi	r24, 0x62	; 98
     4ca:	f9 f0       	breq	.+62     	; 0x50a <DIO_READ_PIN+0x5c>
     4cc:	83 36       	cpi	r24, 0x63	; 99
     4ce:	20 f4       	brcc	.+8      	; 0x4d8 <DIO_READ_PIN+0x2a>
     4d0:	81 36       	cpi	r24, 0x61	; 97
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <DIO_READ_PIN+0x28>
     4d4:	52 c0       	rjmp	.+164    	; 0x57a <DIO_READ_PIN+0xcc>
     4d6:	06 c0       	rjmp	.+12     	; 0x4e4 <DIO_READ_PIN+0x36>
     4d8:	83 36       	cpi	r24, 0x63	; 99
     4da:	51 f1       	breq	.+84     	; 0x530 <DIO_READ_PIN+0x82>
     4dc:	84 36       	cpi	r24, 0x64	; 100
     4de:	09 f0       	breq	.+2      	; 0x4e2 <DIO_READ_PIN+0x34>
     4e0:	4c c0       	rjmp	.+152    	; 0x57a <DIO_READ_PIN+0xcc>
     4e2:	39 c0       	rjmp	.+114    	; 0x556 <DIO_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pin_number_0_7);
     4e4:	29 b3       	in	r18, 0x19	; 25
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	06 2e       	mov	r0, r22
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_READ_PIN+0x44>
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	0a 94       	dec	r0
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_READ_PIN+0x40>
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	82 23       	and	r24, r18
     4fa:	93 23       	and	r25, r19
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_READ_PIN+0x54>
     4fe:	96 95       	lsr	r25
     500:	87 95       	ror	r24
     502:	6a 95       	dec	r22
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_READ_PIN+0x50>
     506:	98 2f       	mov	r25, r24
		break;
     508:	38 c0       	rjmp	.+112    	; 0x57a <DIO_READ_PIN+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin_number_0_7);
     50a:	26 b3       	in	r18, 0x16	; 22
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	06 2e       	mov	r0, r22
     512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_READ_PIN+0x6a>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	0a 94       	dec	r0
     51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_READ_PIN+0x66>
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	82 23       	and	r24, r18
     520:	93 23       	and	r25, r19
     522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_READ_PIN+0x7a>
     524:	96 95       	lsr	r25
     526:	87 95       	ror	r24
     528:	6a 95       	dec	r22
     52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_READ_PIN+0x76>
     52c:	98 2f       	mov	r25, r24
		break;
     52e:	25 c0       	rjmp	.+74     	; 0x57a <DIO_READ_PIN+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin_number_0_7);
     530:	23 b3       	in	r18, 0x13	; 19
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	06 2e       	mov	r0, r22
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_READ_PIN+0x90>
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	0a 94       	dec	r0
     540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_READ_PIN+0x8c>
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	82 23       	and	r24, r18
     546:	93 23       	and	r25, r19
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_READ_PIN+0xa0>
     54a:	96 95       	lsr	r25
     54c:	87 95       	ror	r24
     54e:	6a 95       	dec	r22
     550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_READ_PIN+0x9c>
     552:	98 2f       	mov	r25, r24
		break;
     554:	12 c0       	rjmp	.+36     	; 0x57a <DIO_READ_PIN+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin_number_0_7);
     556:	20 b3       	in	r18, 0x10	; 16
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	06 2e       	mov	r0, r22
     55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_READ_PIN+0xb6>
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	0a 94       	dec	r0
     566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_READ_PIN+0xb2>
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	82 23       	and	r24, r18
     56c:	93 23       	and	r25, r19
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_READ_PIN+0xc6>
     570:	96 95       	lsr	r25
     572:	87 95       	ror	r24
     574:	6a 95       	dec	r22
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_READ_PIN+0xc2>
     578:	98 2f       	mov	r25, r24
		break;
		default:
		break;	
	}
	return val;
}
     57a:	89 2f       	mov	r24, r25
     57c:	08 95       	ret

0000057e <DIO_set_PORT_dir>:
void DIO_set_PORT_dir (unsigned char portname,unsigned char portvalue)
{
	switch (portname)
     57e:	84 34       	cpi	r24, 0x44	; 68
     580:	d9 f0       	breq	.+54     	; 0x5b8 <DIO_set_PORT_dir+0x3a>
     582:	85 34       	cpi	r24, 0x45	; 69
     584:	38 f4       	brcc	.+14     	; 0x594 <DIO_set_PORT_dir+0x16>
     586:	82 34       	cpi	r24, 0x42	; 66
     588:	99 f0       	breq	.+38     	; 0x5b0 <DIO_set_PORT_dir+0x32>
     58a:	83 34       	cpi	r24, 0x43	; 67
     58c:	98 f4       	brcc	.+38     	; 0x5b4 <DIO_set_PORT_dir+0x36>
     58e:	81 34       	cpi	r24, 0x41	; 65
     590:	a1 f4       	brne	.+40     	; 0x5ba <DIO_set_PORT_dir+0x3c>
     592:	0c c0       	rjmp	.+24     	; 0x5ac <DIO_set_PORT_dir+0x2e>
     594:	82 36       	cpi	r24, 0x62	; 98
     596:	61 f0       	breq	.+24     	; 0x5b0 <DIO_set_PORT_dir+0x32>
     598:	83 36       	cpi	r24, 0x63	; 99
     59a:	18 f4       	brcc	.+6      	; 0x5a2 <DIO_set_PORT_dir+0x24>
     59c:	81 36       	cpi	r24, 0x61	; 97
     59e:	69 f4       	brne	.+26     	; 0x5ba <DIO_set_PORT_dir+0x3c>
     5a0:	05 c0       	rjmp	.+10     	; 0x5ac <DIO_set_PORT_dir+0x2e>
     5a2:	83 36       	cpi	r24, 0x63	; 99
     5a4:	39 f0       	breq	.+14     	; 0x5b4 <DIO_set_PORT_dir+0x36>
     5a6:	84 36       	cpi	r24, 0x64	; 100
     5a8:	41 f4       	brne	.+16     	; 0x5ba <DIO_set_PORT_dir+0x3c>
     5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <DIO_set_PORT_dir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=portvalue;
     5ac:	6a bb       	out	0x1a, r22	; 26
		break;
     5ae:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=portvalue;
     5b0:	67 bb       	out	0x17, r22	; 23
		break;
     5b2:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=portvalue;
     5b4:	64 bb       	out	0x14, r22	; 20
		break;
     5b6:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=portvalue;
     5b8:	61 bb       	out	0x11, r22	; 17
     5ba:	08 95       	ret

000005bc <DIO_output_on_PORT>:
		break;
	}
}
void DIO_output_on_PORT (unsigned char portname,unsigned char output_on_port)
{
	switch (portname)
     5bc:	84 34       	cpi	r24, 0x44	; 68
     5be:	d9 f0       	breq	.+54     	; 0x5f6 <DIO_output_on_PORT+0x3a>
     5c0:	85 34       	cpi	r24, 0x45	; 69
     5c2:	38 f4       	brcc	.+14     	; 0x5d2 <DIO_output_on_PORT+0x16>
     5c4:	82 34       	cpi	r24, 0x42	; 66
     5c6:	99 f0       	breq	.+38     	; 0x5ee <DIO_output_on_PORT+0x32>
     5c8:	83 34       	cpi	r24, 0x43	; 67
     5ca:	98 f4       	brcc	.+38     	; 0x5f2 <DIO_output_on_PORT+0x36>
     5cc:	81 34       	cpi	r24, 0x41	; 65
     5ce:	a1 f4       	brne	.+40     	; 0x5f8 <DIO_output_on_PORT+0x3c>
     5d0:	0c c0       	rjmp	.+24     	; 0x5ea <DIO_output_on_PORT+0x2e>
     5d2:	82 36       	cpi	r24, 0x62	; 98
     5d4:	61 f0       	breq	.+24     	; 0x5ee <DIO_output_on_PORT+0x32>
     5d6:	83 36       	cpi	r24, 0x63	; 99
     5d8:	18 f4       	brcc	.+6      	; 0x5e0 <DIO_output_on_PORT+0x24>
     5da:	81 36       	cpi	r24, 0x61	; 97
     5dc:	69 f4       	brne	.+26     	; 0x5f8 <DIO_output_on_PORT+0x3c>
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <DIO_output_on_PORT+0x2e>
     5e0:	83 36       	cpi	r24, 0x63	; 99
     5e2:	39 f0       	breq	.+14     	; 0x5f2 <DIO_output_on_PORT+0x36>
     5e4:	84 36       	cpi	r24, 0x64	; 100
     5e6:	41 f4       	brne	.+16     	; 0x5f8 <DIO_output_on_PORT+0x3c>
     5e8:	06 c0       	rjmp	.+12     	; 0x5f6 <DIO_output_on_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=output_on_port;
     5ea:	6b bb       	out	0x1b, r22	; 27
		break;
     5ec:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=output_on_port;
     5ee:	68 bb       	out	0x18, r22	; 24
		break;
     5f0:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=output_on_port;
     5f2:	65 bb       	out	0x15, r22	; 21
		break;
     5f4:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=output_on_port;
     5f6:	62 bb       	out	0x12, r22	; 18
     5f8:	08 95       	ret

000005fa <DIO_Toggle_PORT>:
		break;
	}
}
void DIO_Toggle_PORT (unsigned char portname)
{
	switch (portname)
     5fa:	84 34       	cpi	r24, 0x44	; 68
     5fc:	09 f1       	breq	.+66     	; 0x640 <DIO_Toggle_PORT+0x46>
     5fe:	85 34       	cpi	r24, 0x45	; 69
     600:	38 f4       	brcc	.+14     	; 0x610 <DIO_Toggle_PORT+0x16>
     602:	82 34       	cpi	r24, 0x42	; 66
     604:	a9 f0       	breq	.+42     	; 0x630 <DIO_Toggle_PORT+0x36>
     606:	83 34       	cpi	r24, 0x43	; 67
     608:	b8 f4       	brcc	.+46     	; 0x638 <DIO_Toggle_PORT+0x3e>
     60a:	81 34       	cpi	r24, 0x41	; 65
     60c:	e1 f4       	brne	.+56     	; 0x646 <DIO_Toggle_PORT+0x4c>
     60e:	0c c0       	rjmp	.+24     	; 0x628 <DIO_Toggle_PORT+0x2e>
     610:	82 36       	cpi	r24, 0x62	; 98
     612:	71 f0       	breq	.+28     	; 0x630 <DIO_Toggle_PORT+0x36>
     614:	83 36       	cpi	r24, 0x63	; 99
     616:	18 f4       	brcc	.+6      	; 0x61e <DIO_Toggle_PORT+0x24>
     618:	81 36       	cpi	r24, 0x61	; 97
     61a:	a9 f4       	brne	.+42     	; 0x646 <DIO_Toggle_PORT+0x4c>
     61c:	05 c0       	rjmp	.+10     	; 0x628 <DIO_Toggle_PORT+0x2e>
     61e:	83 36       	cpi	r24, 0x63	; 99
     620:	59 f0       	breq	.+22     	; 0x638 <DIO_Toggle_PORT+0x3e>
     622:	84 36       	cpi	r24, 0x64	; 100
     624:	81 f4       	brne	.+32     	; 0x646 <DIO_Toggle_PORT+0x4c>
     626:	0c c0       	rjmp	.+24     	; 0x640 <DIO_Toggle_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     628:	8b b3       	in	r24, 0x1b	; 27
     62a:	80 95       	com	r24
     62c:	8b bb       	out	0x1b, r24	; 27
		break;
     62e:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     630:	88 b3       	in	r24, 0x18	; 24
     632:	80 95       	com	r24
     634:	88 bb       	out	0x18, r24	; 24
		break;
     636:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     638:	85 b3       	in	r24, 0x15	; 21
     63a:	80 95       	com	r24
     63c:	85 bb       	out	0x15, r24	; 21
		break;
     63e:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     640:	82 b3       	in	r24, 0x12	; 18
     642:	80 95       	com	r24
     644:	82 bb       	out	0x12, r24	; 18
     646:	08 95       	ret

00000648 <DIO_READ_PORT>:
	}
}
unsigned char DIO_READ_PORT (unsigned char portname)
{
	unsigned char returned_value;
	switch (portname)
     648:	84 34       	cpi	r24, 0x44	; 68
     64a:	d9 f0       	breq	.+54     	; 0x682 <DIO_READ_PORT+0x3a>
     64c:	85 34       	cpi	r24, 0x45	; 69
     64e:	38 f4       	brcc	.+14     	; 0x65e <DIO_READ_PORT+0x16>
     650:	82 34       	cpi	r24, 0x42	; 66
     652:	99 f0       	breq	.+38     	; 0x67a <DIO_READ_PORT+0x32>
     654:	83 34       	cpi	r24, 0x43	; 67
     656:	98 f4       	brcc	.+38     	; 0x67e <DIO_READ_PORT+0x36>
     658:	81 34       	cpi	r24, 0x41	; 65
     65a:	a1 f4       	brne	.+40     	; 0x684 <DIO_READ_PORT+0x3c>
     65c:	0c c0       	rjmp	.+24     	; 0x676 <DIO_READ_PORT+0x2e>
     65e:	82 36       	cpi	r24, 0x62	; 98
     660:	61 f0       	breq	.+24     	; 0x67a <DIO_READ_PORT+0x32>
     662:	83 36       	cpi	r24, 0x63	; 99
     664:	18 f4       	brcc	.+6      	; 0x66c <DIO_READ_PORT+0x24>
     666:	81 36       	cpi	r24, 0x61	; 97
     668:	69 f4       	brne	.+26     	; 0x684 <DIO_READ_PORT+0x3c>
     66a:	05 c0       	rjmp	.+10     	; 0x676 <DIO_READ_PORT+0x2e>
     66c:	83 36       	cpi	r24, 0x63	; 99
     66e:	39 f0       	breq	.+14     	; 0x67e <DIO_READ_PORT+0x36>
     670:	84 36       	cpi	r24, 0x64	; 100
     672:	41 f4       	brne	.+16     	; 0x684 <DIO_READ_PORT+0x3c>
     674:	06 c0       	rjmp	.+12     	; 0x682 <DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		returned_value=PORTA;
     676:	8b b3       	in	r24, 0x1b	; 27
		break;
     678:	08 95       	ret
		case 'B':
		case 'b':
		returned_value=PORTB;
     67a:	88 b3       	in	r24, 0x18	; 24
		break;
     67c:	08 95       	ret
		case 'C':
		case 'c':
		returned_value=PORTC;
     67e:	85 b3       	in	r24, 0x15	; 21
		break;
     680:	08 95       	ret
		case 'D':
		case 'd':
		returned_value=PORTD;
     682:	82 b3       	in	r24, 0x12	; 18
		break;
		default:
		break;
	}
}
     684:	08 95       	ret

00000686 <DIO_enable_PULLUP>:
void DIO_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7,unsigned char enable_pullup)
{
	switch (portname)
     686:	84 34       	cpi	r24, 0x44	; 68
     688:	09 f4       	brne	.+2      	; 0x68c <DIO_enable_PULLUP+0x6>
     68a:	71 c0       	rjmp	.+226    	; 0x76e <DIO_enable_PULLUP+0xe8>
     68c:	85 34       	cpi	r24, 0x45	; 69
     68e:	48 f4       	brcc	.+18     	; 0x6a2 <DIO_enable_PULLUP+0x1c>
     690:	82 34       	cpi	r24, 0x42	; 66
     692:	99 f1       	breq	.+102    	; 0x6fa <DIO_enable_PULLUP+0x74>
     694:	83 34       	cpi	r24, 0x43	; 67
     696:	08 f0       	brcs	.+2      	; 0x69a <DIO_enable_PULLUP+0x14>
     698:	4d c0       	rjmp	.+154    	; 0x734 <DIO_enable_PULLUP+0xae>
     69a:	81 34       	cpi	r24, 0x41	; 65
     69c:	09 f0       	breq	.+2      	; 0x6a0 <DIO_enable_PULLUP+0x1a>
     69e:	83 c0       	rjmp	.+262    	; 0x7a6 <DIO_enable_PULLUP+0x120>
     6a0:	0f c0       	rjmp	.+30     	; 0x6c0 <DIO_enable_PULLUP+0x3a>
     6a2:	82 36       	cpi	r24, 0x62	; 98
     6a4:	51 f1       	breq	.+84     	; 0x6fa <DIO_enable_PULLUP+0x74>
     6a6:	83 36       	cpi	r24, 0x63	; 99
     6a8:	20 f4       	brcc	.+8      	; 0x6b2 <DIO_enable_PULLUP+0x2c>
     6aa:	81 36       	cpi	r24, 0x61	; 97
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <DIO_enable_PULLUP+0x2a>
     6ae:	7b c0       	rjmp	.+246    	; 0x7a6 <DIO_enable_PULLUP+0x120>
     6b0:	07 c0       	rjmp	.+14     	; 0x6c0 <DIO_enable_PULLUP+0x3a>
     6b2:	83 36       	cpi	r24, 0x63	; 99
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <DIO_enable_PULLUP+0x32>
     6b6:	3e c0       	rjmp	.+124    	; 0x734 <DIO_enable_PULLUP+0xae>
     6b8:	84 36       	cpi	r24, 0x64	; 100
     6ba:	09 f0       	breq	.+2      	; 0x6be <DIO_enable_PULLUP+0x38>
     6bc:	74 c0       	rjmp	.+232    	; 0x7a6 <DIO_enable_PULLUP+0x120>
     6be:	57 c0       	rjmp	.+174    	; 0x76e <DIO_enable_PULLUP+0xe8>
	{
		case 'A':
		case 'a':
		if (enable_pullup==1)
     6c0:	41 30       	cpi	r20, 0x01	; 1
     6c2:	69 f4       	brne	.+26     	; 0x6de <DIO_enable_PULLUP+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
     6c4:	2b b3       	in	r18, 0x1b	; 27
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	ac 01       	movw	r20, r24
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_enable_PULLUP+0x4c>
     6ce:	44 0f       	add	r20, r20
     6d0:	55 1f       	adc	r21, r21
     6d2:	6a 95       	dec	r22
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_enable_PULLUP+0x48>
     6d6:	ba 01       	movw	r22, r20
     6d8:	62 2b       	or	r22, r18
     6da:	6b bb       	out	0x1b, r22	; 27
     6dc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
     6de:	2b b3       	in	r18, 0x1b	; 27
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	ac 01       	movw	r20, r24
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_enable_PULLUP+0x66>
     6e8:	44 0f       	add	r20, r20
     6ea:	55 1f       	adc	r21, r21
     6ec:	6a 95       	dec	r22
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_enable_PULLUP+0x62>
     6f0:	ba 01       	movw	r22, r20
     6f2:	60 95       	com	r22
     6f4:	62 23       	and	r22, r18
     6f6:	6b bb       	out	0x1b, r22	; 27
     6f8:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (enable_pullup==1)
     6fa:	41 30       	cpi	r20, 0x01	; 1
     6fc:	69 f4       	brne	.+26     	; 0x718 <DIO_enable_PULLUP+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
     6fe:	28 b3       	in	r18, 0x18	; 24
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	ac 01       	movw	r20, r24
     706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_enable_PULLUP+0x86>
     708:	44 0f       	add	r20, r20
     70a:	55 1f       	adc	r21, r21
     70c:	6a 95       	dec	r22
     70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_enable_PULLUP+0x82>
     710:	ba 01       	movw	r22, r20
     712:	62 2b       	or	r22, r18
     714:	68 bb       	out	0x18, r22	; 24
     716:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
     718:	28 b3       	in	r18, 0x18	; 24
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	ac 01       	movw	r20, r24
     720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_enable_PULLUP+0xa0>
     722:	44 0f       	add	r20, r20
     724:	55 1f       	adc	r21, r21
     726:	6a 95       	dec	r22
     728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_enable_PULLUP+0x9c>
     72a:	ba 01       	movw	r22, r20
     72c:	60 95       	com	r22
     72e:	62 23       	and	r22, r18
     730:	68 bb       	out	0x18, r22	; 24
     732:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (enable_pullup==1)
     734:	41 30       	cpi	r20, 0x01	; 1
     736:	69 f4       	brne	.+26     	; 0x752 <DIO_enable_PULLUP+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
     738:	25 b3       	in	r18, 0x15	; 21
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	ac 01       	movw	r20, r24
     740:	02 c0       	rjmp	.+4      	; 0x746 <DIO_enable_PULLUP+0xc0>
     742:	44 0f       	add	r20, r20
     744:	55 1f       	adc	r21, r21
     746:	6a 95       	dec	r22
     748:	e2 f7       	brpl	.-8      	; 0x742 <DIO_enable_PULLUP+0xbc>
     74a:	ba 01       	movw	r22, r20
     74c:	62 2b       	or	r22, r18
     74e:	65 bb       	out	0x15, r22	; 21
     750:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
     752:	25 b3       	in	r18, 0x15	; 21
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	ac 01       	movw	r20, r24
     75a:	02 c0       	rjmp	.+4      	; 0x760 <DIO_enable_PULLUP+0xda>
     75c:	44 0f       	add	r20, r20
     75e:	55 1f       	adc	r21, r21
     760:	6a 95       	dec	r22
     762:	e2 f7       	brpl	.-8      	; 0x75c <DIO_enable_PULLUP+0xd6>
     764:	ba 01       	movw	r22, r20
     766:	60 95       	com	r22
     768:	62 23       	and	r22, r18
     76a:	65 bb       	out	0x15, r22	; 21
     76c:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (enable_pullup==1)
     76e:	41 30       	cpi	r20, 0x01	; 1
     770:	69 f4       	brne	.+26     	; 0x78c <DIO_enable_PULLUP+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
     772:	22 b3       	in	r18, 0x12	; 18
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	ac 01       	movw	r20, r24
     77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_enable_PULLUP+0xfa>
     77c:	44 0f       	add	r20, r20
     77e:	55 1f       	adc	r21, r21
     780:	6a 95       	dec	r22
     782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_enable_PULLUP+0xf6>
     784:	ba 01       	movw	r22, r20
     786:	62 2b       	or	r22, r18
     788:	62 bb       	out	0x12, r22	; 18
     78a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
     78c:	22 b3       	in	r18, 0x12	; 18
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	ac 01       	movw	r20, r24
     794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_enable_PULLUP+0x114>
     796:	44 0f       	add	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	6a 95       	dec	r22
     79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_enable_PULLUP+0x110>
     79e:	ba 01       	movw	r22, r20
     7a0:	60 95       	com	r22
     7a2:	62 23       	and	r22, r18
     7a4:	62 bb       	out	0x12, r22	; 18
     7a6:	08 95       	ret

000007a8 <Keypad_INIT>:


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
     7a8:	4f 92       	push	r4
     7aa:	5f 92       	push	r5
     7ac:	6f 92       	push	r6
     7ae:	7f 92       	push	r7
     7b0:	8f 92       	push	r8
     7b2:	9f 92       	push	r9
     7b4:	af 92       	push	r10
     7b6:	bf 92       	push	r11
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	f8 2e       	mov	r15, r24
     7ca:	e4 2e       	mov	r14, r20
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
     7d0:	c6 2e       	mov	r12, r22
     7d2:	dd 24       	eor	r13, r13
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
     7d4:	82 2e       	mov	r8, r18
     7d6:	99 24       	eor	r9, r9
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
		DIO_set_PIN_dir(input_portname,input_firstpin+counter,0);
		DIO_enable_PULLUP(input_portname,input_firstpin+counter,1);
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
     7d8:	56 01       	movw	r10, r12
     7da:	08 94       	sec
     7dc:	a1 1c       	adc	r10, r1
     7de:	b1 1c       	adc	r11, r1
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
     7e0:	66 24       	eor	r6, r6
     7e2:	77 24       	eor	r7, r7
     7e4:	68 94       	set
     7e6:	61 f8       	bld	r6, 1
     7e8:	6c 0c       	add	r6, r12
     7ea:	7d 1c       	adc	r7, r13
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f3 e0       	ldi	r31, 0x03	; 3
     7f0:	4f 2e       	mov	r4, r31
     7f2:	55 24       	eor	r5, r5
     7f4:	f0 2d       	mov	r31, r0
     7f6:	4c 0c       	add	r4, r12
     7f8:	5d 1c       	adc	r5, r13
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
     7fa:	b8 01       	movw	r22, r16
     7fc:	6c 0d       	add	r22, r12
     7fe:	7d 1d       	adc	r23, r13
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
     800:	8f 2d       	mov	r24, r15
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
     80c:	e8 01       	movw	r28, r16
     80e:	c8 0d       	add	r28, r8
     810:	d9 1d       	adc	r29, r9
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
		DIO_set_PIN_dir(input_portname,input_firstpin+counter,0);
     812:	8e 2d       	mov	r24, r14
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	be 01       	movw	r22, r28
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
		DIO_enable_PULLUP(input_portname,input_firstpin+counter,1);
     820:	8e 2d       	mov	r24, r14
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	be 01       	movw	r22, r28
     826:	41 e0       	ldi	r20, 0x01	; 1
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enable_PULLUP>
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
     82e:	8f 2d       	mov	r24, r15
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	b6 01       	movw	r22, r12
     834:	41 e0       	ldi	r20, 0x01	; 1
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
     83c:	8f 2d       	mov	r24, r15
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	b5 01       	movw	r22, r10
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
     84a:	8f 2d       	mov	r24, r15
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	b3 01       	movw	r22, r6
     850:	41 e0       	ldi	r20, 0x01	; 1
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
     858:	8f 2d       	mov	r24, r15
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	b2 01       	movw	r22, r4
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
     866:	0f 5f       	subi	r16, 0xFF	; 255
     868:	1f 4f       	sbci	r17, 0xFF	; 255
unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
     86a:	04 30       	cpi	r16, 0x04	; 4
     86c:	11 05       	cpc	r17, r1
     86e:	29 f6       	brne	.-118    	; 0x7fa <Keypad_INIT+0x52>
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	9f 90       	pop	r9
     886:	8f 90       	pop	r8
     888:	7f 90       	pop	r7
     88a:	6f 90       	pop	r6
     88c:	5f 90       	pop	r5
     88e:	4f 90       	pop	r4
     890:	08 95       	ret

00000892 <Keypad_READ>:
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
     892:	2f 92       	push	r2
     894:	3f 92       	push	r3
     896:	4f 92       	push	r4
     898:	5f 92       	push	r5
     89a:	6f 92       	push	r6
     89c:	7f 92       	push	r7
     89e:	8f 92       	push	r8
     8a0:	9f 92       	push	r9
     8a2:	af 92       	push	r10
     8a4:	bf 92       	push	r11
     8a6:	cf 92       	push	r12
     8a8:	df 92       	push	r13
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <Keypad_READ+0x26>
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <Keypad_READ+0x28>
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	68 2e       	mov	r6, r24
     8c0:	cc 24       	eor	r12, r12
     8c2:	dd 24       	eor	r13, r13
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
     8c4:	86 2f       	mov	r24, r22
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	9a 83       	std	Y+2, r25	; 0x02
     8ca:	89 83       	std	Y+1, r24	; 0x01
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
     8cc:	77 24       	eor	r7, r7
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
     8ce:	82 2e       	mov	r8, r18
     8d0:	99 24       	eor	r9, r9
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
     8d2:	f4 2e       	mov	r15, r20
     8d4:	e7 2c       	mov	r14, r7
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
     8d6:	16 01       	movw	r2, r12
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
     8d8:	49 80       	ldd	r4, Y+1	; 0x01
     8da:	5a 80       	ldd	r5, Y+2	; 0x02
     8dc:	4c 0c       	add	r4, r12
     8de:	5d 1c       	adc	r5, r13
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
     8e0:	86 2d       	mov	r24, r6
     8e2:	97 2d       	mov	r25, r7
     8e4:	b2 01       	movw	r22, r4
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
     8ee:	1c 82       	std	Y+4, r1	; 0x04
     8f0:	1b 82       	std	Y+3, r1	; 0x03
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
     8f2:	ab 80       	ldd	r10, Y+3	; 0x03
     8f4:	bc 80       	ldd	r11, Y+4	; 0x04
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
     8f6:	85 01       	movw	r16, r10
     8f8:	08 0d       	add	r16, r8
     8fa:	19 1d       	adc	r17, r9
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
     8fc:	8f 2d       	mov	r24, r15
     8fe:	9e 2d       	mov	r25, r14
     900:	b8 01       	movw	r22, r16
     902:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_READ_PIN>
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	e1 f4       	brne	.+56     	; 0x942 <Keypad_READ+0xb0>
			{
				while(DIO_READ_PIN(input_portname,input_firstpin+col)==0);
     90a:	8f 2d       	mov	r24, r15
     90c:	9e 2d       	mov	r25, r14
     90e:	b8 01       	movw	r22, r16
     910:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_READ_PIN>
     914:	00 97       	sbiw	r24, 0x00	; 0
     916:	c9 f3       	breq	.-14     	; 0x90a <Keypad_READ+0x78>
				return_val = arr[row][col];
     918:	c1 01       	movw	r24, r2
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	8a 0d       	add	r24, r10
     924:	9b 1d       	adc	r25, r11
     926:	80 5a       	subi	r24, 0xA0	; 160
     928:	9f 4f       	sbci	r25, 0xFF	; 255
     92a:	fc 01       	movw	r30, r24
     92c:	00 81       	ld	r16, Z
				break;
			}
		}
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,1);
     92e:	86 2d       	mov	r24, r6
     930:	97 2d       	mov	r25, r7
     932:	b2 01       	movw	r22, r4
     934:	41 e0       	ldi	r20, 0x01	; 1
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
		
		if (return_val!=0xff)
     93c:	0f 3f       	cpi	r16, 0xFF	; 255
     93e:	51 f0       	breq	.+20     	; 0x954 <Keypad_READ+0xc2>
     940:	12 c0       	rjmp	.+36     	; 0x966 <Keypad_READ+0xd4>
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
     94c:	84 30       	cpi	r24, 0x04	; 4
     94e:	91 05       	cpc	r25, r1
     950:	81 f6       	brne	.-96     	; 0x8f2 <Keypad_READ+0x60>
     952:	21 c0       	rjmp	.+66     	; 0x996 <Keypad_READ+0x104>
     954:	08 94       	sec
     956:	c1 1c       	adc	r12, r1
     958:	d1 1c       	adc	r13, r1
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
	
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	c9 16       	cp	r12, r25
     95e:	d1 04       	cpc	r13, r1
     960:	09 f0       	breq	.+2      	; 0x964 <Keypad_READ+0xd2>
     962:	b9 cf       	rjmp	.-142    	; 0x8d6 <Keypad_READ+0x44>
     964:	0f ef       	ldi	r16, 0xFF	; 255
		{
			break;
		}
	}	
	return return_val;
}
     966:	80 2f       	mov	r24, r16
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	9f 90       	pop	r9
     986:	8f 90       	pop	r8
     988:	7f 90       	pop	r7
     98a:	6f 90       	pop	r6
     98c:	5f 90       	pop	r5
     98e:	4f 90       	pop	r4
     990:	3f 90       	pop	r3
     992:	2f 90       	pop	r2
     994:	08 95       	ret
				return_val = arr[row][col];
				break;
			}
		}
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,1);
     996:	86 2d       	mov	r24, r6
     998:	97 2d       	mov	r25, r7
     99a:	b2 01       	movw	r22, r4
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
     9a4:	d7 cf       	rjmp	.-82     	; 0x954 <Keypad_READ+0xc2>

000009a6 <enable_pulse>:
#define command 0
#define data 1

void static enable_pulse (void)
{
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,1);
     9a6:	81 e6       	ldi	r24, 0x61	; 97
     9a8:	66 e0       	ldi	r22, 0x06	; 6
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
     9b0:	8f e9       	ldi	r24, 0x9F	; 159
     9b2:	9f e0       	ldi	r25, 0x0F	; 15
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	f1 f7       	brne	.-4      	; 0x9b4 <enable_pulse+0xe>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <enable_pulse+0x14>
     9ba:	00 00       	nop
	_delay_ms(2);
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,0);
     9bc:	81 e6       	ldi	r24, 0x61	; 97
     9be:	66 e0       	ldi	r22, 0x06	; 6
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
}
     9c6:	08 95       	ret

000009c8 <LCD_send_char>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
     9c8:	af 92       	push	r10
     9ca:	bf 92       	push	r11
     9cc:	cf 92       	push	r12
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	c0 e0       	ldi	r28, 0x00	; 0
     9de:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
     9e0:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
     9e2:	0f 2e       	mov	r0, r31
     9e4:	f7 e0       	ldi	r31, 0x07	; 7
     9e6:	ef 2e       	mov	r14, r31
     9e8:	ff 24       	eor	r15, r15
     9ea:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     9ec:	cc 24       	eor	r12, r12
     9ee:	dd 24       	eor	r13, r13
     9f0:	c3 94       	inc	r12
     9f2:	a8 2e       	mov	r10, r24
     9f4:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
			x=3;
     9f6:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
     9f8:	a7 01       	movw	r20, r14
     9fa:	4c 1b       	sub	r20, r28
     9fc:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     9fe:	61 2f       	mov	r22, r17
     a00:	6e 5f       	subi	r22, 0xFE	; 254
     a02:	c6 01       	movw	r24, r12
     a04:	04 2e       	mov	r0, r20
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <LCD_send_char+0x44>
     a08:	88 0f       	add	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	0a 94       	dec	r0
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <LCD_send_char+0x40>
     a10:	8a 21       	and	r24, r10
     a12:	9b 21       	and	r25, r11
     a14:	9c 01       	movw	r18, r24
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <LCD_send_char+0x54>
     a18:	36 95       	lsr	r19
     a1a:	27 95       	ror	r18
     a1c:	4a 95       	dec	r20
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <LCD_send_char+0x50>
     a20:	a9 01       	movw	r20, r18
     a22:	81 e6       	ldi	r24, 0x61	; 97
     a24:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
     a28:	c3 30       	cpi	r28, 0x03	; 3
     a2a:	21 f0       	breq	.+8      	; 0xa34 <LCD_send_char+0x6c>
     a2c:	c7 30       	cpi	r28, 0x07	; 7
     a2e:	11 f0       	breq	.+4      	; 0xa34 <LCD_send_char+0x6c>
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
     a30:	11 50       	subi	r17, 0x01	; 1
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <LCD_send_char+0x7c>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
     a34:	81 e6       	ldi	r24, 0x61	; 97
     a36:	67 e0       	ldi	r22, 0x07	; 7
     a38:	41 e0       	ldi	r20, 0x01	; 1
     a3a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
			enable_pulse();
     a3e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <enable_pulse>
			x=3;
     a42:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
     a44:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
     a46:	c8 30       	cpi	r28, 0x08	; 8
     a48:	d1 05       	cpc	r29, r1
     a4a:	b1 f6       	brne	.-84     	; 0x9f8 <LCD_send_char+0x30>
     a4c:	8f ec       	ldi	r24, 0xCF	; 207
     a4e:	97 e0       	ldi	r25, 0x07	; 7
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <LCD_send_char+0x88>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <LCD_send_char+0x8e>
     a56:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	af 90       	pop	r10
     a6c:	08 95       	ret

00000a6e <LCD_send_cmd>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	c0 e0       	ldi	r28, 0x00	; 0
     a84:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//;
     a86:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
     a88:	0f 2e       	mov	r0, r31
     a8a:	f7 e0       	ldi	r31, 0x07	; 7
     a8c:	ef 2e       	mov	r14, r31
     a8e:	ff 24       	eor	r15, r15
     a90:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     a92:	cc 24       	eor	r12, r12
     a94:	dd 24       	eor	r13, r13
     a96:	c3 94       	inc	r12
     a98:	a8 2e       	mov	r10, r24
     a9a:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
			x=3;
     a9c:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
     a9e:	a7 01       	movw	r20, r14
     aa0:	4c 1b       	sub	r20, r28
     aa2:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     aa4:	61 2f       	mov	r22, r17
     aa6:	6e 5f       	subi	r22, 0xFE	; 254
     aa8:	c6 01       	movw	r24, r12
     aaa:	04 2e       	mov	r0, r20
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <LCD_send_cmd+0x44>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <LCD_send_cmd+0x40>
     ab6:	8a 21       	and	r24, r10
     ab8:	9b 21       	and	r25, r11
     aba:	9c 01       	movw	r18, r24
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <LCD_send_cmd+0x54>
     abe:	36 95       	lsr	r19
     ac0:	27 95       	ror	r18
     ac2:	4a 95       	dec	r20
     ac4:	e2 f7       	brpl	.-8      	; 0xabe <LCD_send_cmd+0x50>
     ac6:	a9 01       	movw	r20, r18
     ac8:	81 e6       	ldi	r24, 0x61	; 97
     aca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
     ace:	c3 30       	cpi	r28, 0x03	; 3
     ad0:	21 f0       	breq	.+8      	; 0xada <LCD_send_cmd+0x6c>
     ad2:	c7 30       	cpi	r28, 0x07	; 7
     ad4:	11 f0       	breq	.+4      	; 0xada <LCD_send_cmd+0x6c>
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
     ad6:	11 50       	subi	r17, 0x01	; 1
     ad8:	08 c0       	rjmp	.+16     	; 0xaea <LCD_send_cmd+0x7c>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
     ada:	81 e6       	ldi	r24, 0x61	; 97
     adc:	67 e0       	ldi	r22, 0x07	; 7
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
			enable_pulse();
     ae4:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <enable_pulse>
			x=3;
     ae8:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
     aea:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
     aec:	c8 30       	cpi	r28, 0x08	; 8
     aee:	d1 05       	cpc	r29, r1
     af0:	b1 f6       	brne	.-84     	; 0xa9e <LCD_send_cmd+0x30>
     af2:	8f ec       	ldi	r24, 0xCF	; 207
     af4:	97 e0       	ldi	r25, 0x07	; 7
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	f1 f7       	brne	.-4      	; 0xaf6 <LCD_send_cmd+0x88>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <LCD_send_cmd+0x8e>
     afc:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	08 95       	ret

00000b14 <LCD_CLEAR_Screen>:
#endif


void LCD_CLEAR_Screen (void)
{
	LCD_send_cmd(0x01);
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
     b1a:	8f e1       	ldi	r24, 0x1F	; 31
     b1c:	9e e4       	ldi	r25, 0x4E	; 78
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <LCD_CLEAR_Screen+0xa>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <LCD_CLEAR_Screen+0x10>
     b24:	00 00       	nop
	_delay_ms(10);
}
     b26:	08 95       	ret

00000b28 <LCD_INIT>:
	LCD_send_cmd(ENTRY_MODE_RTL);
	
}
#elif defined Four_BITS_MODE
void LCD_INIT (void)
{
     b28:	cf 93       	push	r28
     b2a:	8f e7       	ldi	r24, 0x7F	; 127
     b2c:	98 e3       	ldi	r25, 0x38	; 56
     b2e:	a1 e0       	ldi	r26, 0x01	; 1
     b30:	81 50       	subi	r24, 0x01	; 1
     b32:	90 40       	sbci	r25, 0x00	; 0
     b34:	a0 40       	sbci	r26, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <LCD_INIT+0x8>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <LCD_INIT+0x12>
     b3a:	00 00       	nop
	_delay_ms(50);
	unsigned char counter=0;
	unsigned char x=RLCD_16_firstpin;
     b3c:	c2 e0       	ldi	r28, 0x02	; 2
	for (counter;counter<=3;counter++)
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
     b3e:	81 e6       	ldi	r24, 0x61	; 97
     b40:	6c 2f       	mov	r22, r28
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
		x++;
     b48:	cf 5f       	subi	r28, 0xFF	; 255
void LCD_INIT (void)
{
	_delay_ms(50);
	unsigned char counter=0;
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
     b4a:	c6 30       	cpi	r28, 0x06	; 6
     b4c:	c1 f7       	brne	.-16     	; 0xb3e <LCD_INIT+0x16>
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
		x++;
	}
	DIO_set_PIN_dir(En_Rg_selection,En_Pn_selection,1);
     b4e:	81 e6       	ldi	r24, 0x61	; 97
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir(RS_Rg_selection,RS_Pn_selection,1);
     b58:	81 e6       	ldi	r24, 0x61	; 97
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	LCD_send_cmd(RETURN_HOME);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
     b68:	af e0       	ldi	r26, 0x0F	; 15
     b6a:	b7 e2       	ldi	r27, 0x27	; 39
     b6c:	11 97       	sbiw	r26, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCD_INIT+0x44>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <LCD_INIT+0x4a>
     b72:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(0x28);
     b74:	88 e2       	ldi	r24, 0x28	; 40
     b76:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
     b7a:	8e e0       	ldi	r24, 0x0E	; 14
     b7c:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
	LCD_send_cmd(CLEAR_SCREEN);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
     b86:	8f e0       	ldi	r24, 0x0F	; 15
     b88:	97 e2       	ldi	r25, 0x27	; 39
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	f1 f7       	brne	.-4      	; 0xb8a <LCD_INIT+0x62>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <LCD_INIT+0x68>
     b90:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(ENTRY_MODE_RTL);
     b92:	86 e0       	ldi	r24, 0x06	; 6
     b94:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
}
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <LCD_MOVE_CURSOR>:
#endif

void LCD_MOVE_CURSOR (unsigned char row,unsigned char coloumn)
{
	if (row>2||row<1||coloumn>16||coloumn<1)
     b9c:	98 2f       	mov	r25, r24
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	92 30       	cpi	r25, 0x02	; 2
     ba2:	20 f4       	brcc	.+8      	; 0xbac <LCD_MOVE_CURSOR+0x10>
     ba4:	61 31       	cpi	r22, 0x11	; 17
     ba6:	10 f4       	brcc	.+4      	; 0xbac <LCD_MOVE_CURSOR+0x10>
     ba8:	66 23       	and	r22, r22
     baa:	21 f4       	brne	.+8      	; 0xbb4 <LCD_MOVE_CURSOR+0x18>
	{
		LCD_send_cmd(0x80);
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
     bb2:	08 95       	ret
	}
	else if (row==1)
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	29 f4       	brne	.+10     	; 0xbc2 <LCD_MOVE_CURSOR+0x26>
	{
		LCD_send_cmd(0x80+coloumn-1);
     bb8:	86 2f       	mov	r24, r22
     bba:	81 58       	subi	r24, 0x81	; 129
     bbc:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
     bc0:	08 95       	ret
	}
	else if (row==2)
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	21 f4       	brne	.+8      	; 0xbce <LCD_MOVE_CURSOR+0x32>
	{
		LCD_send_cmd(0xc0+coloumn-1);
     bc6:	86 2f       	mov	r24, r22
     bc8:	81 54       	subi	r24, 0x41	; 65
     bca:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
     bce:	08 95       	ret

00000bd0 <LCD_send_string>:
	}
}
void LCD_send_string (char*ptr)
{
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	ec 01       	movw	r28, r24
	while (*ptr!=0)
     bd6:	88 81       	ld	r24, Y
     bd8:	88 23       	and	r24, r24
     bda:	31 f0       	breq	.+12     	; 0xbe8 <LCD_send_string+0x18>
	else if (row==2)
	{
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
     bdc:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		LCD_send_char(*ptr);
     bde:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
{
	while (*ptr!=0)
     be2:	89 91       	ld	r24, Y+
     be4:	88 23       	and	r24, r24
     be6:	d9 f7       	brne	.-10     	; 0xbde <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <scan_value>:
int scan_value (unsigned char first_asci,int first_value)
{
	
	first_value*=10;
     bee:	26 2f       	mov	r18, r22
     bf0:	37 2f       	mov	r19, r23
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	a9 01       	movw	r20, r18
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	44 0f       	add	r20, r20
     bfe:	55 1f       	adc	r21, r21
     c00:	24 0f       	add	r18, r20
     c02:	35 1f       	adc	r19, r21
	first_value+=(first_asci-0x30);
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	c0 97       	sbiw	r24, 0x30	; 48
     c08:	82 0f       	add	r24, r18
     c0a:	93 1f       	adc	r25, r19
	
	return first_value;
}
     c0c:	08 95       	ret

00000c0e <print_val>:
void print_val (int val)
{
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	7c 01       	movw	r14, r24
	int asci_val,counter=1,x=val;
	if (val==0)
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	21 f4       	brne	.+8      	; 0xc28 <print_val+0x1a>
	{
		LCD_send_char('0');
     c20:	80 e3       	ldi	r24, 0x30	; 48
     c22:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
     c26:	40 c0       	rjmp	.+128    	; 0xca8 <print_val+0x9a>
	}
	else if (val<10)
     c28:	8a e0       	ldi	r24, 0x0A	; 10
     c2a:	e8 16       	cp	r14, r24
     c2c:	f1 04       	cpc	r15, r1
     c2e:	2c f4       	brge	.+10     	; 0xc3a <print_val+0x2c>
	{
		LCD_send_char(val+0x30);
     c30:	8e 2d       	mov	r24, r14
     c32:	80 5d       	subi	r24, 0xD0	; 208
     c34:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
     c38:	37 c0       	rjmp	.+110    	; 0xca8 <print_val+0x9a>
	int asci_val,counter=1,x=val;
	if (val==0)
	{
		LCD_send_char('0');
	}
	else if (val<10)
     c3a:	c7 01       	movw	r24, r14
     c3c:	c1 e0       	ldi	r28, 0x01	; 1
     c3e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else
	{
		while (x>=10)
		{
			x=x/10;
     c40:	ea e0       	ldi	r30, 0x0A	; 10
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	bf 01       	movw	r22, r30
     c46:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__divmodhi4>
     c4a:	cb 01       	movw	r24, r22
			counter*=10;
     c4c:	9e 01       	movw	r18, r28
     c4e:	22 0f       	add	r18, r18
     c50:	33 1f       	adc	r19, r19
     c52:	cc 0f       	add	r28, r28
     c54:	dd 1f       	adc	r29, r29
     c56:	cc 0f       	add	r28, r28
     c58:	dd 1f       	adc	r29, r29
     c5a:	cc 0f       	add	r28, r28
     c5c:	dd 1f       	adc	r29, r29
     c5e:	c2 0f       	add	r28, r18
     c60:	d3 1f       	adc	r29, r19
	{
		LCD_send_char(val+0x30);
	}
	else
	{
		while (x>=10)
     c62:	6a 30       	cpi	r22, 0x0A	; 10
     c64:	71 05       	cpc	r23, r1
     c66:	74 f7       	brge	.-36     	; 0xc44 <print_val+0x36>
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
     c68:	ca 30       	cpi	r28, 0x0A	; 10
     c6a:	d1 05       	cpc	r29, r1
     c6c:	ac f0       	brlt	.+42     	; 0xc98 <print_val+0x8a>
		{
			asci_val=(val/counter)%10;
     c6e:	0a e0       	ldi	r16, 0x0A	; 10
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	c7 01       	movw	r24, r14
     c74:	be 01       	movw	r22, r28
     c76:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__divmodhi4>
     c7a:	cb 01       	movw	r24, r22
     c7c:	b8 01       	movw	r22, r16
     c7e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__divmodhi4>
			LCD_send_char(asci_val+0x30);
     c82:	80 5d       	subi	r24, 0xD0	; 208
     c84:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
			counter/=10;
     c88:	ce 01       	movw	r24, r28
     c8a:	b8 01       	movw	r22, r16
     c8c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__divmodhi4>
     c90:	eb 01       	movw	r28, r22
		while (x>=10)
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
     c92:	6a 30       	cpi	r22, 0x0A	; 10
     c94:	71 05       	cpc	r23, r1
     c96:	6c f7       	brge	.-38     	; 0xc72 <print_val+0x64>
		{
			asci_val=(val/counter)%10;
			LCD_send_char(asci_val+0x30);
			counter/=10;
		}
		LCD_send_char((val%10)+0x30);
     c98:	c7 01       	movw	r24, r14
     c9a:	6a e0       	ldi	r22, 0x0A	; 10
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__divmodhi4>
     ca2:	80 5d       	subi	r24, 0xD0	; 208
     ca4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
	}
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <LED_INIT>:
 *  Author: MT
 */ 
#include "DIO.h"
void LED_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,1);
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
}
     cbc:	08 95       	ret

00000cbe <BUTTON_INIT>:
void BUTTON_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
}
     cc4:	08 95       	ret

00000cc6 <BUTTON_INIT_enable_PULLUP>:
void BUTTON_INIT_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	d8 2f       	mov	r29, r24
     ccc:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,1);
     cd4:	8d 2f       	mov	r24, r29
     cd6:	6c 2f       	mov	r22, r28
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enable_PULLUP>
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <BUTTON_INIT_disable_PULLUP>:
void BUTTON_INIT_disable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	d8 2f       	mov	r29, r24
     cea:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,0);
     cf2:	8d 2f       	mov	r24, r29
     cf4:	6c 2f       	mov	r22, r28
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	0e 94 43 03 	call	0x686	; 0x686 <DIO_enable_PULLUP>
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <LED_ON>:

void LED_ON (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,1);
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
}
     d08:	08 95       	ret

00000d0a <LED_OFF>:
void LED_OFF (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,0);
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
}
     d10:	08 95       	ret

00000d12 <LED_TOGGLE>:
void LED_TOGGLE (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_Toggle_PIN_on_port(portname,pin_number_0_7);
     d12:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_Toggle_PIN_on_port>
}
     d16:	08 95       	ret

00000d18 <READ_PIN_status>:
unsigned char READ_PIN_status (unsigned char portname,unsigned char pin_number_0_7)
{	
	return DIO_READ_PIN(portname,pin_number_0_7);
     d18:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_READ_PIN>
}	
     d1c:	08 95       	ret

00000d1e <Call_slave1>:
     d1e:	ef ec       	ldi	r30, 0xCF	; 207
     d20:	f7 e0       	ldi	r31, 0x07	; 7
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <Call_slave1+0x4>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <Call_slave1+0xa>
     d28:	00 00       	nop
{
	_delay_ms(1);
	/*DIO_output_PIN_on_port('b',0,1);
	//_delay_ms(500);
	DIO_output_PIN_on_port('b',0,0);*/
	SPI_MASTER_Transmit_char(data,4);
     d2a:	64 e0       	ldi	r22, 0x04	; 4
     d2c:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_MASTER_Transmit_char>
}
     d30:	08 95       	ret

00000d32 <Call_slave2>:
     d32:	ef ec       	ldi	r30, 0xCF	; 207
     d34:	f7 e0       	ldi	r31, 0x07	; 7
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <Call_slave2+0x4>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <Call_slave2+0xa>
     d3c:	00 00       	nop
{
	_delay_ms(1);
	/*DIO_output_PIN_on_port('a',0,1);
	//_delay_ms(500);
	DIO_output_PIN_on_port('a',0,0);*/
	SPI_MASTER_Transmit_char(data,3);
     d3e:	63 e0       	ldi	r22, 0x03	; 3
     d40:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_MASTER_Transmit_char>
}
     d44:	08 95       	ret

00000d46 <main>:
#define check_mode 0xAA

static void Call_slave1 (unsigned char data);
static void Call_slave2 (unsigned char data);
int main(void)
{
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	60 97       	sbiw	r28, 0x10	; 16
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
    DIO_set_PIN_dir('a',0,1);//set the INT0 in slave 1
     d5a:	81 e6       	ldi	r24, 0x61	; 97
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',0,1);//set the INT0 in slave 2
     d64:	82 e6       	ldi	r24, 0x62	; 98
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	DIO_output_PIN_on_port('a',0,0);//idle mode for INT0 slave 1
     d6e:	81 e6       	ldi	r24, 0x61	; 97
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
	DIO_output_PIN_on_port('b',0,0);//idle mode for INT0 slave 2
     d78:	82 e6       	ldi	r24, 0x62	; 98
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <DIO_output_PIN_on_port>
	LED_INIT('d',7);
     d82:	84 e6       	ldi	r24, 0x64	; 100
     d84:	67 e0       	ldi	r22, 0x07	; 7
     d86:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_INIT>
	sei();
     d8a:	78 94       	sei
	SET_BIT(MCUCR,ISC00);
     d8c:	85 b7       	in	r24, 0x35	; 53
     d8e:	81 60       	ori	r24, 0x01	; 1
     d90:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,ISC01);
     d92:	85 b7       	in	r24, 0x35	; 53
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	85 bf       	out	0x35, r24	; 53
	SET_BIT(GICR,INT0);
     d98:	8b b7       	in	r24, 0x3b	; 59
     d9a:	80 64       	ori	r24, 0x40	; 64
     d9c:	8b bf       	out	0x3b, r24	; 59
	DIO_set_PIN_dir('d',2,0);//int0 source
     d9e:	84 e6       	ldi	r24, 0x64	; 100
     da0:	62 e0       	ldi	r22, 0x02	; 2
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <DIO_set_PIN_dir>
	SPI_MASTER_INIT();
     da8:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_MASTER_INIT>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	94 e3       	ldi	r25, 0x34	; 52
     db0:	ac e0       	ldi	r26, 0x0C	; 12
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	a0 40       	sbci	r26, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <main+0x6c>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <main+0x76>
     dbc:	00 00       	nop
	_delay_ms(500);
	LCD_INIT();
     dbe:	0e 94 94 05 	call	0xb28	; 0xb28 <LCD_INIT>
	Keypad_INIT('c',0,'c',4);
     dc2:	83 e6       	ldi	r24, 0x63	; 99
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	43 e6       	ldi	r20, 0x63	; 99
     dc8:	24 e0       	ldi	r18, 0x04	; 4
     dca:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Keypad_INIT>
	unsigned char pressed;
	int operation=NO_OPERATION;
	unsigned char i=0;
	unsigned char main_menu=1,degree_mode=0,settings_mode=0;
	unsigned char point_mode=0,slew_mode=0,track_mode=0,home_mode=0,set_time=0;
	unsigned char degree1[3]={0,0,0};
     dce:	19 82       	std	Y+1, r1	; 0x01
     dd0:	1a 82       	std	Y+2, r1	; 0x02
     dd2:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char degree2[3]={0,0,0};
     dd4:	1c 82       	std	Y+4, r1	; 0x04
     dd6:	1d 82       	std	Y+5, r1	; 0x05
     dd8:	1e 82       	std	Y+6, r1	; 0x06
	unsigned char slew_time1[2]={0,0};
	unsigned char slew_time2[2]={0,0};
	unsigned char slew_seconds=0,slew_minutes=0;
	unsigned char time[6]={0,0,0,0,0,0};
     dda:	fe 01       	movw	r30, r28
     ddc:	37 96       	adiw	r30, 0x07	; 7
     dde:	86 e0       	ldi	r24, 0x06	; 6
     de0:	df 01       	movw	r26, r30
     de2:	1d 92       	st	X+, r1
     de4:	8a 95       	dec	r24
     de6:	e9 f7       	brne	.-6      	; 0xde2 <main+0x9c>
	LCD_send_cmd(DISPLAY_ON_CURSOR_OFF);
     de8:	8c e0       	ldi	r24, 0x0C	; 12
     dea:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
	LCD_send_string("    Welcome");
     dee:	80 e7       	ldi	r24, 0x70	; 112
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	99 e6       	ldi	r25, 0x69	; 105
     dfa:	a8 e1       	ldi	r26, 0x18	; 24
     dfc:	81 50       	subi	r24, 0x01	; 1
     dfe:	90 40       	sbci	r25, 0x00	; 0
     e00:	a0 40       	sbci	r26, 0x00	; 0
     e02:	e1 f7       	brne	.-8      	; 0xdfc <main+0xb6>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <main+0xc0>
     e06:	00 00       	nop
	_delay_ms(1000);
	LCD_CLEAR_Screen();
     e08:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
	unsigned char main_menu=1,degree_mode=0,settings_mode=0;
	unsigned char point_mode=0,slew_mode=0,track_mode=0,home_mode=0,set_time=0;
	unsigned char degree1[3]={0,0,0};
	unsigned char degree2[3]={0,0,0};
	unsigned char slew_time1[2]={0,0};
	unsigned char slew_time2[2]={0,0};
     e0c:	77 24       	eor	r7, r7
     e0e:	66 24       	eor	r6, r6
	unsigned char i=0;
	unsigned char main_menu=1,degree_mode=0,settings_mode=0;
	unsigned char point_mode=0,slew_mode=0,track_mode=0,home_mode=0,set_time=0;
	unsigned char degree1[3]={0,0,0};
	unsigned char degree2[3]={0,0,0};
	unsigned char slew_time1[2]={0,0};
     e10:	55 24       	eor	r5, r5
     e12:	44 24       	eor	r4, r4
	Keypad_INIT('c',0,'c',4);
	unsigned char pressed;
	int operation=NO_OPERATION;
	unsigned char i=0;
	unsigned char main_menu=1,degree_mode=0,settings_mode=0;
	unsigned char point_mode=0,slew_mode=0,track_mode=0,home_mode=0,set_time=0;
     e14:	88 24       	eor	r8, r8
     e16:	1d 86       	std	Y+13, r1	; 0x0d
     e18:	18 8a       	std	Y+16, r1	; 0x10
     e1a:	1f 86       	std	Y+15, r1	; 0x0f
     e1c:	1e 86       	std	Y+14, r1	; 0x0e
	LCD_INIT();
	Keypad_INIT('c',0,'c',4);
	unsigned char pressed;
	int operation=NO_OPERATION;
	unsigned char i=0;
	unsigned char main_menu=1,degree_mode=0,settings_mode=0;
     e1e:	aa 24       	eor	r10, r10
     e20:	ee 24       	eor	r14, r14
     e22:	01 e0       	ldi	r16, 0x01	; 1
				}
			}
			else
			{
				LCD_CLEAR_Screen();
				LCD_send_string("Wrong Input");
     e24:	0f 2e       	mov	r0, r31
     e26:	ff ec       	ldi	r31, 0xCF	; 207
     e28:	2f 2e       	mov	r2, r31
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	3f 2e       	mov	r3, r31
     e2e:	f0 2d       	mov	r31, r0
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <main+0xf2>
				}
				_delay_ms(50);
				Call_slave2(0xf0);
				LCD_send_char('.');
			}
			set_time=0;
     e32:	88 24       	eor	r8, r8
			settings_mode=0;
     e34:	aa 24       	eor	r10, r10
			main_menu=1;
     e36:	01 e0       	ldi	r16, 0x01	; 1
	LCD_send_string("    Welcome");
	_delay_ms(1000);
	LCD_CLEAR_Screen();
    while(1)
    {
		Call_slave1(1);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <Call_slave1>
		if (main_menu==1)
     e3e:	01 30       	cpi	r16, 0x01	; 1
     e40:	09 f0       	breq	.+2      	; 0xe44 <main+0xfe>
     e42:	51 c1       	rjmp	.+674    	; 0x10e6 <main+0x3a0>
		{
			LCD_CLEAR_Screen();
     e44:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
			LCD_send_string("Choose your mode");
     e48:	8c e7       	ldi	r24, 0x7C	; 124
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	99 e6       	ldi	r25, 0x69	; 105
     e54:	a8 e1       	ldi	r26, 0x18	; 24
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	90 40       	sbci	r25, 0x00	; 0
     e5a:	a0 40       	sbci	r26, 0x00	; 0
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <main+0x110>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <main+0x11a>
     e60:	00 00       	nop
			_delay_ms(1000);
			LCD_CLEAR_Screen();
     e62:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
			LCD_send_string("1-Movement");
     e66:	8d e8       	ldi	r24, 0x8D	; 141
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
			LCD_MOVE_CURSOR(2,1);
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
			LCD_send_string("2-Settings");
     e76:	88 e9       	ldi	r24, 0x98	; 152
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
			do 
			{
				pressed=Keypad_READ('c',0,'c',4);
     e7e:	83 e6       	ldi	r24, 0x63	; 99
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	43 e6       	ldi	r20, 0x63	; 99
     e84:	24 e0       	ldi	r18, 0x04	; 4
     e86:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
			} while (pressed==NOT_PRESSED);
     e8a:	8f 3f       	cpi	r24, 0xFF	; 255
     e8c:	c1 f3       	breq	.-16     	; 0xe7e <main+0x138>
     e8e:	18 2f       	mov	r17, r24
			LCD_send_char(pressed);
     e90:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
			LCD_CLEAR_Screen();
     e94:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
			if (pressed=='1')
     e98:	11 33       	cpi	r17, 0x31	; 49
     e9a:	09 f0       	breq	.+2      	; 0xe9e <main+0x158>
     e9c:	44 c0       	rjmp	.+136    	; 0xf26 <main+0x1e0>
			{
				degree_mode=1;
				main_menu=0;
				LCD_send_string("Select Mode");
     e9e:	83 ea       	ldi	r24, 0xA3	; 163
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	99 e6       	ldi	r25, 0x69	; 105
     eaa:	a8 e1       	ldi	r26, 0x18	; 24
     eac:	81 50       	subi	r24, 0x01	; 1
     eae:	90 40       	sbci	r25, 0x00	; 0
     eb0:	a0 40       	sbci	r26, 0x00	; 0
     eb2:	e1 f7       	brne	.-8      	; 0xeac <main+0x166>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <main+0x170>
     eb6:	00 00       	nop
				_delay_ms(1000);
				LCD_CLEAR_Screen();
     eb8:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				//LCD_send_char(pressed);
				LCD_send_string("1-Point  2-slew");
     ebc:	8f ea       	ldi	r24, 0xAF	; 175
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
				LCD_MOVE_CURSOR(2,1);
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
				LCD_send_string("3-track  4-home");
     ecc:	8f eb       	ldi	r24, 0xBF	; 191
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
				do
				{
					pressed=Keypad_READ('c',0,'c',4);
     ed4:	83 e6       	ldi	r24, 0x63	; 99
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	43 e6       	ldi	r20, 0x63	; 99
     eda:	24 e0       	ldi	r18, 0x04	; 4
     edc:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
				} while (pressed==NOT_PRESSED);
     ee0:	8f 3f       	cpi	r24, 0xFF	; 255
     ee2:	c1 f3       	breq	.-16     	; 0xed4 <main+0x18e>
				if (pressed=='1')
     ee4:	81 33       	cpi	r24, 0x31	; 49
     ee6:	09 f4       	brne	.+2      	; 0xeea <main+0x1a4>
     ee8:	d9 c0       	rjmp	.+434    	; 0x109c <main+0x356>
				{
					point_mode=1,slew_mode=0,track_mode=0,home_mode=0;
				} 
				else if (pressed=='2')
     eea:	82 33       	cpi	r24, 0x32	; 50
     eec:	09 f4       	brne	.+2      	; 0xef0 <main+0x1aa>
     eee:	df c0       	rjmp	.+446    	; 0x10ae <main+0x368>
				{
					point_mode=0,slew_mode=1,track_mode=0,home_mode=0;
				} 
				else if (pressed=='3')
     ef0:	83 33       	cpi	r24, 0x33	; 51
     ef2:	09 f4       	brne	.+2      	; 0xef6 <main+0x1b0>
     ef4:	e5 c0       	rjmp	.+458    	; 0x10c0 <main+0x37a>
				{
					point_mode=0,slew_mode=0,track_mode=1,home_mode=0;
				}
				else if (pressed=='4')
     ef6:	84 33       	cpi	r24, 0x34	; 52
     ef8:	09 f4       	brne	.+2      	; 0xefc <main+0x1b6>
     efa:	eb c0       	rjmp	.+470    	; 0x10d2 <main+0x38c>
				{
					point_mode=0,slew_mode=0,track_mode=0,home_mode=1;
				} 
				else
				{
					LCD_CLEAR_Screen();
     efc:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
					LCD_send_string("Wrong Input");
     f00:	c1 01       	movw	r24, r2
     f02:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	93 ed       	ldi	r25, 0xD3	; 211
     f0a:	a0 e3       	ldi	r26, 0x30	; 48
     f0c:	81 50       	subi	r24, 0x01	; 1
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	a0 40       	sbci	r26, 0x00	; 0
     f12:	e1 f7       	brne	.-8      	; 0xf0c <main+0x1c6>
     f14:	00 c0       	rjmp	.+0      	; 0xf16 <main+0x1d0>
     f16:	00 00       	nop
					_delay_ms(2000);
					main_menu=1;
					point_mode=0,slew_mode=0,track_mode=0,home_mode=0;
     f18:	1d 86       	std	Y+13, r1	; 0x0d
     f1a:	18 8a       	std	Y+16, r1	; 0x10
     f1c:	1f 86       	std	Y+15, r1	; 0x0f
     f1e:	1e 86       	std	Y+14, r1	; 0x0e
					degree_mode=0;
					settings_mode=0;
     f20:	aa 24       	eor	r10, r10
					LCD_CLEAR_Screen();
					LCD_send_string("Wrong Input");
					_delay_ms(2000);
					main_menu=1;
					point_mode=0,slew_mode=0,track_mode=0,home_mode=0;
					degree_mode=0;
     f22:	ee 24       	eor	r14, r14
     f24:	de c0       	rjmp	.+444    	; 0x10e2 <main+0x39c>
					settings_mode=0;
				}
			} 
			else if (pressed=='2')
     f26:	12 33       	cpi	r17, 0x32	; 50
     f28:	09 f0       	breq	.+2      	; 0xf2c <main+0x1e6>
     f2a:	a7 c0       	rjmp	.+334    	; 0x107a <main+0x334>
			{
				settings_mode=1;
				main_menu=0;
				LCD_CLEAR_Screen();
     f2c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("1-Set Time");
     f30:	8b ed       	ldi	r24, 0xDB	; 219
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
				LCD_MOVE_CURSOR(2,1);
     f38:	82 e0       	ldi	r24, 0x02	; 2
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
				LCD_send_string("2-Check Mode");
     f40:	86 ee       	ldi	r24, 0xE6	; 230
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
				do
				{
					pressed=Keypad_READ('c',0,'c',4);
     f48:	83 e6       	ldi	r24, 0x63	; 99
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	43 e6       	ldi	r20, 0x63	; 99
     f4e:	24 e0       	ldi	r18, 0x04	; 4
     f50:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
				} while (pressed==NOT_PRESSED);
     f54:	8f 3f       	cpi	r24, 0xFF	; 255
     f56:	c1 f3       	breq	.-16     	; 0xf48 <main+0x202>
     f58:	18 2f       	mov	r17, r24
				LCD_CLEAR_Screen();
     f5a:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				if (pressed=='1')
     f5e:	11 33       	cpi	r17, 0x31	; 49
     f60:	91 f4       	brne	.+36     	; 0xf86 <main+0x240>
				{
					LCD_send_string("Setting Time");
     f62:	83 ef       	ldi	r24, 0xF3	; 243
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	99 e6       	ldi	r25, 0x69	; 105
     f6e:	a8 e1       	ldi	r26, 0x18	; 24
     f70:	81 50       	subi	r24, 0x01	; 1
     f72:	90 40       	sbci	r25, 0x00	; 0
     f74:	a0 40       	sbci	r26, 0x00	; 0
     f76:	e1 f7       	brne	.-8      	; 0xf70 <main+0x22a>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <main+0x234>
     f7a:	00 00       	nop
					_delay_ms(1000);
					set_time=1;
     f7c:	88 24       	eor	r8, r8
     f7e:	83 94       	inc	r8
					settings_mode=0;
				}
			} 
			else if (pressed=='2')
			{
				settings_mode=1;
     f80:	aa 24       	eor	r10, r10
     f82:	a3 94       	inc	r10
     f84:	ae c0       	rjmp	.+348    	; 0x10e2 <main+0x39c>
					LCD_send_string("Setting Time");
					_delay_ms(1000);
					set_time=1;
					main_menu=1;
				}
				else if (pressed=='2')
     f86:	12 33       	cpi	r17, 0x32	; 50
     f88:	09 f0       	breq	.+2      	; 0xf8c <main+0x246>
     f8a:	66 c0       	rjmp	.+204    	; 0x1058 <main+0x312>
				{
					LCD_send_string("Checking Mode ON");
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	99 e6       	ldi	r25, 0x69	; 105
     f98:	a8 e1       	ldi	r26, 0x18	; 24
     f9a:	81 50       	subi	r24, 0x01	; 1
     f9c:	90 40       	sbci	r25, 0x00	; 0
     f9e:	a0 40       	sbci	r26, 0x00	; 0
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <main+0x254>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <main+0x25e>
     fa4:	00 00       	nop
					_delay_ms(1000);
					LCD_MOVE_CURSOR(1,1);
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
     fae:	10 e1       	ldi	r17, 0x10	; 16
					for (i=0;i<=15;i++)
					{
						LCD_send_char(0xff);
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
     fb6:	11 50       	subi	r17, 0x01	; 1
				else if (pressed=='2')
				{
					LCD_send_string("Checking Mode ON");
					_delay_ms(1000);
					LCD_MOVE_CURSOR(1,1);
					for (i=0;i<=15;i++)
     fb8:	d9 f7       	brne	.-10     	; 0xfb0 <main+0x26a>
					{
						LCD_send_char(0xff);
					}
					LCD_MOVE_CURSOR(2,1);
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
     fc2:	10 e1       	ldi	r17, 0x10	; 16
					for (i=0;i<=15;i++)
					{
						LCD_send_char(0xff);
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
     fca:	11 50       	subi	r17, 0x01	; 1
					for (i=0;i<=15;i++)
					{
						LCD_send_char(0xff);
					}
					LCD_MOVE_CURSOR(2,1);
					for (i=0;i<=15;i++)
     fcc:	d9 f7       	brne	.-10     	; 0xfc4 <main+0x27e>
					{
						LCD_send_char(0xff);
					}
					i=0;
					Call_slave1(check_mode);
     fce:	8a ea       	ldi	r24, 0xAA	; 170
     fd0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <Call_slave1>
     fd4:	8f e7       	ldi	r24, 0x7F	; 127
     fd6:	98 e3       	ldi	r25, 0x38	; 56
     fd8:	a1 e0       	ldi	r26, 0x01	; 1
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	a0 40       	sbci	r26, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <main+0x294>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <main+0x29e>
     fe4:	00 00       	nop
					_delay_ms(50);
					
					Call_slave2(check_mode);
     fe6:	8a ea       	ldi	r24, 0xAA	; 170
     fe8:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
     fec:	8f e7       	ldi	r24, 0x7F	; 127
     fee:	98 e3       	ldi	r25, 0x38	; 56
     ff0:	a1 e0       	ldi	r26, 0x01	; 1
     ff2:	81 50       	subi	r24, 0x01	; 1
     ff4:	90 40       	sbci	r25, 0x00	; 0
     ff6:	a0 40       	sbci	r26, 0x00	; 0
     ff8:	e1 f7       	brne	.-8      	; 0xff2 <main+0x2ac>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <main+0x2b6>
     ffc:	00 00       	nop
					_delay_ms(50);
					Call_slave2(check_mode);
     ffe:	8a ea       	ldi	r24, 0xAA	; 170
    1000:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
    1004:	19 e0       	ldi	r17, 0x09	; 9
    1006:	af e3       	ldi	r26, 0x3F	; 63
    1008:	bc e9       	ldi	r27, 0x9C	; 156
    100a:	11 97       	sbiw	r26, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <main+0x2c4>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <main+0x2ca>
    1010:	00 00       	nop
					for (i=0;i<=8;i++)
					{
						_delay_ms(20);
						Call_slave2(0);
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
    1018:	11 50       	subi	r17, 0x01	; 1
					_delay_ms(50);
					
					Call_slave2(check_mode);
					_delay_ms(50);
					Call_slave2(check_mode);
					for (i=0;i<=8;i++)
    101a:	a9 f7       	brne	.-22     	; 0x1006 <main+0x2c0>
					{
						_delay_ms(20);
						Call_slave2(0);
					}
					Call_slave2(0xf0);
    101c:	80 ef       	ldi	r24, 0xF0	; 240
    101e:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
					LED_ON('d',7);
    1022:	84 e6       	ldi	r24, 0x64	; 100
    1024:	67 e0       	ldi	r22, 0x07	; 7
    1026:	0e 94 81 06 	call	0xd02	; 0xd02 <LED_ON>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	93 e2       	ldi	r25, 0x23	; 35
    102e:	a4 ef       	ldi	r26, 0xF4	; 244
    1030:	81 50       	subi	r24, 0x01	; 1
    1032:	90 40       	sbci	r25, 0x00	; 0
    1034:	a0 40       	sbci	r26, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <main+0x2ea>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <main+0x2f4>
    103a:	00 00       	nop
					_delay_ms(10000);
					LED_OFF('d',7);
    103c:	84 e6       	ldi	r24, 0x64	; 100
    103e:	67 e0       	ldi	r22, 0x07	; 7
    1040:	0e 94 85 06 	call	0xd0a	; 0xd0a <LED_OFF>
					LCD_CLEAR_Screen();
    1044:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
					point_mode=0,slew_mode=0,track_mode=0,home_mode=0,set_time=0;
    1048:	88 24       	eor	r8, r8
    104a:	1d 86       	std	Y+13, r1	; 0x0d
    104c:	18 8a       	std	Y+16, r1	; 0x10
    104e:	1f 86       	std	Y+15, r1	; 0x0f
    1050:	1e 86       	std	Y+14, r1	; 0x0e
					settings_mode=0;
				}
			} 
			else if (pressed=='2')
			{
				settings_mode=1;
    1052:	aa 24       	eor	r10, r10
    1054:	a3 94       	inc	r10
    1056:	45 c0       	rjmp	.+138    	; 0x10e2 <main+0x39c>
					point_mode=0,slew_mode=0,track_mode=0,home_mode=0,set_time=0;
					main_menu=1;
				} 
				else
				{
					LCD_CLEAR_Screen();
    1058:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
					LCD_send_string("Wrong Input");
    105c:	c1 01       	movw	r24, r2
    105e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	93 ed       	ldi	r25, 0xD3	; 211
    1066:	a0 e3       	ldi	r26, 0x30	; 48
    1068:	81 50       	subi	r24, 0x01	; 1
    106a:	90 40       	sbci	r25, 0x00	; 0
    106c:	a0 40       	sbci	r26, 0x00	; 0
    106e:	e1 f7       	brne	.-8      	; 0x1068 <main+0x322>
    1070:	00 c0       	rjmp	.+0      	; 0x1072 <main+0x32c>
    1072:	00 00       	nop
					_delay_ms(2000);
					set_time=0;
    1074:	88 24       	eor	r8, r8
					settings_mode=0;
    1076:	aa 24       	eor	r10, r10
    1078:	34 c0       	rjmp	.+104    	; 0x10e2 <main+0x39c>
					main_menu=1;
				}
			}
			else
			{
				LCD_CLEAR_Screen();
    107a:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("Wrong Input");
    107e:	c1 01       	movw	r24, r2
    1080:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	93 ed       	ldi	r25, 0xD3	; 211
    1088:	a0 e3       	ldi	r26, 0x30	; 48
    108a:	81 50       	subi	r24, 0x01	; 1
    108c:	90 40       	sbci	r25, 0x00	; 0
    108e:	a0 40       	sbci	r26, 0x00	; 0
    1090:	e1 f7       	brne	.-8      	; 0x108a <main+0x344>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <main+0x34e>
    1094:	00 00       	nop
				_delay_ms(2000);
				main_menu=1;
				degree_mode=0;
				settings_mode=0;
    1096:	aa 24       	eor	r10, r10
			{
				LCD_CLEAR_Screen();
				LCD_send_string("Wrong Input");
				_delay_ms(2000);
				main_menu=1;
				degree_mode=0;
    1098:	ee 24       	eor	r14, r14
    109a:	23 c0       	rjmp	.+70     	; 0x10e2 <main+0x39c>
				{
					pressed=Keypad_READ('c',0,'c',4);
				} while (pressed==NOT_PRESSED);
				if (pressed=='1')
				{
					point_mode=1,slew_mode=0,track_mode=0,home_mode=0;
    109c:	1d 86       	std	Y+13, r1	; 0x0d
    109e:	18 8a       	std	Y+16, r1	; 0x10
    10a0:	1f 86       	std	Y+15, r1	; 0x0f
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	9e 87       	std	Y+14, r25	; 0x0e
			} while (pressed==NOT_PRESSED);
			LCD_send_char(pressed);
			LCD_CLEAR_Screen();
			if (pressed=='1')
			{
				degree_mode=1;
    10a6:	ee 24       	eor	r14, r14
    10a8:	e3 94       	inc	r14
				main_menu=0;
    10aa:	00 e0       	ldi	r16, 0x00	; 0
    10ac:	1a c0       	rjmp	.+52     	; 0x10e2 <main+0x39c>
				{
					point_mode=1,slew_mode=0,track_mode=0,home_mode=0;
				} 
				else if (pressed=='2')
				{
					point_mode=0,slew_mode=1,track_mode=0,home_mode=0;
    10ae:	1d 86       	std	Y+13, r1	; 0x0d
    10b0:	18 8a       	std	Y+16, r1	; 0x10
    10b2:	a1 e0       	ldi	r26, 0x01	; 1
    10b4:	af 87       	std	Y+15, r26	; 0x0f
    10b6:	1e 86       	std	Y+14, r1	; 0x0e
			} while (pressed==NOT_PRESSED);
			LCD_send_char(pressed);
			LCD_CLEAR_Screen();
			if (pressed=='1')
			{
				degree_mode=1;
    10b8:	ee 24       	eor	r14, r14
    10ba:	e3 94       	inc	r14
				main_menu=0;
    10bc:	00 e0       	ldi	r16, 0x00	; 0
    10be:	11 c0       	rjmp	.+34     	; 0x10e2 <main+0x39c>
				{
					point_mode=0,slew_mode=1,track_mode=0,home_mode=0;
				} 
				else if (pressed=='3')
				{
					point_mode=0,slew_mode=0,track_mode=1,home_mode=0;
    10c0:	1d 86       	std	Y+13, r1	; 0x0d
    10c2:	b1 e0       	ldi	r27, 0x01	; 1
    10c4:	b8 8b       	std	Y+16, r27	; 0x10
    10c6:	1f 86       	std	Y+15, r1	; 0x0f
    10c8:	1e 86       	std	Y+14, r1	; 0x0e
			} while (pressed==NOT_PRESSED);
			LCD_send_char(pressed);
			LCD_CLEAR_Screen();
			if (pressed=='1')
			{
				degree_mode=1;
    10ca:	ee 24       	eor	r14, r14
    10cc:	e3 94       	inc	r14
				main_menu=0;
    10ce:	00 e0       	ldi	r16, 0x00	; 0
    10d0:	08 c0       	rjmp	.+16     	; 0x10e2 <main+0x39c>
				{
					point_mode=0,slew_mode=0,track_mode=1,home_mode=0;
				}
				else if (pressed=='4')
				{
					point_mode=0,slew_mode=0,track_mode=0,home_mode=1;
    10d2:	e1 e0       	ldi	r30, 0x01	; 1
    10d4:	ed 87       	std	Y+13, r30	; 0x0d
    10d6:	18 8a       	std	Y+16, r1	; 0x10
    10d8:	1f 86       	std	Y+15, r1	; 0x0f
    10da:	1e 86       	std	Y+14, r1	; 0x0e
			} while (pressed==NOT_PRESSED);
			LCD_send_char(pressed);
			LCD_CLEAR_Screen();
			if (pressed=='1')
			{
				degree_mode=1;
    10dc:	ee 24       	eor	r14, r14
    10de:	e3 94       	inc	r14
				main_menu=0;
    10e0:	00 e0       	ldi	r16, 0x00	; 0
				main_menu=1;
				degree_mode=0;
				settings_mode=0;
			}
			pressed=NOT_PRESSED;
			LCD_CLEAR_Screen();
    10e2:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
		}
		if (degree_mode==1)
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	ef 16       	cp	r14, r31
    10ea:	09 f0       	breq	.+2      	; 0x10ee <main+0x3a8>
    10ec:	b4 c1       	rjmp	.+872    	; 0x1456 <main+0x710>
		{
			/*get the degrees values*/
			if (home_mode==1)
    10ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	39 f4       	brne	.+14     	; 0x1102 <main+0x3bc>
			{
				LCD_CLEAR_Screen();
    10f4:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("Homing Mode ON");
    10f8:	81 e1       	ldi	r24, 0x11	; 17
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1100:	4a c0       	rjmp	.+148    	; 0x1196 <main+0x450>
				
			}
			else
			{
				LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
    1102:	8e e0       	ldi	r24, 0x0E	; 14
    1104:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
				LCD_send_string("Degree1:");
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1110:	7e 01       	movw	r14, r28
    1112:	08 94       	sec
    1114:	e1 1c       	adc	r14, r1
    1116:	f1 1c       	adc	r15, r1
#define SET_TIME 0xEE
#define check_mode 0xAA

static void Call_slave1 (unsigned char data);
static void Call_slave2 (unsigned char data);
int main(void)
    1118:	cc 24       	eor	r12, r12
    111a:	dd 24       	eor	r13, r13
    111c:	68 94       	set
    111e:	c2 f8       	bld	r12, 2
    1120:	cc 0e       	add	r12, r28
    1122:	dd 1e       	adc	r13, r29
				LCD_send_string("Degree1:");
				for (i=0;i<=2;i++)
				{
					do
					{
						pressed=Keypad_READ('c',0,'c',4);
    1124:	83 e6       	ldi	r24, 0x63	; 99
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	43 e6       	ldi	r20, 0x63	; 99
    112a:	24 e0       	ldi	r18, 0x04	; 4
    112c:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
    1130:	18 2f       	mov	r17, r24
					} while (pressed==NOT_PRESSED);
    1132:	8f 3f       	cpi	r24, 0xFF	; 255
    1134:	b9 f3       	breq	.-18     	; 0x1124 <main+0x3de>
					LCD_send_char(pressed);
    1136:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					degree1[i]=pressed-48;
    113a:	10 53       	subi	r17, 0x30	; 48
    113c:	d7 01       	movw	r26, r14
    113e:	1d 93       	st	X+, r17
    1140:	7d 01       	movw	r14, r26
			}
			else
			{
				LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
				LCD_send_string("Degree1:");
				for (i=0;i<=2;i++)
    1142:	ac 15       	cp	r26, r12
    1144:	bd 05       	cpc	r27, r13
    1146:	71 f7       	brne	.-36     	; 0x1124 <main+0x3de>
					} while (pressed==NOT_PRESSED);
					LCD_send_char(pressed);
					degree1[i]=pressed-48;
					pressed=NOT_PRESSED;
				}
				LCD_MOVE_CURSOR(2,1);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
				LCD_send_string("Degree2:");
    1150:	89 e2       	ldi	r24, 0x29	; 41
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1158:	ee 24       	eor	r14, r14
    115a:	ff 24       	eor	r15, r15
    115c:	68 94       	set
    115e:	e2 f8       	bld	r14, 2
    1160:	ec 0e       	add	r14, r28
    1162:	fd 1e       	adc	r15, r29
#define SET_TIME 0xEE
#define check_mode 0xAA

static void Call_slave1 (unsigned char data);
static void Call_slave2 (unsigned char data);
int main(void)
    1164:	0f 2e       	mov	r0, r31
    1166:	f7 e0       	ldi	r31, 0x07	; 7
    1168:	cf 2e       	mov	r12, r31
    116a:	dd 24       	eor	r13, r13
    116c:	f0 2d       	mov	r31, r0
    116e:	cc 0e       	add	r12, r28
    1170:	dd 1e       	adc	r13, r29
				LCD_send_string("Degree2:");
				for (i=0;i<=2;i++)
				{
					do
					{
						pressed=Keypad_READ('c',0,'c',4);
    1172:	83 e6       	ldi	r24, 0x63	; 99
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	43 e6       	ldi	r20, 0x63	; 99
    1178:	24 e0       	ldi	r18, 0x04	; 4
    117a:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
    117e:	18 2f       	mov	r17, r24
					} while (pressed==NOT_PRESSED);
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	b9 f3       	breq	.-18     	; 0x1172 <main+0x42c>
					LCD_send_char(pressed);
    1184:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					degree2[i]=pressed-48;
    1188:	10 53       	subi	r17, 0x30	; 48
    118a:	f7 01       	movw	r30, r14
    118c:	11 93       	st	Z+, r17
    118e:	7f 01       	movw	r14, r30
					degree1[i]=pressed-48;
					pressed=NOT_PRESSED;
				}
				LCD_MOVE_CURSOR(2,1);
				LCD_send_string("Degree2:");
				for (i=0;i<=2;i++)
    1190:	ec 15       	cp	r30, r12
    1192:	fd 05       	cpc	r31, r13
    1194:	71 f7       	brne	.-36     	; 0x1172 <main+0x42c>
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	99 e6       	ldi	r25, 0x69	; 105
    119a:	a8 e1       	ldi	r26, 0x18	; 24
    119c:	81 50       	subi	r24, 0x01	; 1
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	a0 40       	sbci	r26, 0x00	; 0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <main+0x456>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <main+0x460>
    11a6:	00 00       	nop
					pressed=NOT_PRESSED;
				}
			}
			
			_delay_ms(1000);
			LCD_CLEAR_Screen();
    11a8:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
			
			if (point_mode==1)
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	91 30       	cpi	r25, 0x01	; 1
    11b0:	29 f4       	brne	.+10     	; 0x11bc <main+0x476>
			{
				Call_slave2(POINTING_MODE);
    11b2:	8d ed       	ldi	r24, 0xDD	; 221
    11b4:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
				slew_seconds=0;
				slew_minutes=0;
				point_mode=0;
    11b8:	1e 86       	std	Y+14, r1	; 0x0e
    11ba:	bc c0       	rjmp	.+376    	; 0x1334 <main+0x5ee>
			} 
			else if (slew_mode==1)
    11bc:	af 85       	ldd	r26, Y+15	; 0x0f
    11be:	a1 30       	cpi	r26, 0x01	; 1
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <main+0x47e>
    11c2:	9b c0       	rjmp	.+310    	; 0x12fa <main+0x5b4>
			{
				Call_slave2(SLEWING_MODE);
    11c4:	8e ed       	ldi	r24, 0xDE	; 222
    11c6:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
				slew_time1[0]=0;
				slew_time1[1]=0;
				slew_time2[0]=0;
				slew_time2[1]=0;
				/*scan the second time*/
				LCD_CLEAR_Screen();
    11ca:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("First time>>>");
    11ce:	82 e3       	ldi	r24, 0x32	; 50
    11d0:	91 e0       	ldi	r25, 0x01	; 1
    11d2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	99 e6       	ldi	r25, 0x69	; 105
    11da:	a8 e1       	ldi	r26, 0x18	; 24
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	90 40       	sbci	r25, 0x00	; 0
    11e0:	a0 40       	sbci	r26, 0x00	; 0
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <main+0x496>
    11e4:	00 c0       	rjmp	.+0      	; 0x11e6 <main+0x4a0>
    11e6:	00 00       	nop
				_delay_ms(1000);
				LCD_CLEAR_Screen();
    11e8:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("Seconds_1:");
    11ec:	80 e4       	ldi	r24, 0x40	; 64
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    11f4:	02 e0       	ldi	r16, 0x02	; 2
			else if (slew_mode==1)
			{
				Call_slave2(SLEWING_MODE);
				slew_seconds=0;
				slew_minutes=0;
				slew_time1[0]=0;
    11f6:	44 24       	eor	r4, r4
				LCD_send_string("Seconds_1:");
				for (i=0;i<=1;i++)
				{
					do
					{
						pressed=Keypad_READ('c',0,'c',4);
    11f8:	83 e6       	ldi	r24, 0x63	; 99
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	43 e6       	ldi	r20, 0x63	; 99
    11fe:	24 e0       	ldi	r18, 0x04	; 4
    1200:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
    1204:	18 2f       	mov	r17, r24
					} while (pressed==NOT_PRESSED);
    1206:	8f 3f       	cpi	r24, 0xFF	; 255
    1208:	b9 f3       	breq	.-18     	; 0x11f8 <main+0x4b2>
					LCD_send_char(pressed);
    120a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					slew_time1[0]=slew_time1[0]*10+(pressed-48);
    120e:	44 0c       	add	r4, r4
    1210:	84 2d       	mov	r24, r4
    1212:	88 0f       	add	r24, r24
    1214:	88 0f       	add	r24, r24
    1216:	48 0e       	add	r4, r24
    1218:	90 ed       	ldi	r25, 0xD0	; 208
    121a:	49 0e       	add	r4, r25
    121c:	41 0e       	add	r4, r17
    121e:	01 50       	subi	r16, 0x01	; 1
				LCD_CLEAR_Screen();
				LCD_send_string("First time>>>");
				_delay_ms(1000);
				LCD_CLEAR_Screen();
				LCD_send_string("Seconds_1:");
				for (i=0;i<=1;i++)
    1220:	59 f7       	brne	.-42     	; 0x11f8 <main+0x4b2>
					} while (pressed==NOT_PRESSED);
					LCD_send_char(pressed);
					slew_time1[0]=slew_time1[0]*10+(pressed-48);
					pressed=NOT_PRESSED;
				}
				LCD_MOVE_CURSOR(2,1);
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
				LCD_send_string("Minutes_1:");
    122a:	8b e4       	ldi	r24, 0x4B	; 75
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1232:	02 e0       	ldi	r16, 0x02	; 2
			{
				Call_slave2(SLEWING_MODE);
				slew_seconds=0;
				slew_minutes=0;
				slew_time1[0]=0;
				slew_time1[1]=0;
    1234:	55 24       	eor	r5, r5
				LCD_send_string("Minutes_1:");
				for (i=0;i<=1;i++)
				{
					do
					{
						pressed=Keypad_READ('c',0,'c',4);
    1236:	83 e6       	ldi	r24, 0x63	; 99
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	43 e6       	ldi	r20, 0x63	; 99
    123c:	24 e0       	ldi	r18, 0x04	; 4
    123e:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
    1242:	18 2f       	mov	r17, r24
					} while (pressed==NOT_PRESSED);
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	b9 f3       	breq	.-18     	; 0x1236 <main+0x4f0>
					LCD_send_char(pressed);
    1248:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					slew_time1[1]=slew_time1[1]*10+(pressed-48);
    124c:	55 0c       	add	r5, r5
    124e:	85 2d       	mov	r24, r5
    1250:	88 0f       	add	r24, r24
    1252:	88 0f       	add	r24, r24
    1254:	58 0e       	add	r5, r24
    1256:	a0 ed       	ldi	r26, 0xD0	; 208
    1258:	5a 0e       	add	r5, r26
    125a:	51 0e       	add	r5, r17
    125c:	01 50       	subi	r16, 0x01	; 1
					slew_time1[0]=slew_time1[0]*10+(pressed-48);
					pressed=NOT_PRESSED;
				}
				LCD_MOVE_CURSOR(2,1);
				LCD_send_string("Minutes_1:");
				for (i=0;i<=1;i++)
    125e:	59 f7       	brne	.-42     	; 0x1236 <main+0x4f0>
				/*
				slew_seconds=slew_time[0];
				slew_minutes=slew_time[1];
				*/
				/*scan the second time*/
				LCD_CLEAR_Screen();
    1260:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("Second time>>>");
    1264:	86 e5       	ldi	r24, 0x56	; 86
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	99 e6       	ldi	r25, 0x69	; 105
    1270:	a8 e1       	ldi	r26, 0x18	; 24
    1272:	81 50       	subi	r24, 0x01	; 1
    1274:	90 40       	sbci	r25, 0x00	; 0
    1276:	a0 40       	sbci	r26, 0x00	; 0
    1278:	e1 f7       	brne	.-8      	; 0x1272 <main+0x52c>
    127a:	00 c0       	rjmp	.+0      	; 0x127c <main+0x536>
    127c:	00 00       	nop
				_delay_ms(1000);
				LCD_CLEAR_Screen();
    127e:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("Seconds_2:");
    1282:	85 e6       	ldi	r24, 0x65	; 101
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    128a:	02 e0       	ldi	r16, 0x02	; 2
				Call_slave2(SLEWING_MODE);
				slew_seconds=0;
				slew_minutes=0;
				slew_time1[0]=0;
				slew_time1[1]=0;
				slew_time2[0]=0;
    128c:	66 24       	eor	r6, r6
				LCD_send_string("Seconds_2:");
				for (i=0;i<=1;i++)
				{
					do
					{
						pressed=Keypad_READ('c',0,'c',4);
    128e:	83 e6       	ldi	r24, 0x63	; 99
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	43 e6       	ldi	r20, 0x63	; 99
    1294:	24 e0       	ldi	r18, 0x04	; 4
    1296:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
    129a:	18 2f       	mov	r17, r24
					} while (pressed==NOT_PRESSED);
    129c:	8f 3f       	cpi	r24, 0xFF	; 255
    129e:	b9 f3       	breq	.-18     	; 0x128e <main+0x548>
					LCD_send_char(pressed);
    12a0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					slew_time2[0]=slew_time2[0]*10+(pressed-48);
    12a4:	66 0c       	add	r6, r6
    12a6:	86 2d       	mov	r24, r6
    12a8:	88 0f       	add	r24, r24
    12aa:	88 0f       	add	r24, r24
    12ac:	68 0e       	add	r6, r24
    12ae:	90 ed       	ldi	r25, 0xD0	; 208
    12b0:	69 0e       	add	r6, r25
    12b2:	61 0e       	add	r6, r17
    12b4:	01 50       	subi	r16, 0x01	; 1
				LCD_CLEAR_Screen();
				LCD_send_string("Second time>>>");
				_delay_ms(1000);
				LCD_CLEAR_Screen();
				LCD_send_string("Seconds_2:");
				for (i=0;i<=1;i++)
    12b6:	59 f7       	brne	.-42     	; 0x128e <main+0x548>
					} while (pressed==NOT_PRESSED);
					LCD_send_char(pressed);
					slew_time2[0]=slew_time2[0]*10+(pressed-48);
					pressed=NOT_PRESSED;
				}
				LCD_MOVE_CURSOR(2,1);
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
				LCD_send_string("Minutes_2:");
    12c0:	80 e7       	ldi	r24, 0x70	; 112
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    12c8:	02 e0       	ldi	r16, 0x02	; 2
				slew_seconds=0;
				slew_minutes=0;
				slew_time1[0]=0;
				slew_time1[1]=0;
				slew_time2[0]=0;
				slew_time2[1]=0;
    12ca:	77 24       	eor	r7, r7
				LCD_send_string("Minutes_2:");
				for (i=0;i<=1;i++)
				{
					do
					{
						pressed=Keypad_READ('c',0,'c',4);
    12cc:	83 e6       	ldi	r24, 0x63	; 99
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	43 e6       	ldi	r20, 0x63	; 99
    12d2:	24 e0       	ldi	r18, 0x04	; 4
    12d4:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
    12d8:	18 2f       	mov	r17, r24
					} while (pressed==NOT_PRESSED);
    12da:	8f 3f       	cpi	r24, 0xFF	; 255
    12dc:	b9 f3       	breq	.-18     	; 0x12cc <main+0x586>
					LCD_send_char(pressed);
    12de:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					slew_time2[1]=slew_time2[1]*10+(pressed-48);
    12e2:	77 0c       	add	r7, r7
    12e4:	87 2d       	mov	r24, r7
    12e6:	88 0f       	add	r24, r24
    12e8:	88 0f       	add	r24, r24
    12ea:	78 0e       	add	r7, r24
    12ec:	a0 ed       	ldi	r26, 0xD0	; 208
    12ee:	7a 0e       	add	r7, r26
    12f0:	71 0e       	add	r7, r17
    12f2:	01 50       	subi	r16, 0x01	; 1
					slew_time2[0]=slew_time2[0]*10+(pressed-48);
					pressed=NOT_PRESSED;
				}
				LCD_MOVE_CURSOR(2,1);
				LCD_send_string("Minutes_2:");
				for (i=0;i<=1;i++)
    12f4:	59 f7       	brne	.-42     	; 0x12cc <main+0x586>
					LCD_send_char(pressed);
					slew_time2[1]=slew_time2[1]*10+(pressed-48);
					pressed=NOT_PRESSED;
				}
				
				slew_mode=0;
    12f6:	1f 86       	std	Y+15, r1	; 0x0f
    12f8:	1d c0       	rjmp	.+58     	; 0x1334 <main+0x5ee>
			}
			else if (track_mode==1)
    12fa:	b8 89       	ldd	r27, Y+16	; 0x10
    12fc:	b1 30       	cpi	r27, 0x01	; 1
    12fe:	49 f4       	brne	.+18     	; 0x1312 <main+0x5cc>
			{
				Call_slave2(TRACKING_MODE);
    1300:	8f ed       	ldi	r24, 0xDF	; 223
    1302:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
				LCD_send_string("Not provided yet");
    1306:	8b e7       	ldi	r24, 0x7B	; 123
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
				track_mode=0;
    130e:	18 8a       	std	Y+16, r1	; 0x10
    1310:	11 c0       	rjmp	.+34     	; 0x1334 <main+0x5ee>
			}
			else if (home_mode==1)
    1312:	ed 85       	ldd	r30, Y+13	; 0x0d
    1314:	e1 30       	cpi	r30, 0x01	; 1
    1316:	59 f4       	brne	.+22     	; 0x132e <main+0x5e8>
			{
				Call_slave2(HOMING_MODE);
    1318:	8c ed       	ldi	r24, 0xDC	; 220
    131a:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
				for (i=0;i<=2;i++)
				{
					degree1[i]=0;
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	1a 82       	std	Y+2, r1	; 0x02
    1322:	1b 82       	std	Y+3, r1	; 0x03
				}
				for (i=0;i<=2;i++)
				{
					degree2[i]=0;
    1324:	1c 82       	std	Y+4, r1	; 0x04
    1326:	1d 82       	std	Y+5, r1	; 0x05
    1328:	1e 82       	std	Y+6, r1	; 0x06
				}
				home_mode=0;
    132a:	1d 86       	std	Y+13, r1	; 0x0d
    132c:	03 c0       	rjmp	.+6      	; 0x1334 <main+0x5ee>
			}
			else
			{
				LCD_send_string("Wrong Input");
    132e:	c1 01       	movw	r24, r2
    1330:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	93 ed       	ldi	r25, 0xD3	; 211
    1338:	a0 e3       	ldi	r26, 0x30	; 48
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	90 40       	sbci	r25, 0x00	; 0
    133e:	a0 40       	sbci	r26, 0x00	; 0
    1340:	e1 f7       	brne	.-8      	; 0x133a <main+0x5f4>
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <main+0x5fe>
    1344:	00 00       	nop
			}
			_delay_ms(2000);
			LCD_CLEAR_Screen();
    1346:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
			LCD_send_cmd(DISPLAY_ON_CURSOR_OFF);
    134a:	8c e0       	ldi	r24, 0x0C	; 12
    134c:	0e 94 37 05 	call	0xa6e	; 0xa6e <LCD_send_cmd>
			LCD_send_string("Sending");
    1350:	8c e8       	ldi	r24, 0x8C	; 140
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    1358:	8e 01       	movw	r16, r28
    135a:	0f 5f       	subi	r16, 0xFF	; 255
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
#define SET_TIME 0xEE
#define check_mode 0xAA

static void Call_slave1 (unsigned char data);
static void Call_slave2 (unsigned char data);
int main(void)
    135e:	ee 24       	eor	r14, r14
    1360:	ff 24       	eor	r15, r15
    1362:	68 94       	set
    1364:	e2 f8       	bld	r14, 2
    1366:	ec 0e       	add	r14, r28
    1368:	fd 1e       	adc	r15, r29
    136a:	8f e7       	ldi	r24, 0x7F	; 127
    136c:	98 e3       	ldi	r25, 0x38	; 56
    136e:	a1 e0       	ldi	r26, 0x01	; 1
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	90 40       	sbci	r25, 0x00	; 0
    1374:	a0 40       	sbci	r26, 0x00	; 0
    1376:	e1 f7       	brne	.-8      	; 0x1370 <main+0x62a>
    1378:	00 c0       	rjmp	.+0      	; 0x137a <main+0x634>
    137a:	00 00       	nop
			LCD_send_string("Sending");
			//Call_slave2()
			for (i=0;i<=2;i++)
			{
				_delay_ms(50);
				Call_slave2(degree1[i]);
    137c:	d8 01       	movw	r26, r16
    137e:	8d 91       	ld	r24, X+
    1380:	8d 01       	movw	r16, r26
    1382:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
				LCD_send_char('.');
    1386:	8e e2       	ldi	r24, 0x2E	; 46
    1388:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
			_delay_ms(2000);
			LCD_CLEAR_Screen();
			LCD_send_cmd(DISPLAY_ON_CURSOR_OFF);
			LCD_send_string("Sending");
			//Call_slave2()
			for (i=0;i<=2;i++)
    138c:	0e 15       	cp	r16, r14
    138e:	1f 05       	cpc	r17, r15
    1390:	61 f7       	brne	.-40     	; 0x136a <main+0x624>
    1392:	8e 01       	movw	r16, r28
    1394:	0c 5f       	subi	r16, 0xFC	; 252
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
#define SET_TIME 0xEE
#define check_mode 0xAA

static void Call_slave1 (unsigned char data);
static void Call_slave2 (unsigned char data);
int main(void)
    1398:	0f 2e       	mov	r0, r31
    139a:	f7 e0       	ldi	r31, 0x07	; 7
    139c:	ef 2e       	mov	r14, r31
    139e:	ff 24       	eor	r15, r15
    13a0:	f0 2d       	mov	r31, r0
    13a2:	ec 0e       	add	r14, r28
    13a4:	fd 1e       	adc	r15, r29
    13a6:	8f e7       	ldi	r24, 0x7F	; 127
    13a8:	98 e3       	ldi	r25, 0x38	; 56
    13aa:	a1 e0       	ldi	r26, 0x01	; 1
    13ac:	81 50       	subi	r24, 0x01	; 1
    13ae:	90 40       	sbci	r25, 0x00	; 0
    13b0:	a0 40       	sbci	r26, 0x00	; 0
    13b2:	e1 f7       	brne	.-8      	; 0x13ac <main+0x666>
    13b4:	00 c0       	rjmp	.+0      	; 0x13b6 <main+0x670>
    13b6:	00 00       	nop
				LCD_send_char('.');
			}
			for (i=0;i<=2;i++)
			{
				_delay_ms(50);
				Call_slave2(degree2[i]);
    13b8:	d8 01       	movw	r26, r16
    13ba:	8d 91       	ld	r24, X+
    13bc:	8d 01       	movw	r16, r26
    13be:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
				LCD_send_char('.');
    13c2:	8e e2       	ldi	r24, 0x2E	; 46
    13c4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
			{
				_delay_ms(50);
				Call_slave2(degree1[i]);
				LCD_send_char('.');
			}
			for (i=0;i<=2;i++)
    13c8:	0e 15       	cp	r16, r14
    13ca:	1f 05       	cpc	r17, r15
    13cc:	61 f7       	brne	.-40     	; 0x13a6 <main+0x660>
			{
				_delay_ms(50);
				Call_slave2(degree2[i]);
				LCD_send_char('.');
			}
			Call_slave2(slew_time1[0]);//slew_seconds1
    13ce:	84 2d       	mov	r24, r4
    13d0:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
			LCD_send_char('.');
    13d4:	8e e2       	ldi	r24, 0x2E	; 46
    13d6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
    13da:	8f e7       	ldi	r24, 0x7F	; 127
    13dc:	98 e3       	ldi	r25, 0x38	; 56
    13de:	a1 e0       	ldi	r26, 0x01	; 1
    13e0:	81 50       	subi	r24, 0x01	; 1
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	a0 40       	sbci	r26, 0x00	; 0
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <main+0x69a>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <main+0x6a4>
    13ea:	00 00       	nop
			_delay_ms(50);
			Call_slave2(slew_time1[1]);//slew_minutes1
    13ec:	85 2d       	mov	r24, r5
    13ee:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
			LCD_send_char('.');
    13f2:	8e e2       	ldi	r24, 0x2E	; 46
    13f4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
    13f8:	8f e7       	ldi	r24, 0x7F	; 127
    13fa:	98 e3       	ldi	r25, 0x38	; 56
    13fc:	a1 e0       	ldi	r26, 0x01	; 1
    13fe:	81 50       	subi	r24, 0x01	; 1
    1400:	90 40       	sbci	r25, 0x00	; 0
    1402:	a0 40       	sbci	r26, 0x00	; 0
    1404:	e1 f7       	brne	.-8      	; 0x13fe <main+0x6b8>
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <main+0x6c2>
    1408:	00 00       	nop
			_delay_ms(50);
			Call_slave2(slew_time2[0]);//slew_seconds2
    140a:	86 2d       	mov	r24, r6
    140c:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
			LCD_send_char('.');
    1410:	8e e2       	ldi	r24, 0x2E	; 46
    1412:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
    1416:	8f e7       	ldi	r24, 0x7F	; 127
    1418:	98 e3       	ldi	r25, 0x38	; 56
    141a:	a1 e0       	ldi	r26, 0x01	; 1
    141c:	81 50       	subi	r24, 0x01	; 1
    141e:	90 40       	sbci	r25, 0x00	; 0
    1420:	a0 40       	sbci	r26, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <main+0x6d6>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <main+0x6e0>
    1426:	00 00       	nop
			_delay_ms(50);
			Call_slave2(slew_time2[1]);//slew_minutes2
    1428:	87 2d       	mov	r24, r7
    142a:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
			LCD_send_char('.');
    142e:	8e e2       	ldi	r24, 0x2E	; 46
    1430:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
    1434:	8f e7       	ldi	r24, 0x7F	; 127
    1436:	98 e3       	ldi	r25, 0x38	; 56
    1438:	a1 e0       	ldi	r26, 0x01	; 1
    143a:	81 50       	subi	r24, 0x01	; 1
    143c:	90 40       	sbci	r25, 0x00	; 0
    143e:	a0 40       	sbci	r26, 0x00	; 0
    1440:	e1 f7       	brne	.-8      	; 0x143a <main+0x6f4>
    1442:	00 c0       	rjmp	.+0      	; 0x1444 <main+0x6fe>
    1444:	00 00       	nop
			_delay_ms(50);
			Call_slave2(0xf0);
    1446:	80 ef       	ldi	r24, 0xF0	; 240
    1448:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
			LCD_CLEAR_Screen();
    144c:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
			degree_mode=0;
    1450:	ee 24       	eor	r14, r14
			main_menu=1;
    1452:	01 e0       	ldi	r16, 0x01	; 1
    1454:	f1 cc       	rjmp	.-1566   	; 0xe38 <main+0xf2>
		} 
		else if (settings_mode==1)
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	a9 16       	cp	r10, r25
    145a:	09 f0       	breq	.+2      	; 0x145e <main+0x718>
    145c:	ed cc       	rjmp	.-1574   	; 0xe38 <main+0xf2>
		{
			/*LCD_send_string("settings");
			_delay_ms(1000);*/
			LCD_CLEAR_Screen();
    145e:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
			if (set_time==1)
    1462:	a1 e0       	ldi	r26, 0x01	; 1
    1464:	8a 16       	cp	r8, r26
    1466:	09 f0       	breq	.+2      	; 0x146a <main+0x724>
    1468:	e4 cc       	rjmp	.-1592   	; 0xe32 <main+0xec>
			{
				Call_slave2(SET_TIME);
    146a:	8e ee       	ldi	r24, 0xEE	; 238
    146c:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
    1470:	8f e7       	ldi	r24, 0x7F	; 127
    1472:	98 e3       	ldi	r25, 0x38	; 56
    1474:	a1 e0       	ldi	r26, 0x01	; 1
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	90 40       	sbci	r25, 0x00	; 0
    147a:	a0 40       	sbci	r26, 0x00	; 0
    147c:	e1 f7       	brne	.-8      	; 0x1476 <main+0x730>
    147e:	00 c0       	rjmp	.+0      	; 0x1480 <main+0x73a>
    1480:	00 00       	nop
				_delay_ms(50);
				LCD_send_string("Hours:Mins:Secs");
    1482:	84 e9       	ldi	r24, 0x94	; 148
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
				LCD_MOVE_CURSOR(2,1);
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <LCD_MOVE_CURSOR>
    1492:	0f 2e       	mov	r0, r31
    1494:	f7 e0       	ldi	r31, 0x07	; 7
    1496:	cf 2e       	mov	r12, r31
    1498:	dd 24       	eor	r13, r13
    149a:	f0 2d       	mov	r31, r0
    149c:	cc 0e       	add	r12, r28
    149e:	dd 1e       	adc	r13, r29
#define SET_TIME 0xEE
#define check_mode 0xAA

static void Call_slave1 (unsigned char data);
static void Call_slave2 (unsigned char data);
int main(void)
    14a0:	0f 2e       	mov	r0, r31
    14a2:	fd e0       	ldi	r31, 0x0D	; 13
    14a4:	8f 2e       	mov	r8, r31
    14a6:	99 24       	eor	r9, r9
    14a8:	f0 2d       	mov	r31, r0
    14aa:	8c 0e       	add	r8, r28
    14ac:	9d 1e       	adc	r9, r29
    14ae:	56 01       	movw	r10, r12
				LCD_MOVE_CURSOR(2,1);
				for (i=0;i<=5;i++)
				{
					do
					{
						pressed=Keypad_READ('c',0,'c',4);
    14b0:	83 e6       	ldi	r24, 0x63	; 99
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	43 e6       	ldi	r20, 0x63	; 99
    14b6:	24 e0       	ldi	r18, 0x04	; 4
    14b8:	0e 94 49 04 	call	0x892	; 0x892 <Keypad_READ>
    14bc:	18 2f       	mov	r17, r24
					} while (pressed==NOT_PRESSED);
    14be:	8f 3f       	cpi	r24, 0xFF	; 255
    14c0:	b9 f3       	breq	.-18     	; 0x14b0 <main+0x76a>
					LCD_send_char(pressed);
    14c2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					time[i]=pressed-48;
    14c6:	10 53       	subi	r17, 0x30	; 48
    14c8:	d5 01       	movw	r26, r10
    14ca:	1d 93       	st	X+, r17
    14cc:	5d 01       	movw	r10, r26
			{
				Call_slave2(SET_TIME);
				_delay_ms(50);
				LCD_send_string("Hours:Mins:Secs");
				LCD_MOVE_CURSOR(2,1);
				for (i=0;i<=5;i++)
    14ce:	a8 15       	cp	r26, r8
    14d0:	b9 05       	cpc	r27, r9
    14d2:	71 f7       	brne	.-36     	; 0x14b0 <main+0x76a>
						pressed=Keypad_READ('c',0,'c',4);
					} while (pressed==NOT_PRESSED);
					LCD_send_char(pressed);
					time[i]=pressed-48;
				}
				LCD_CLEAR_Screen();
    14d4:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
				LCD_send_string("sending");
    14d8:	84 ea       	ldi	r24, 0xA4	; 164
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
    14e0:	8f e7       	ldi	r24, 0x7F	; 127
    14e2:	98 e3       	ldi	r25, 0x38	; 56
    14e4:	a1 e0       	ldi	r26, 0x01	; 1
    14e6:	81 50       	subi	r24, 0x01	; 1
    14e8:	90 40       	sbci	r25, 0x00	; 0
    14ea:	a0 40       	sbci	r26, 0x00	; 0
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <main+0x7a0>
    14ee:	00 c0       	rjmp	.+0      	; 0x14f0 <main+0x7aa>
    14f0:	00 00       	nop
				for (i=0;i<=5;i++)
				{
					_delay_ms(50);
					Call_slave2(time[i]);
    14f2:	d6 01       	movw	r26, r12
    14f4:	8d 91       	ld	r24, X+
    14f6:	6d 01       	movw	r12, r26
    14f8:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
					LCD_send_char('.');
    14fc:	8e e2       	ldi	r24, 0x2E	; 46
    14fe:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
					LCD_send_char(pressed);
					time[i]=pressed-48;
				}
				LCD_CLEAR_Screen();
				LCD_send_string("sending");
				for (i=0;i<=5;i++)
    1502:	8c 14       	cp	r8, r12
    1504:	9d 04       	cpc	r9, r13
    1506:	61 f7       	brne	.-40     	; 0x14e0 <main+0x79a>
    1508:	14 e0       	ldi	r17, 0x04	; 4
    150a:	8f e7       	ldi	r24, 0x7F	; 127
    150c:	98 e3       	ldi	r25, 0x38	; 56
    150e:	a1 e0       	ldi	r26, 0x01	; 1
    1510:	81 50       	subi	r24, 0x01	; 1
    1512:	90 40       	sbci	r25, 0x00	; 0
    1514:	a0 40       	sbci	r26, 0x00	; 0
    1516:	e1 f7       	brne	.-8      	; 0x1510 <main+0x7ca>
    1518:	00 c0       	rjmp	.+0      	; 0x151a <main+0x7d4>
    151a:	00 00       	nop
					LCD_send_char('.');
				}
				for (i=0;i<=3;i++)
				{
					_delay_ms(50);
					Call_slave2(0);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
					LCD_send_char('.');
    1522:	8e e2       	ldi	r24, 0x2E	; 46
    1524:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
    1528:	11 50       	subi	r17, 0x01	; 1
				{
					_delay_ms(50);
					Call_slave2(time[i]);
					LCD_send_char('.');
				}
				for (i=0;i<=3;i++)
    152a:	79 f7       	brne	.-34     	; 0x150a <main+0x7c4>
    152c:	8f e7       	ldi	r24, 0x7F	; 127
    152e:	98 e3       	ldi	r25, 0x38	; 56
    1530:	a1 e0       	ldi	r26, 0x01	; 1
    1532:	81 50       	subi	r24, 0x01	; 1
    1534:	90 40       	sbci	r25, 0x00	; 0
    1536:	a0 40       	sbci	r26, 0x00	; 0
    1538:	e1 f7       	brne	.-8      	; 0x1532 <main+0x7ec>
    153a:	00 c0       	rjmp	.+0      	; 0x153c <main+0x7f6>
    153c:	00 00       	nop
					_delay_ms(50);
					Call_slave2(0);
					LCD_send_char('.');
				}
				_delay_ms(50);
				Call_slave2(0xf0);
    153e:	80 ef       	ldi	r24, 0xF0	; 240
    1540:	0e 94 99 06 	call	0xd32	; 0xd32 <Call_slave2>
				LCD_send_char('.');
    1544:	8e e2       	ldi	r24, 0x2E	; 46
    1546:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <LCD_send_char>
			}
			set_time=0;
    154a:	88 24       	eor	r8, r8
			settings_mode=0;
    154c:	aa 24       	eor	r10, r10
			main_menu=1;
    154e:	01 e0       	ldi	r16, 0x01	; 1
    1550:	73 cc       	rjmp	.-1818   	; 0xe38 <main+0xf2>

00001552 <__vector_1>:
	//_delay_ms(500);
	DIO_output_PIN_on_port('a',0,0);*/
	SPI_MASTER_Transmit_char(data,3);
}
ISR(INT0_vect)
{
    1552:	1f 92       	push	r1
    1554:	0f 92       	push	r0
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	0f 92       	push	r0
    155a:	11 24       	eor	r1, r1
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
	LCD_CLEAR_Screen();
    1574:	0e 94 8a 05 	call	0xb14	; 0xb14 <LCD_CLEAR_Screen>
	LCD_send_string("Heat Warning!!!");
    1578:	8c ea       	ldi	r24, 0xAC	; 172
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_send_string>
	LED_ON('d',7);
    1580:	84 e6       	ldi	r24, 0x64	; 100
    1582:	67 e0       	ldi	r22, 0x07	; 7
    1584:	0e 94 81 06 	call	0xd02	; 0xd02 <LED_ON>
}
    1588:	ff 91       	pop	r31
    158a:	ef 91       	pop	r30
    158c:	bf 91       	pop	r27
    158e:	af 91       	pop	r26
    1590:	9f 91       	pop	r25
    1592:	8f 91       	pop	r24
    1594:	7f 91       	pop	r23
    1596:	6f 91       	pop	r22
    1598:	5f 91       	pop	r21
    159a:	4f 91       	pop	r20
    159c:	3f 91       	pop	r19
    159e:	2f 91       	pop	r18
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <timer2_INIT_OVERFLOW_Interrupt>:
#include <avr/interrupt.h>
#include <avr/io.h>

void timer2_INIT_OVERFLOW_Interrupt (void)
{
	SET_BIT(ASSR,AS2);//choose the oscillation source [0 for internal / 1 for TOSC2]
    15aa:	82 b5       	in	r24, 0x22	; 34
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS20);//choose the prescaler factor from table
    15b0:	85 b5       	in	r24, 0x25	; 37
    15b2:	81 60       	ori	r24, 0x01	; 1
    15b4:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    15b6:	85 b5       	in	r24, 0x25	; 37
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	85 bd       	out	0x25, r24	; 37
	
	//enable interrupt
	sei();
    15bc:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);//for overflow interrupt
    15be:	89 b7       	in	r24, 0x39	; 57
    15c0:	80 64       	ori	r24, 0x40	; 64
    15c2:	89 bf       	out	0x39, r24	; 57
}
    15c4:	08 95       	ret

000015c6 <timer1_INIT_WAVE_Fast_PMW>:
void timer1_INIT_WAVE_Fast_PMW (double value)
{
	value=value*0.0055555555555556+1.5;
    15c6:	21 e6       	ldi	r18, 0x61	; 97
    15c8:	3b e0       	ldi	r19, 0x0B	; 11
    15ca:	46 eb       	ldi	r20, 0xB6	; 182
    15cc:	5b e3       	ldi	r21, 0x3B	; 59
    15ce:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
	SET_BIT(DDRD,5);//set bin d5 to be output bin
    15d2:	8d 9a       	sbi	0x11, 5	; 17
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
    15d4:	2f b5       	in	r18, 0x2f	; 47
    15d6:	2e 7f       	andi	r18, 0xFE	; 254
    15d8:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,WGM11);
    15da:	2f b5       	in	r18, 0x2f	; 47
    15dc:	22 60       	ori	r18, 0x02	; 2
    15de:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
    15e0:	2e b5       	in	r18, 0x2e	; 46
    15e2:	28 60       	ori	r18, 0x08	; 8
    15e4:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
    15e6:	2e b5       	in	r18, 0x2e	; 46
    15e8:	20 61       	ori	r18, 0x10	; 16
    15ea:	2e bd       	out	0x2e, r18	; 46
	sei();
	SET_BIT(TIMSK,TOIE2);//for overflow interrupt
}
void timer1_INIT_WAVE_Fast_PMW (double value)
{
	value=value*0.0055555555555556+1.5;
    15ec:	46 2f       	mov	r20, r22
    15ee:	57 2f       	mov	r21, r23
    15f0:	68 2f       	mov	r22, r24
    15f2:	79 2f       	mov	r23, r25
    15f4:	cb 01       	movw	r24, r22
    15f6:	ba 01       	movw	r22, r20
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 ec       	ldi	r20, 0xC0	; 192
    15fe:	5f e3       	ldi	r21, 0x3F	; 63
    1600:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__addsf3>
	SET_BIT(DDRD,5);//set bin d5 to be output bin
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
	OCR1A=value*1000;//load the OCR1A,ICR1 values
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	4a e7       	ldi	r20, 0x7A	; 122
    160a:	54 e4       	ldi	r21, 0x44	; 68
    160c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3>
    1610:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9b bd       	out	0x2b, r25	; 43
    161a:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;
    161c:	8f e1       	ldi	r24, 0x1F	; 31
    161e:	9e e4       	ldi	r25, 0x4E	; 78
    1620:	97 bd       	out	0x27, r25	; 39
    1622:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1B,CS11);//no prescaling
    1624:	8e b5       	in	r24, 0x2e	; 46
    1626:	82 60       	ori	r24, 0x02	; 2
    1628:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1A1);
    162a:	8f b5       	in	r24, 0x2f	; 47
    162c:	80 68       	ori	r24, 0x80	; 128
    162e:	8f bd       	out	0x2f, r24	; 47
}
    1630:	08 95       	ret

00001632 <__subsf3>:
    1632:	50 58       	subi	r21, 0x80	; 128

00001634 <__addsf3>:
    1634:	bb 27       	eor	r27, r27
    1636:	aa 27       	eor	r26, r26
    1638:	0e d0       	rcall	.+28     	; 0x1656 <__addsf3x>
    163a:	a3 c0       	rjmp	.+326    	; 0x1782 <__fp_round>
    163c:	94 d0       	rcall	.+296    	; 0x1766 <__fp_pscA>
    163e:	30 f0       	brcs	.+12     	; 0x164c <__addsf3+0x18>
    1640:	99 d0       	rcall	.+306    	; 0x1774 <__fp_pscB>
    1642:	20 f0       	brcs	.+8      	; 0x164c <__addsf3+0x18>
    1644:	31 f4       	brne	.+12     	; 0x1652 <__addsf3+0x1e>
    1646:	9f 3f       	cpi	r25, 0xFF	; 255
    1648:	11 f4       	brne	.+4      	; 0x164e <__addsf3+0x1a>
    164a:	1e f4       	brtc	.+6      	; 0x1652 <__addsf3+0x1e>
    164c:	89 c0       	rjmp	.+274    	; 0x1760 <__fp_nan>
    164e:	0e f4       	brtc	.+2      	; 0x1652 <__addsf3+0x1e>
    1650:	e0 95       	com	r30
    1652:	e7 fb       	bst	r30, 7
    1654:	7f c0       	rjmp	.+254    	; 0x1754 <__fp_inf>

00001656 <__addsf3x>:
    1656:	e9 2f       	mov	r30, r25
    1658:	a5 d0       	rcall	.+330    	; 0x17a4 <__fp_split3>
    165a:	80 f3       	brcs	.-32     	; 0x163c <__addsf3+0x8>
    165c:	ba 17       	cp	r27, r26
    165e:	62 07       	cpc	r22, r18
    1660:	73 07       	cpc	r23, r19
    1662:	84 07       	cpc	r24, r20
    1664:	95 07       	cpc	r25, r21
    1666:	18 f0       	brcs	.+6      	; 0x166e <__addsf3x+0x18>
    1668:	71 f4       	brne	.+28     	; 0x1686 <__addsf3x+0x30>
    166a:	9e f5       	brtc	.+102    	; 0x16d2 <__addsf3x+0x7c>
    166c:	bd c0       	rjmp	.+378    	; 0x17e8 <__fp_zero>
    166e:	0e f4       	brtc	.+2      	; 0x1672 <__addsf3x+0x1c>
    1670:	e0 95       	com	r30
    1672:	0b 2e       	mov	r0, r27
    1674:	ba 2f       	mov	r27, r26
    1676:	a0 2d       	mov	r26, r0
    1678:	0b 01       	movw	r0, r22
    167a:	b9 01       	movw	r22, r18
    167c:	90 01       	movw	r18, r0
    167e:	0c 01       	movw	r0, r24
    1680:	ca 01       	movw	r24, r20
    1682:	a0 01       	movw	r20, r0
    1684:	11 24       	eor	r1, r1
    1686:	ff 27       	eor	r31, r31
    1688:	59 1b       	sub	r21, r25
    168a:	99 f0       	breq	.+38     	; 0x16b2 <__addsf3x+0x5c>
    168c:	59 3f       	cpi	r21, 0xF9	; 249
    168e:	50 f4       	brcc	.+20     	; 0x16a4 <__addsf3x+0x4e>
    1690:	50 3e       	cpi	r21, 0xE0	; 224
    1692:	68 f1       	brcs	.+90     	; 0x16ee <__addsf3x+0x98>
    1694:	1a 16       	cp	r1, r26
    1696:	f0 40       	sbci	r31, 0x00	; 0
    1698:	a2 2f       	mov	r26, r18
    169a:	23 2f       	mov	r18, r19
    169c:	34 2f       	mov	r19, r20
    169e:	44 27       	eor	r20, r20
    16a0:	58 5f       	subi	r21, 0xF8	; 248
    16a2:	f3 cf       	rjmp	.-26     	; 0x168a <__addsf3x+0x34>
    16a4:	46 95       	lsr	r20
    16a6:	37 95       	ror	r19
    16a8:	27 95       	ror	r18
    16aa:	a7 95       	ror	r26
    16ac:	f0 40       	sbci	r31, 0x00	; 0
    16ae:	53 95       	inc	r21
    16b0:	c9 f7       	brne	.-14     	; 0x16a4 <__addsf3x+0x4e>
    16b2:	7e f4       	brtc	.+30     	; 0x16d2 <__addsf3x+0x7c>
    16b4:	1f 16       	cp	r1, r31
    16b6:	ba 0b       	sbc	r27, r26
    16b8:	62 0b       	sbc	r22, r18
    16ba:	73 0b       	sbc	r23, r19
    16bc:	84 0b       	sbc	r24, r20
    16be:	ba f0       	brmi	.+46     	; 0x16ee <__addsf3x+0x98>
    16c0:	91 50       	subi	r25, 0x01	; 1
    16c2:	a1 f0       	breq	.+40     	; 0x16ec <__addsf3x+0x96>
    16c4:	ff 0f       	add	r31, r31
    16c6:	bb 1f       	adc	r27, r27
    16c8:	66 1f       	adc	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	88 1f       	adc	r24, r24
    16ce:	c2 f7       	brpl	.-16     	; 0x16c0 <__addsf3x+0x6a>
    16d0:	0e c0       	rjmp	.+28     	; 0x16ee <__addsf3x+0x98>
    16d2:	ba 0f       	add	r27, r26
    16d4:	62 1f       	adc	r22, r18
    16d6:	73 1f       	adc	r23, r19
    16d8:	84 1f       	adc	r24, r20
    16da:	48 f4       	brcc	.+18     	; 0x16ee <__addsf3x+0x98>
    16dc:	87 95       	ror	r24
    16de:	77 95       	ror	r23
    16e0:	67 95       	ror	r22
    16e2:	b7 95       	ror	r27
    16e4:	f7 95       	ror	r31
    16e6:	9e 3f       	cpi	r25, 0xFE	; 254
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <__addsf3x+0x96>
    16ea:	b3 cf       	rjmp	.-154    	; 0x1652 <__addsf3+0x1e>
    16ec:	93 95       	inc	r25
    16ee:	88 0f       	add	r24, r24
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <__addsf3x+0x9e>
    16f2:	99 27       	eor	r25, r25
    16f4:	ee 0f       	add	r30, r30
    16f6:	97 95       	ror	r25
    16f8:	87 95       	ror	r24
    16fa:	08 95       	ret

000016fc <__fixunssfsi>:
    16fc:	5b d0       	rcall	.+182    	; 0x17b4 <__fp_splitA>
    16fe:	88 f0       	brcs	.+34     	; 0x1722 <__fixunssfsi+0x26>
    1700:	9f 57       	subi	r25, 0x7F	; 127
    1702:	90 f0       	brcs	.+36     	; 0x1728 <__fixunssfsi+0x2c>
    1704:	b9 2f       	mov	r27, r25
    1706:	99 27       	eor	r25, r25
    1708:	b7 51       	subi	r27, 0x17	; 23
    170a:	a0 f0       	brcs	.+40     	; 0x1734 <__fixunssfsi+0x38>
    170c:	d1 f0       	breq	.+52     	; 0x1742 <__fixunssfsi+0x46>
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	1a f0       	brmi	.+6      	; 0x171e <__fixunssfsi+0x22>
    1718:	ba 95       	dec	r27
    171a:	c9 f7       	brne	.-14     	; 0x170e <__fixunssfsi+0x12>
    171c:	12 c0       	rjmp	.+36     	; 0x1742 <__fixunssfsi+0x46>
    171e:	b1 30       	cpi	r27, 0x01	; 1
    1720:	81 f0       	breq	.+32     	; 0x1742 <__fixunssfsi+0x46>
    1722:	62 d0       	rcall	.+196    	; 0x17e8 <__fp_zero>
    1724:	b1 e0       	ldi	r27, 0x01	; 1
    1726:	08 95       	ret
    1728:	5f c0       	rjmp	.+190    	; 0x17e8 <__fp_zero>
    172a:	67 2f       	mov	r22, r23
    172c:	78 2f       	mov	r23, r24
    172e:	88 27       	eor	r24, r24
    1730:	b8 5f       	subi	r27, 0xF8	; 248
    1732:	39 f0       	breq	.+14     	; 0x1742 <__fixunssfsi+0x46>
    1734:	b9 3f       	cpi	r27, 0xF9	; 249
    1736:	cc f3       	brlt	.-14     	; 0x172a <__fixunssfsi+0x2e>
    1738:	86 95       	lsr	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	b3 95       	inc	r27
    1740:	d9 f7       	brne	.-10     	; 0x1738 <__fixunssfsi+0x3c>
    1742:	3e f4       	brtc	.+14     	; 0x1752 <__fixunssfsi+0x56>
    1744:	90 95       	com	r25
    1746:	80 95       	com	r24
    1748:	70 95       	com	r23
    174a:	61 95       	neg	r22
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	8f 4f       	sbci	r24, 0xFF	; 255
    1750:	9f 4f       	sbci	r25, 0xFF	; 255
    1752:	08 95       	ret

00001754 <__fp_inf>:
    1754:	97 f9       	bld	r25, 7
    1756:	9f 67       	ori	r25, 0x7F	; 127
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	08 95       	ret

00001760 <__fp_nan>:
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	80 ec       	ldi	r24, 0xC0	; 192
    1764:	08 95       	ret

00001766 <__fp_pscA>:
    1766:	00 24       	eor	r0, r0
    1768:	0a 94       	dec	r0
    176a:	16 16       	cp	r1, r22
    176c:	17 06       	cpc	r1, r23
    176e:	18 06       	cpc	r1, r24
    1770:	09 06       	cpc	r0, r25
    1772:	08 95       	ret

00001774 <__fp_pscB>:
    1774:	00 24       	eor	r0, r0
    1776:	0a 94       	dec	r0
    1778:	12 16       	cp	r1, r18
    177a:	13 06       	cpc	r1, r19
    177c:	14 06       	cpc	r1, r20
    177e:	05 06       	cpc	r0, r21
    1780:	08 95       	ret

00001782 <__fp_round>:
    1782:	09 2e       	mov	r0, r25
    1784:	03 94       	inc	r0
    1786:	00 0c       	add	r0, r0
    1788:	11 f4       	brne	.+4      	; 0x178e <__fp_round+0xc>
    178a:	88 23       	and	r24, r24
    178c:	52 f0       	brmi	.+20     	; 0x17a2 <__fp_round+0x20>
    178e:	bb 0f       	add	r27, r27
    1790:	40 f4       	brcc	.+16     	; 0x17a2 <__fp_round+0x20>
    1792:	bf 2b       	or	r27, r31
    1794:	11 f4       	brne	.+4      	; 0x179a <__fp_round+0x18>
    1796:	60 ff       	sbrs	r22, 0
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <__fp_round+0x20>
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	08 95       	ret

000017a4 <__fp_split3>:
    17a4:	57 fd       	sbrc	r21, 7
    17a6:	90 58       	subi	r25, 0x80	; 128
    17a8:	44 0f       	add	r20, r20
    17aa:	55 1f       	adc	r21, r21
    17ac:	59 f0       	breq	.+22     	; 0x17c4 <__fp_splitA+0x10>
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	71 f0       	breq	.+28     	; 0x17ce <__fp_splitA+0x1a>
    17b2:	47 95       	ror	r20

000017b4 <__fp_splitA>:
    17b4:	88 0f       	add	r24, r24
    17b6:	97 fb       	bst	r25, 7
    17b8:	99 1f       	adc	r25, r25
    17ba:	61 f0       	breq	.+24     	; 0x17d4 <__fp_splitA+0x20>
    17bc:	9f 3f       	cpi	r25, 0xFF	; 255
    17be:	79 f0       	breq	.+30     	; 0x17de <__fp_splitA+0x2a>
    17c0:	87 95       	ror	r24
    17c2:	08 95       	ret
    17c4:	12 16       	cp	r1, r18
    17c6:	13 06       	cpc	r1, r19
    17c8:	14 06       	cpc	r1, r20
    17ca:	55 1f       	adc	r21, r21
    17cc:	f2 cf       	rjmp	.-28     	; 0x17b2 <__fp_split3+0xe>
    17ce:	46 95       	lsr	r20
    17d0:	f1 df       	rcall	.-30     	; 0x17b4 <__fp_splitA>
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <__fp_splitA+0x30>
    17d4:	16 16       	cp	r1, r22
    17d6:	17 06       	cpc	r1, r23
    17d8:	18 06       	cpc	r1, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	f1 cf       	rjmp	.-30     	; 0x17c0 <__fp_splitA+0xc>
    17de:	86 95       	lsr	r24
    17e0:	71 05       	cpc	r23, r1
    17e2:	61 05       	cpc	r22, r1
    17e4:	08 94       	sec
    17e6:	08 95       	ret

000017e8 <__fp_zero>:
    17e8:	e8 94       	clt

000017ea <__fp_szero>:
    17ea:	bb 27       	eor	r27, r27
    17ec:	66 27       	eor	r22, r22
    17ee:	77 27       	eor	r23, r23
    17f0:	cb 01       	movw	r24, r22
    17f2:	97 f9       	bld	r25, 7
    17f4:	08 95       	ret

000017f6 <__mulsf3>:
    17f6:	0b d0       	rcall	.+22     	; 0x180e <__mulsf3x>
    17f8:	c4 cf       	rjmp	.-120    	; 0x1782 <__fp_round>
    17fa:	b5 df       	rcall	.-150    	; 0x1766 <__fp_pscA>
    17fc:	28 f0       	brcs	.+10     	; 0x1808 <__mulsf3+0x12>
    17fe:	ba df       	rcall	.-140    	; 0x1774 <__fp_pscB>
    1800:	18 f0       	brcs	.+6      	; 0x1808 <__mulsf3+0x12>
    1802:	95 23       	and	r25, r21
    1804:	09 f0       	breq	.+2      	; 0x1808 <__mulsf3+0x12>
    1806:	a6 cf       	rjmp	.-180    	; 0x1754 <__fp_inf>
    1808:	ab cf       	rjmp	.-170    	; 0x1760 <__fp_nan>
    180a:	11 24       	eor	r1, r1
    180c:	ee cf       	rjmp	.-36     	; 0x17ea <__fp_szero>

0000180e <__mulsf3x>:
    180e:	ca df       	rcall	.-108    	; 0x17a4 <__fp_split3>
    1810:	a0 f3       	brcs	.-24     	; 0x17fa <__mulsf3+0x4>

00001812 <__mulsf3_pse>:
    1812:	95 9f       	mul	r25, r21
    1814:	d1 f3       	breq	.-12     	; 0x180a <__mulsf3+0x14>
    1816:	95 0f       	add	r25, r21
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	55 1f       	adc	r21, r21
    181c:	62 9f       	mul	r22, r18
    181e:	f0 01       	movw	r30, r0
    1820:	72 9f       	mul	r23, r18
    1822:	bb 27       	eor	r27, r27
    1824:	f0 0d       	add	r31, r0
    1826:	b1 1d       	adc	r27, r1
    1828:	63 9f       	mul	r22, r19
    182a:	aa 27       	eor	r26, r26
    182c:	f0 0d       	add	r31, r0
    182e:	b1 1d       	adc	r27, r1
    1830:	aa 1f       	adc	r26, r26
    1832:	64 9f       	mul	r22, r20
    1834:	66 27       	eor	r22, r22
    1836:	b0 0d       	add	r27, r0
    1838:	a1 1d       	adc	r26, r1
    183a:	66 1f       	adc	r22, r22
    183c:	82 9f       	mul	r24, r18
    183e:	22 27       	eor	r18, r18
    1840:	b0 0d       	add	r27, r0
    1842:	a1 1d       	adc	r26, r1
    1844:	62 1f       	adc	r22, r18
    1846:	73 9f       	mul	r23, r19
    1848:	b0 0d       	add	r27, r0
    184a:	a1 1d       	adc	r26, r1
    184c:	62 1f       	adc	r22, r18
    184e:	83 9f       	mul	r24, r19
    1850:	a0 0d       	add	r26, r0
    1852:	61 1d       	adc	r22, r1
    1854:	22 1f       	adc	r18, r18
    1856:	74 9f       	mul	r23, r20
    1858:	33 27       	eor	r19, r19
    185a:	a0 0d       	add	r26, r0
    185c:	61 1d       	adc	r22, r1
    185e:	23 1f       	adc	r18, r19
    1860:	84 9f       	mul	r24, r20
    1862:	60 0d       	add	r22, r0
    1864:	21 1d       	adc	r18, r1
    1866:	82 2f       	mov	r24, r18
    1868:	76 2f       	mov	r23, r22
    186a:	6a 2f       	mov	r22, r26
    186c:	11 24       	eor	r1, r1
    186e:	9f 57       	subi	r25, 0x7F	; 127
    1870:	50 40       	sbci	r21, 0x00	; 0
    1872:	8a f0       	brmi	.+34     	; 0x1896 <__mulsf3_pse+0x84>
    1874:	e1 f0       	breq	.+56     	; 0x18ae <__mulsf3_pse+0x9c>
    1876:	88 23       	and	r24, r24
    1878:	4a f0       	brmi	.+18     	; 0x188c <__mulsf3_pse+0x7a>
    187a:	ee 0f       	add	r30, r30
    187c:	ff 1f       	adc	r31, r31
    187e:	bb 1f       	adc	r27, r27
    1880:	66 1f       	adc	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	88 1f       	adc	r24, r24
    1886:	91 50       	subi	r25, 0x01	; 1
    1888:	50 40       	sbci	r21, 0x00	; 0
    188a:	a9 f7       	brne	.-22     	; 0x1876 <__mulsf3_pse+0x64>
    188c:	9e 3f       	cpi	r25, 0xFE	; 254
    188e:	51 05       	cpc	r21, r1
    1890:	70 f0       	brcs	.+28     	; 0x18ae <__mulsf3_pse+0x9c>
    1892:	60 cf       	rjmp	.-320    	; 0x1754 <__fp_inf>
    1894:	aa cf       	rjmp	.-172    	; 0x17ea <__fp_szero>
    1896:	5f 3f       	cpi	r21, 0xFF	; 255
    1898:	ec f3       	brlt	.-6      	; 0x1894 <__mulsf3_pse+0x82>
    189a:	98 3e       	cpi	r25, 0xE8	; 232
    189c:	dc f3       	brlt	.-10     	; 0x1894 <__mulsf3_pse+0x82>
    189e:	86 95       	lsr	r24
    18a0:	77 95       	ror	r23
    18a2:	67 95       	ror	r22
    18a4:	b7 95       	ror	r27
    18a6:	f7 95       	ror	r31
    18a8:	e7 95       	ror	r30
    18aa:	9f 5f       	subi	r25, 0xFF	; 255
    18ac:	c1 f7       	brne	.-16     	; 0x189e <__mulsf3_pse+0x8c>
    18ae:	fe 2b       	or	r31, r30
    18b0:	88 0f       	add	r24, r24
    18b2:	91 1d       	adc	r25, r1
    18b4:	96 95       	lsr	r25
    18b6:	87 95       	ror	r24
    18b8:	97 f9       	bld	r25, 7
    18ba:	08 95       	ret

000018bc <__divmodhi4>:
    18bc:	97 fb       	bst	r25, 7
    18be:	09 2e       	mov	r0, r25
    18c0:	07 26       	eor	r0, r23
    18c2:	0a d0       	rcall	.+20     	; 0x18d8 <__divmodhi4_neg1>
    18c4:	77 fd       	sbrc	r23, 7
    18c6:	04 d0       	rcall	.+8      	; 0x18d0 <__divmodhi4_neg2>
    18c8:	2e d0       	rcall	.+92     	; 0x1926 <__udivmodhi4>
    18ca:	06 d0       	rcall	.+12     	; 0x18d8 <__divmodhi4_neg1>
    18cc:	00 20       	and	r0, r0
    18ce:	1a f4       	brpl	.+6      	; 0x18d6 <__divmodhi4_exit>

000018d0 <__divmodhi4_neg2>:
    18d0:	70 95       	com	r23
    18d2:	61 95       	neg	r22
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255

000018d6 <__divmodhi4_exit>:
    18d6:	08 95       	ret

000018d8 <__divmodhi4_neg1>:
    18d8:	f6 f7       	brtc	.-4      	; 0x18d6 <__divmodhi4_exit>
    18da:	90 95       	com	r25
    18dc:	81 95       	neg	r24
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	08 95       	ret

000018e2 <__udivmodsi4>:
    18e2:	a1 e2       	ldi	r26, 0x21	; 33
    18e4:	1a 2e       	mov	r1, r26
    18e6:	aa 1b       	sub	r26, r26
    18e8:	bb 1b       	sub	r27, r27
    18ea:	fd 01       	movw	r30, r26
    18ec:	0d c0       	rjmp	.+26     	; 0x1908 <__udivmodsi4_ep>

000018ee <__udivmodsi4_loop>:
    18ee:	aa 1f       	adc	r26, r26
    18f0:	bb 1f       	adc	r27, r27
    18f2:	ee 1f       	adc	r30, r30
    18f4:	ff 1f       	adc	r31, r31
    18f6:	a2 17       	cp	r26, r18
    18f8:	b3 07       	cpc	r27, r19
    18fa:	e4 07       	cpc	r30, r20
    18fc:	f5 07       	cpc	r31, r21
    18fe:	20 f0       	brcs	.+8      	; 0x1908 <__udivmodsi4_ep>
    1900:	a2 1b       	sub	r26, r18
    1902:	b3 0b       	sbc	r27, r19
    1904:	e4 0b       	sbc	r30, r20
    1906:	f5 0b       	sbc	r31, r21

00001908 <__udivmodsi4_ep>:
    1908:	66 1f       	adc	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	1a 94       	dec	r1
    1912:	69 f7       	brne	.-38     	; 0x18ee <__udivmodsi4_loop>
    1914:	60 95       	com	r22
    1916:	70 95       	com	r23
    1918:	80 95       	com	r24
    191a:	90 95       	com	r25
    191c:	9b 01       	movw	r18, r22
    191e:	ac 01       	movw	r20, r24
    1920:	bd 01       	movw	r22, r26
    1922:	cf 01       	movw	r24, r30
    1924:	08 95       	ret

00001926 <__udivmodhi4>:
    1926:	aa 1b       	sub	r26, r26
    1928:	bb 1b       	sub	r27, r27
    192a:	51 e1       	ldi	r21, 0x11	; 17
    192c:	07 c0       	rjmp	.+14     	; 0x193c <__udivmodhi4_ep>

0000192e <__udivmodhi4_loop>:
    192e:	aa 1f       	adc	r26, r26
    1930:	bb 1f       	adc	r27, r27
    1932:	a6 17       	cp	r26, r22
    1934:	b7 07       	cpc	r27, r23
    1936:	10 f0       	brcs	.+4      	; 0x193c <__udivmodhi4_ep>
    1938:	a6 1b       	sub	r26, r22
    193a:	b7 0b       	sbc	r27, r23

0000193c <__udivmodhi4_ep>:
    193c:	88 1f       	adc	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	5a 95       	dec	r21
    1942:	a9 f7       	brne	.-22     	; 0x192e <__udivmodhi4_loop>
    1944:	80 95       	com	r24
    1946:	90 95       	com	r25
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	08 95       	ret

0000194e <_exit>:
    194e:	f8 94       	cli

00001950 <__stop_program>:
    1950:	ff cf       	rjmp	.-2      	; 0x1950 <__stop_program>
