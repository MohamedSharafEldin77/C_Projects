
Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00001a48  00001adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080009c  0080009c  00001b18  2**0
                  ALLOC
  3 .stab         00001ba8  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00003c48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac2  00000000  00000000  00003e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085f  00000000  00000000  000058ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f17  00000000  00000000  00006149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00007060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000612  00000000  00000000  00007590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000127d  00000000  00000000  00007ba2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 07 	call	0xeaa	; 0xeaa <main>
      8a:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_INIT>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void ADC_INIT (void)
{
	SET_BIT(ADMUX,REFS0);
      92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);//for 1 1 to get 2.56v internal
      94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADCSRA,ADEN);
      96:	37 9a       	sbi	0x06, 7	; 6
	//set the clock generated to the ADC
	SET_BIT(ADCSRA,ADPS1);
      98:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADPS2);
      9a:	32 9a       	sbi	0x06, 2	; 6
}
      9c:	08 95       	ret

0000009e <ADC_read>:
unsigned short ADC_read (void)
{
	unsigned short read_value;
	SET_BIT(ADCSRA,ADSC);
      9e:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);
      a0:	36 99       	sbic	0x06, 6	; 6
      a2:	fe cf       	rjmp	.-4      	; 0xa0 <ADC_read+0x2>
	/*while(READ_BIT(ADCSRA,ADIF)==0);
	SET_BIT(ADCSRA,ADIF);//clear ADIF*/
	read_value=ADCL;
      a4:	84 b1       	in	r24, 0x04	; 4
      a6:	90 e0       	ldi	r25, 0x00	; 0
	read_value|=(ADCH<<8);
      a8:	45 b1       	in	r20, 0x05	; 5
      aa:	34 2f       	mov	r19, r20
      ac:	20 e0       	ldi	r18, 0x00	; 0
      ae:	82 2b       	or	r24, r18
      b0:	93 2b       	or	r25, r19
	return read_value;
      b2:	08 95       	ret

000000b4 <UART_INIT>:
#include "DIO.h"
//#define 


void UART_INIT (unsigned long baud)
{
      b4:	dc 01       	movw	r26, r24
      b6:	cb 01       	movw	r24, r22
	unsigned short UBRR;
	UBRR=(F_CPU/(16*baud))-1;
      b8:	88 0f       	add	r24, r24
      ba:	99 1f       	adc	r25, r25
      bc:	aa 1f       	adc	r26, r26
      be:	bb 1f       	adc	r27, r27
      c0:	88 0f       	add	r24, r24
      c2:	99 1f       	adc	r25, r25
      c4:	aa 1f       	adc	r26, r26
      c6:	bb 1f       	adc	r27, r27
      c8:	9c 01       	movw	r18, r24
      ca:	ad 01       	movw	r20, r26
      cc:	22 0f       	add	r18, r18
      ce:	33 1f       	adc	r19, r19
      d0:	44 1f       	adc	r20, r20
      d2:	55 1f       	adc	r21, r21
      d4:	22 0f       	add	r18, r18
      d6:	33 1f       	adc	r19, r19
      d8:	44 1f       	adc	r20, r20
      da:	55 1f       	adc	r21, r21
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	72 e1       	ldi	r23, 0x12	; 18
      e0:	8a e7       	ldi	r24, 0x7A	; 122
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__udivmodsi4>
      e8:	21 50       	subi	r18, 0x01	; 1
      ea:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(unsigned char)(UBRR>>8);
      ec:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)(UBRR);//choosing the baud speed from the equation
      ee:	29 b9       	out	0x09, r18	; 9
	
	UCSRB|=(1<<RXEN)|(1<<TXEN);//enable the RX , TX in UCSRB
      f0:	8a b1       	in	r24, 0x0a	; 10
      f2:	88 61       	ori	r24, 0x18	; 24
      f4:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//setting the 8-bit character size with URSEL to choose UCSRC
      f6:	80 b5       	in	r24, 0x20	; 32
      f8:	86 68       	ori	r24, 0x86	; 134
      fa:	80 bd       	out	0x20, r24	; 32
}
      fc:	08 95       	ret

000000fe <UART_send_data>:
void UART_send_data (char data)
{
	while (READ_BIT(UCSRA,UDRE)==0);//waiting data register empty bit to be 1 so it is clear to write
      fe:	5d 9b       	sbis	0x0b, 5	; 11
     100:	fe cf       	rjmp	.-4      	; 0xfe <UART_send_data>
	UDR=data;//writing
     102:	8c b9       	out	0x0c, r24	; 12
}
     104:	08 95       	ret

00000106 <UART_receive_data>:
char UART_receive_data (void)
{
	while (READ_BIT(UCSRA,RXC)==0);
     106:	5f 9b       	sbis	0x0b, 7	; 11
     108:	fe cf       	rjmp	.-4      	; 0x106 <UART_receive_data>
	return UDR;
     10a:	8c b1       	in	r24, 0x0c	; 12
}
     10c:	08 95       	ret

0000010e <UART_send_string>:
void UART_send_string (char *ptr)
{
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ec 01       	movw	r28, r24
	while (*ptr!=0)
     114:	88 81       	ld	r24, Y
     116:	88 23       	and	r24, r24
     118:	79 f0       	breq	.+30     	; 0x138 <UART_send_string+0x2a>
char UART_receive_data (void)
{
	while (READ_BIT(UCSRA,RXC)==0);
	return UDR;
}
void UART_send_string (char *ptr)
     11a:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		UART_send_data(*ptr);
     11c:	0e 94 7f 00 	call	0xfe	; 0xfe <UART_send_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     120:	8f e7       	ldi	r24, 0x7F	; 127
     122:	98 e3       	ldi	r25, 0x38	; 56
     124:	a1 e0       	ldi	r26, 0x01	; 1
     126:	81 50       	subi	r24, 0x01	; 1
     128:	90 40       	sbci	r25, 0x00	; 0
     12a:	a0 40       	sbci	r26, 0x00	; 0
     12c:	e1 f7       	brne	.-8      	; 0x126 <UART_send_string+0x18>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <UART_send_string+0x22>
     130:	00 00       	nop
	while (READ_BIT(UCSRA,RXC)==0);
	return UDR;
}
void UART_send_string (char *ptr)
{
	while (*ptr!=0)
     132:	89 91       	ld	r24, Y+
     134:	88 23       	and	r24, r24
     136:	91 f7       	brne	.-28     	; 0x11c <UART_send_string+0xe>
	{
		UART_send_data(*ptr);
		ptr++;
		_delay_ms(50);
	}
}
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <SPI_MASTER_INIT>:
void SPI_MASTER_INIT (void)
{
	DIO_set_PIN_dir('b',4,1);//SS
     13e:	82 e6       	ldi	r24, 0x62	; 98
     140:	64 e0       	ldi	r22, 0x04	; 4
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',5,1);//MOSI
     148:	82 e6       	ldi	r24, 0x62	; 98
     14a:	65 e0       	ldi	r22, 0x05	; 5
     14c:	41 e0       	ldi	r20, 0x01	; 1
     14e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',6,0);//MISO
     152:	82 e6       	ldi	r24, 0x62	; 98
     154:	66 e0       	ldi	r22, 0x06	; 6
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',7,1);//SCK
     15c:	82 e6       	ldi	r24, 0x62	; 98
     15e:	67 e0       	ldi	r22, 0x07	; 7
     160:	41 e0       	ldi	r20, 0x01	; 1
     162:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	SET_BIT(SPCR,MSTR);//enable Master
     166:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPE);//set SPE to enable the SPI
     168:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_output_PIN_on_port('b',4,1);//SS to logic high (idle)
     16a:	82 e6       	ldi	r24, 0x62	; 98
     16c:	64 e0       	ldi	r22, 0x04	; 4
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
}
     174:	08 95       	ret

00000176 <SPI_SLAVE_INIT>:
void SPI_SLAVE_INIT (void)
{
	SET_BIT(SPCR,SPE);//set SPE to enable the SPI
     176:	6e 9a       	sbi	0x0d, 6	; 13
	SET_BIT(SPCR,SPIE);//set SPIE to enable the Interrupt
     178:	6f 9a       	sbi	0x0d, 7	; 13
	DIO_set_PIN_dir('b',6,1);//Set MISO output
     17a:	82 e6       	ldi	r24, 0x62	; 98
     17c:	66 e0       	ldi	r22, 0x06	; 6
     17e:	41 e0       	ldi	r20, 0x01	; 1
     180:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
}
     184:	08 95       	ret

00000186 <SPI_MASTER_Transmit_char>:
unsigned char SPI_MASTER_Transmit_char (unsigned char data,unsigned char slave_SS)
{
     186:	cf 93       	push	r28
     188:	c8 2f       	mov	r28, r24
	DIO_output_PIN_on_port('b',slave_SS,0);
     18a:	82 e6       	ldi	r24, 0x62	; 98
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
	SPDR=data;//put the data into SPDR to be transmitted
     192:	cf b9       	out	0x0f, r28	; 15
	while (READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
     194:	77 9b       	sbis	0x0e, 7	; 14
     196:	fe cf       	rjmp	.-4      	; 0x194 <SPI_MASTER_Transmit_char+0xe>
	return SPDR;
     198:	8f b1       	in	r24, 0x0f	; 15
}
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <SPI_SLAVE_recieve_char>:
unsigned char SPI_SLAVE_recieve_char (unsigned char data)
{
	SPDR=data;
     19e:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
     1a0:	77 9b       	sbis	0x0e, 7	; 14
     1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <SPI_SLAVE_recieve_char+0x2>
	return SPDR;
     1a4:	8f b1       	in	r24, 0x0f	; 15
}
     1a6:	08 95       	ret

000001a8 <SPI_MASTER_Transmit_string>:
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
{
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	ec 01       	movw	r28, r24
     1b0:	16 2f       	mov	r17, r22
	while ((*ptr)!=0)
     1b2:	88 81       	ld	r24, Y
     1b4:	88 23       	and	r24, r24
     1b6:	81 f0       	breq	.+32     	; 0x1d8 <SPI_MASTER_Transmit_string+0x30>
{
	SPDR=data;
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
	return SPDR;
}
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
     1b8:	21 96       	adiw	r28, 0x01	; 1
{
	while ((*ptr)!=0)
	{
		SPI_MASTER_Transmit_char(*ptr,slave_SS);
     1ba:	61 2f       	mov	r22, r17
     1bc:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_MASTER_Transmit_char>
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	92 e5       	ldi	r25, 0x52	; 82
     1c4:	a7 e0       	ldi	r26, 0x07	; 7
     1c6:	81 50       	subi	r24, 0x01	; 1
     1c8:	90 40       	sbci	r25, 0x00	; 0
     1ca:	a0 40       	sbci	r26, 0x00	; 0
     1cc:	e1 f7       	brne	.-8      	; 0x1c6 <SPI_MASTER_Transmit_string+0x1e>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <SPI_MASTER_Transmit_string+0x28>
     1d0:	00 00       	nop
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
	return SPDR;
}
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
{
	while ((*ptr)!=0)
     1d2:	89 91       	ld	r24, Y+
     1d4:	88 23       	and	r24, r24
     1d6:	89 f7       	brne	.-30     	; 0x1ba <SPI_MASTER_Transmit_string+0x12>
	{
		SPI_MASTER_Transmit_char(*ptr,slave_SS);
		_delay_ms(300);
		ptr++;
	}
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	08 95       	ret

000001e0 <DIO_set_PIN_dir>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void DIO_set_PIN_dir (unsigned char portname,unsigned char pin_number_0_7,unsigned char direction)
{
	switch (portname)
     1e0:	84 34       	cpi	r24, 0x44	; 68
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_set_PIN_dir+0x6>
     1e4:	71 c0       	rjmp	.+226    	; 0x2c8 <DIO_set_PIN_dir+0xe8>
     1e6:	85 34       	cpi	r24, 0x45	; 69
     1e8:	48 f4       	brcc	.+18     	; 0x1fc <DIO_set_PIN_dir+0x1c>
     1ea:	82 34       	cpi	r24, 0x42	; 66
     1ec:	99 f1       	breq	.+102    	; 0x254 <DIO_set_PIN_dir+0x74>
     1ee:	83 34       	cpi	r24, 0x43	; 67
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <DIO_set_PIN_dir+0x14>
     1f2:	4d c0       	rjmp	.+154    	; 0x28e <DIO_set_PIN_dir+0xae>
     1f4:	81 34       	cpi	r24, 0x41	; 65
     1f6:	09 f0       	breq	.+2      	; 0x1fa <DIO_set_PIN_dir+0x1a>
     1f8:	83 c0       	rjmp	.+262    	; 0x300 <DIO_set_PIN_dir+0x120>
     1fa:	0f c0       	rjmp	.+30     	; 0x21a <DIO_set_PIN_dir+0x3a>
     1fc:	82 36       	cpi	r24, 0x62	; 98
     1fe:	51 f1       	breq	.+84     	; 0x254 <DIO_set_PIN_dir+0x74>
     200:	83 36       	cpi	r24, 0x63	; 99
     202:	20 f4       	brcc	.+8      	; 0x20c <DIO_set_PIN_dir+0x2c>
     204:	81 36       	cpi	r24, 0x61	; 97
     206:	09 f0       	breq	.+2      	; 0x20a <DIO_set_PIN_dir+0x2a>
     208:	7b c0       	rjmp	.+246    	; 0x300 <DIO_set_PIN_dir+0x120>
     20a:	07 c0       	rjmp	.+14     	; 0x21a <DIO_set_PIN_dir+0x3a>
     20c:	83 36       	cpi	r24, 0x63	; 99
     20e:	09 f4       	brne	.+2      	; 0x212 <DIO_set_PIN_dir+0x32>
     210:	3e c0       	rjmp	.+124    	; 0x28e <DIO_set_PIN_dir+0xae>
     212:	84 36       	cpi	r24, 0x64	; 100
     214:	09 f0       	breq	.+2      	; 0x218 <DIO_set_PIN_dir+0x38>
     216:	74 c0       	rjmp	.+232    	; 0x300 <DIO_set_PIN_dir+0x120>
     218:	57 c0       	rjmp	.+174    	; 0x2c8 <DIO_set_PIN_dir+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
     21a:	41 30       	cpi	r20, 0x01	; 1
     21c:	69 f4       	brne	.+26     	; 0x238 <DIO_set_PIN_dir+0x58>
		{
			SET_BIT(DDRA,pin_number_0_7);
     21e:	2a b3       	in	r18, 0x1a	; 26
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	ac 01       	movw	r20, r24
     226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_set_PIN_dir+0x4c>
     228:	44 0f       	add	r20, r20
     22a:	55 1f       	adc	r21, r21
     22c:	6a 95       	dec	r22
     22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_set_PIN_dir+0x48>
     230:	ba 01       	movw	r22, r20
     232:	62 2b       	or	r22, r18
     234:	6a bb       	out	0x1a, r22	; 26
     236:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin_number_0_7);
     238:	2a b3       	in	r18, 0x1a	; 26
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	ac 01       	movw	r20, r24
     240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_set_PIN_dir+0x66>
     242:	44 0f       	add	r20, r20
     244:	55 1f       	adc	r21, r21
     246:	6a 95       	dec	r22
     248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_set_PIN_dir+0x62>
     24a:	ba 01       	movw	r22, r20
     24c:	60 95       	com	r22
     24e:	62 23       	and	r22, r18
     250:	6a bb       	out	0x1a, r22	; 26
     252:	08 95       	ret
		}
		break;
		//DDRA=dir==1?DDRA|(1<<pin):DDRA&~(1<<pin);
		case 'B':
		case 'b':
		if (direction==1)
     254:	41 30       	cpi	r20, 0x01	; 1
     256:	69 f4       	brne	.+26     	; 0x272 <DIO_set_PIN_dir+0x92>
		{
			SET_BIT(DDRB,pin_number_0_7);
     258:	27 b3       	in	r18, 0x17	; 23
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	ac 01       	movw	r20, r24
     260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_set_PIN_dir+0x86>
     262:	44 0f       	add	r20, r20
     264:	55 1f       	adc	r21, r21
     266:	6a 95       	dec	r22
     268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_set_PIN_dir+0x82>
     26a:	ba 01       	movw	r22, r20
     26c:	62 2b       	or	r22, r18
     26e:	67 bb       	out	0x17, r22	; 23
     270:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin_number_0_7);
     272:	27 b3       	in	r18, 0x17	; 23
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	ac 01       	movw	r20, r24
     27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_set_PIN_dir+0xa0>
     27c:	44 0f       	add	r20, r20
     27e:	55 1f       	adc	r21, r21
     280:	6a 95       	dec	r22
     282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_set_PIN_dir+0x9c>
     284:	ba 01       	movw	r22, r20
     286:	60 95       	com	r22
     288:	62 23       	and	r22, r18
     28a:	67 bb       	out	0x17, r22	; 23
     28c:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
     28e:	41 30       	cpi	r20, 0x01	; 1
     290:	69 f4       	brne	.+26     	; 0x2ac <DIO_set_PIN_dir+0xcc>
		{
			SET_BIT(DDRC,pin_number_0_7);
     292:	24 b3       	in	r18, 0x14	; 20
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	ac 01       	movw	r20, r24
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_set_PIN_dir+0xc0>
     29c:	44 0f       	add	r20, r20
     29e:	55 1f       	adc	r21, r21
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_set_PIN_dir+0xbc>
     2a4:	ba 01       	movw	r22, r20
     2a6:	62 2b       	or	r22, r18
     2a8:	64 bb       	out	0x14, r22	; 20
     2aa:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin_number_0_7);
     2ac:	24 b3       	in	r18, 0x14	; 20
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	ac 01       	movw	r20, r24
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_set_PIN_dir+0xda>
     2b6:	44 0f       	add	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_set_PIN_dir+0xd6>
     2be:	ba 01       	movw	r22, r20
     2c0:	60 95       	com	r22
     2c2:	62 23       	and	r22, r18
     2c4:	64 bb       	out	0x14, r22	; 20
     2c6:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (direction==1)
     2c8:	41 30       	cpi	r20, 0x01	; 1
     2ca:	69 f4       	brne	.+26     	; 0x2e6 <DIO_set_PIN_dir+0x106>
		{
			SET_BIT(DDRD,pin_number_0_7);
     2cc:	21 b3       	in	r18, 0x11	; 17
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	ac 01       	movw	r20, r24
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_set_PIN_dir+0xfa>
     2d6:	44 0f       	add	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	6a 95       	dec	r22
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_set_PIN_dir+0xf6>
     2de:	ba 01       	movw	r22, r20
     2e0:	62 2b       	or	r22, r18
     2e2:	61 bb       	out	0x11, r22	; 17
     2e4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin_number_0_7);
     2e6:	21 b3       	in	r18, 0x11	; 17
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	ac 01       	movw	r20, r24
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_set_PIN_dir+0x114>
     2f0:	44 0f       	add	r20, r20
     2f2:	55 1f       	adc	r21, r21
     2f4:	6a 95       	dec	r22
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_set_PIN_dir+0x110>
     2f8:	ba 01       	movw	r22, r20
     2fa:	60 95       	com	r22
     2fc:	62 23       	and	r22, r18
     2fe:	61 bb       	out	0x11, r22	; 17
     300:	08 95       	ret

00000302 <DIO_output_PIN_on_port>:
		break;
	}
}
void DIO_output_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7,unsigned char output)
{
	switch (portname)
     302:	84 34       	cpi	r24, 0x44	; 68
     304:	09 f4       	brne	.+2      	; 0x308 <DIO_output_PIN_on_port+0x6>
     306:	71 c0       	rjmp	.+226    	; 0x3ea <DIO_output_PIN_on_port+0xe8>
     308:	85 34       	cpi	r24, 0x45	; 69
     30a:	48 f4       	brcc	.+18     	; 0x31e <DIO_output_PIN_on_port+0x1c>
     30c:	82 34       	cpi	r24, 0x42	; 66
     30e:	99 f1       	breq	.+102    	; 0x376 <DIO_output_PIN_on_port+0x74>
     310:	83 34       	cpi	r24, 0x43	; 67
     312:	08 f0       	brcs	.+2      	; 0x316 <DIO_output_PIN_on_port+0x14>
     314:	4d c0       	rjmp	.+154    	; 0x3b0 <DIO_output_PIN_on_port+0xae>
     316:	81 34       	cpi	r24, 0x41	; 65
     318:	09 f0       	breq	.+2      	; 0x31c <DIO_output_PIN_on_port+0x1a>
     31a:	83 c0       	rjmp	.+262    	; 0x422 <DIO_output_PIN_on_port+0x120>
     31c:	0f c0       	rjmp	.+30     	; 0x33c <DIO_output_PIN_on_port+0x3a>
     31e:	82 36       	cpi	r24, 0x62	; 98
     320:	51 f1       	breq	.+84     	; 0x376 <DIO_output_PIN_on_port+0x74>
     322:	83 36       	cpi	r24, 0x63	; 99
     324:	20 f4       	brcc	.+8      	; 0x32e <DIO_output_PIN_on_port+0x2c>
     326:	81 36       	cpi	r24, 0x61	; 97
     328:	09 f0       	breq	.+2      	; 0x32c <DIO_output_PIN_on_port+0x2a>
     32a:	7b c0       	rjmp	.+246    	; 0x422 <DIO_output_PIN_on_port+0x120>
     32c:	07 c0       	rjmp	.+14     	; 0x33c <DIO_output_PIN_on_port+0x3a>
     32e:	83 36       	cpi	r24, 0x63	; 99
     330:	09 f4       	brne	.+2      	; 0x334 <DIO_output_PIN_on_port+0x32>
     332:	3e c0       	rjmp	.+124    	; 0x3b0 <DIO_output_PIN_on_port+0xae>
     334:	84 36       	cpi	r24, 0x64	; 100
     336:	09 f0       	breq	.+2      	; 0x33a <DIO_output_PIN_on_port+0x38>
     338:	74 c0       	rjmp	.+232    	; 0x422 <DIO_output_PIN_on_port+0x120>
     33a:	57 c0       	rjmp	.+174    	; 0x3ea <DIO_output_PIN_on_port+0xe8>
	{
		case 'A':
		case 'a':
		if (output==1)
     33c:	41 30       	cpi	r20, 0x01	; 1
     33e:	69 f4       	brne	.+26     	; 0x35a <DIO_output_PIN_on_port+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
     340:	2b b3       	in	r18, 0x1b	; 27
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	ac 01       	movw	r20, r24
     348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_output_PIN_on_port+0x4c>
     34a:	44 0f       	add	r20, r20
     34c:	55 1f       	adc	r21, r21
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_output_PIN_on_port+0x48>
     352:	ba 01       	movw	r22, r20
     354:	62 2b       	or	r22, r18
     356:	6b bb       	out	0x1b, r22	; 27
     358:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
     35a:	2b b3       	in	r18, 0x1b	; 27
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	ac 01       	movw	r20, r24
     362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_output_PIN_on_port+0x66>
     364:	44 0f       	add	r20, r20
     366:	55 1f       	adc	r21, r21
     368:	6a 95       	dec	r22
     36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_output_PIN_on_port+0x62>
     36c:	ba 01       	movw	r22, r20
     36e:	60 95       	com	r22
     370:	62 23       	and	r22, r18
     372:	6b bb       	out	0x1b, r22	; 27
     374:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (output==1)
     376:	41 30       	cpi	r20, 0x01	; 1
     378:	69 f4       	brne	.+26     	; 0x394 <DIO_output_PIN_on_port+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
     37a:	28 b3       	in	r18, 0x18	; 24
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	ac 01       	movw	r20, r24
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_output_PIN_on_port+0x86>
     384:	44 0f       	add	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_output_PIN_on_port+0x82>
     38c:	ba 01       	movw	r22, r20
     38e:	62 2b       	or	r22, r18
     390:	68 bb       	out	0x18, r22	; 24
     392:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
     394:	28 b3       	in	r18, 0x18	; 24
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	ac 01       	movw	r20, r24
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_output_PIN_on_port+0xa0>
     39e:	44 0f       	add	r20, r20
     3a0:	55 1f       	adc	r21, r21
     3a2:	6a 95       	dec	r22
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_output_PIN_on_port+0x9c>
     3a6:	ba 01       	movw	r22, r20
     3a8:	60 95       	com	r22
     3aa:	62 23       	and	r22, r18
     3ac:	68 bb       	out	0x18, r22	; 24
     3ae:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (output==1)
     3b0:	41 30       	cpi	r20, 0x01	; 1
     3b2:	69 f4       	brne	.+26     	; 0x3ce <DIO_output_PIN_on_port+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
     3b4:	25 b3       	in	r18, 0x15	; 21
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	ac 01       	movw	r20, r24
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_output_PIN_on_port+0xc0>
     3be:	44 0f       	add	r20, r20
     3c0:	55 1f       	adc	r21, r21
     3c2:	6a 95       	dec	r22
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_output_PIN_on_port+0xbc>
     3c6:	ba 01       	movw	r22, r20
     3c8:	62 2b       	or	r22, r18
     3ca:	65 bb       	out	0x15, r22	; 21
     3cc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
     3ce:	25 b3       	in	r18, 0x15	; 21
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	ac 01       	movw	r20, r24
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_output_PIN_on_port+0xda>
     3d8:	44 0f       	add	r20, r20
     3da:	55 1f       	adc	r21, r21
     3dc:	6a 95       	dec	r22
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_output_PIN_on_port+0xd6>
     3e0:	ba 01       	movw	r22, r20
     3e2:	60 95       	com	r22
     3e4:	62 23       	and	r22, r18
     3e6:	65 bb       	out	0x15, r22	; 21
     3e8:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (output==1)
     3ea:	41 30       	cpi	r20, 0x01	; 1
     3ec:	69 f4       	brne	.+26     	; 0x408 <DIO_output_PIN_on_port+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
     3ee:	22 b3       	in	r18, 0x12	; 18
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	ac 01       	movw	r20, r24
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_output_PIN_on_port+0xfa>
     3f8:	44 0f       	add	r20, r20
     3fa:	55 1f       	adc	r21, r21
     3fc:	6a 95       	dec	r22
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_output_PIN_on_port+0xf6>
     400:	ba 01       	movw	r22, r20
     402:	62 2b       	or	r22, r18
     404:	62 bb       	out	0x12, r22	; 18
     406:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
     408:	22 b3       	in	r18, 0x12	; 18
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	ac 01       	movw	r20, r24
     410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_output_PIN_on_port+0x114>
     412:	44 0f       	add	r20, r20
     414:	55 1f       	adc	r21, r21
     416:	6a 95       	dec	r22
     418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_output_PIN_on_port+0x110>
     41a:	ba 01       	movw	r22, r20
     41c:	60 95       	com	r22
     41e:	62 23       	and	r22, r18
     420:	62 bb       	out	0x12, r22	; 18
     422:	08 95       	ret

00000424 <DIO_Toggle_PIN_on_port>:
		break;
	}
}
void DIO_Toggle_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7)
{
	switch (portname)
     424:	84 34       	cpi	r24, 0x44	; 68
     426:	09 f4       	brne	.+2      	; 0x42a <DIO_Toggle_PIN_on_port+0x6>
     428:	3d c0       	rjmp	.+122    	; 0x4a4 <DIO_Toggle_PIN_on_port+0x80>
     42a:	85 34       	cpi	r24, 0x45	; 69
     42c:	40 f4       	brcc	.+16     	; 0x43e <DIO_Toggle_PIN_on_port+0x1a>
     42e:	82 34       	cpi	r24, 0x42	; 66
     430:	f9 f0       	breq	.+62     	; 0x470 <DIO_Toggle_PIN_on_port+0x4c>
     432:	83 34       	cpi	r24, 0x43	; 67
     434:	50 f5       	brcc	.+84     	; 0x48a <DIO_Toggle_PIN_on_port+0x66>
     436:	81 34       	cpi	r24, 0x41	; 65
     438:	09 f0       	breq	.+2      	; 0x43c <DIO_Toggle_PIN_on_port+0x18>
     43a:	40 c0       	rjmp	.+128    	; 0x4bc <DIO_Toggle_PIN_on_port+0x98>
     43c:	0c c0       	rjmp	.+24     	; 0x456 <DIO_Toggle_PIN_on_port+0x32>
     43e:	82 36       	cpi	r24, 0x62	; 98
     440:	b9 f0       	breq	.+46     	; 0x470 <DIO_Toggle_PIN_on_port+0x4c>
     442:	83 36       	cpi	r24, 0x63	; 99
     444:	18 f4       	brcc	.+6      	; 0x44c <DIO_Toggle_PIN_on_port+0x28>
     446:	81 36       	cpi	r24, 0x61	; 97
     448:	c9 f5       	brne	.+114    	; 0x4bc <DIO_Toggle_PIN_on_port+0x98>
     44a:	05 c0       	rjmp	.+10     	; 0x456 <DIO_Toggle_PIN_on_port+0x32>
     44c:	83 36       	cpi	r24, 0x63	; 99
     44e:	e9 f0       	breq	.+58     	; 0x48a <DIO_Toggle_PIN_on_port+0x66>
     450:	84 36       	cpi	r24, 0x64	; 100
     452:	a1 f5       	brne	.+104    	; 0x4bc <DIO_Toggle_PIN_on_port+0x98>
     454:	27 c0       	rjmp	.+78     	; 0x4a4 <DIO_Toggle_PIN_on_port+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,pin_number_0_7);
     456:	2b b3       	in	r18, 0x1b	; 27
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	ac 01       	movw	r20, r24
     45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_Toggle_PIN_on_port+0x40>
     460:	44 0f       	add	r20, r20
     462:	55 1f       	adc	r21, r21
     464:	6a 95       	dec	r22
     466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_Toggle_PIN_on_port+0x3c>
     468:	ba 01       	movw	r22, r20
     46a:	62 27       	eor	r22, r18
     46c:	6b bb       	out	0x1b, r22	; 27
		break;
     46e:	08 95       	ret
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,pin_number_0_7);
     470:	28 b3       	in	r18, 0x18	; 24
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	ac 01       	movw	r20, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_Toggle_PIN_on_port+0x5a>
     47a:	44 0f       	add	r20, r20
     47c:	55 1f       	adc	r21, r21
     47e:	6a 95       	dec	r22
     480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_Toggle_PIN_on_port+0x56>
     482:	ba 01       	movw	r22, r20
     484:	62 27       	eor	r22, r18
     486:	68 bb       	out	0x18, r22	; 24
		break;
     488:	08 95       	ret
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,pin_number_0_7);
     48a:	25 b3       	in	r18, 0x15	; 21
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	ac 01       	movw	r20, r24
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_Toggle_PIN_on_port+0x74>
     494:	44 0f       	add	r20, r20
     496:	55 1f       	adc	r21, r21
     498:	6a 95       	dec	r22
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_Toggle_PIN_on_port+0x70>
     49c:	ba 01       	movw	r22, r20
     49e:	62 27       	eor	r22, r18
     4a0:	65 bb       	out	0x15, r22	; 21
		break;
     4a2:	08 95       	ret
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,pin_number_0_7);
     4a4:	22 b3       	in	r18, 0x12	; 18
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	ac 01       	movw	r20, r24
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <DIO_Toggle_PIN_on_port+0x8e>
     4ae:	44 0f       	add	r20, r20
     4b0:	55 1f       	adc	r21, r21
     4b2:	6a 95       	dec	r22
     4b4:	e2 f7       	brpl	.-8      	; 0x4ae <DIO_Toggle_PIN_on_port+0x8a>
     4b6:	ba 01       	movw	r22, r20
     4b8:	62 27       	eor	r22, r18
     4ba:	62 bb       	out	0x12, r22	; 18
     4bc:	08 95       	ret

000004be <DIO_READ_PIN>:
	}
}
unsigned char DIO_READ_PIN (unsigned char portname,unsigned char pin_number_0_7)
{
	unsigned char val;
	switch (portname)
     4be:	84 34       	cpi	r24, 0x44	; 68
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <DIO_READ_PIN+0x6>
     4c2:	51 c0       	rjmp	.+162    	; 0x566 <DIO_READ_PIN+0xa8>
     4c4:	85 34       	cpi	r24, 0x45	; 69
     4c6:	40 f4       	brcc	.+16     	; 0x4d8 <DIO_READ_PIN+0x1a>
     4c8:	82 34       	cpi	r24, 0x42	; 66
     4ca:	39 f1       	breq	.+78     	; 0x51a <DIO_READ_PIN+0x5c>
     4cc:	83 34       	cpi	r24, 0x43	; 67
     4ce:	c0 f5       	brcc	.+112    	; 0x540 <DIO_READ_PIN+0x82>
     4d0:	81 34       	cpi	r24, 0x41	; 65
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <DIO_READ_PIN+0x18>
     4d4:	5a c0       	rjmp	.+180    	; 0x58a <DIO_READ_PIN+0xcc>
     4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <DIO_READ_PIN+0x36>
     4d8:	82 36       	cpi	r24, 0x62	; 98
     4da:	f9 f0       	breq	.+62     	; 0x51a <DIO_READ_PIN+0x5c>
     4dc:	83 36       	cpi	r24, 0x63	; 99
     4de:	20 f4       	brcc	.+8      	; 0x4e8 <DIO_READ_PIN+0x2a>
     4e0:	81 36       	cpi	r24, 0x61	; 97
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <DIO_READ_PIN+0x28>
     4e4:	52 c0       	rjmp	.+164    	; 0x58a <DIO_READ_PIN+0xcc>
     4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <DIO_READ_PIN+0x36>
     4e8:	83 36       	cpi	r24, 0x63	; 99
     4ea:	51 f1       	breq	.+84     	; 0x540 <DIO_READ_PIN+0x82>
     4ec:	84 36       	cpi	r24, 0x64	; 100
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <DIO_READ_PIN+0x34>
     4f0:	4c c0       	rjmp	.+152    	; 0x58a <DIO_READ_PIN+0xcc>
     4f2:	39 c0       	rjmp	.+114    	; 0x566 <DIO_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pin_number_0_7);
     4f4:	29 b3       	in	r18, 0x19	; 25
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	06 2e       	mov	r0, r22
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_READ_PIN+0x44>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_READ_PIN+0x40>
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	82 23       	and	r24, r18
     50a:	93 23       	and	r25, r19
     50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_READ_PIN+0x54>
     50e:	96 95       	lsr	r25
     510:	87 95       	ror	r24
     512:	6a 95       	dec	r22
     514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_READ_PIN+0x50>
     516:	98 2f       	mov	r25, r24
		break;
     518:	38 c0       	rjmp	.+112    	; 0x58a <DIO_READ_PIN+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin_number_0_7);
     51a:	26 b3       	in	r18, 0x16	; 22
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	06 2e       	mov	r0, r22
     522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_READ_PIN+0x6a>
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	0a 94       	dec	r0
     52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_READ_PIN+0x66>
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	82 23       	and	r24, r18
     530:	93 23       	and	r25, r19
     532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_READ_PIN+0x7a>
     534:	96 95       	lsr	r25
     536:	87 95       	ror	r24
     538:	6a 95       	dec	r22
     53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_READ_PIN+0x76>
     53c:	98 2f       	mov	r25, r24
		break;
     53e:	25 c0       	rjmp	.+74     	; 0x58a <DIO_READ_PIN+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin_number_0_7);
     540:	23 b3       	in	r18, 0x13	; 19
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	06 2e       	mov	r0, r22
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_READ_PIN+0x90>
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	0a 94       	dec	r0
     550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_READ_PIN+0x8c>
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	82 23       	and	r24, r18
     556:	93 23       	and	r25, r19
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_READ_PIN+0xa0>
     55a:	96 95       	lsr	r25
     55c:	87 95       	ror	r24
     55e:	6a 95       	dec	r22
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_READ_PIN+0x9c>
     562:	98 2f       	mov	r25, r24
		break;
     564:	12 c0       	rjmp	.+36     	; 0x58a <DIO_READ_PIN+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin_number_0_7);
     566:	20 b3       	in	r18, 0x10	; 16
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	06 2e       	mov	r0, r22
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_READ_PIN+0xb6>
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	0a 94       	dec	r0
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_READ_PIN+0xb2>
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	82 23       	and	r24, r18
     57c:	93 23       	and	r25, r19
     57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_READ_PIN+0xc6>
     580:	96 95       	lsr	r25
     582:	87 95       	ror	r24
     584:	6a 95       	dec	r22
     586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_READ_PIN+0xc2>
     588:	98 2f       	mov	r25, r24
		break;
		default:
		break;	
	}
	return val;
}
     58a:	89 2f       	mov	r24, r25
     58c:	08 95       	ret

0000058e <DIO_set_PORT_dir>:
void DIO_set_PORT_dir (unsigned char portname,unsigned char portvalue)
{
	switch (portname)
     58e:	84 34       	cpi	r24, 0x44	; 68
     590:	d9 f0       	breq	.+54     	; 0x5c8 <DIO_set_PORT_dir+0x3a>
     592:	85 34       	cpi	r24, 0x45	; 69
     594:	38 f4       	brcc	.+14     	; 0x5a4 <DIO_set_PORT_dir+0x16>
     596:	82 34       	cpi	r24, 0x42	; 66
     598:	99 f0       	breq	.+38     	; 0x5c0 <DIO_set_PORT_dir+0x32>
     59a:	83 34       	cpi	r24, 0x43	; 67
     59c:	98 f4       	brcc	.+38     	; 0x5c4 <DIO_set_PORT_dir+0x36>
     59e:	81 34       	cpi	r24, 0x41	; 65
     5a0:	a1 f4       	brne	.+40     	; 0x5ca <DIO_set_PORT_dir+0x3c>
     5a2:	0c c0       	rjmp	.+24     	; 0x5bc <DIO_set_PORT_dir+0x2e>
     5a4:	82 36       	cpi	r24, 0x62	; 98
     5a6:	61 f0       	breq	.+24     	; 0x5c0 <DIO_set_PORT_dir+0x32>
     5a8:	83 36       	cpi	r24, 0x63	; 99
     5aa:	18 f4       	brcc	.+6      	; 0x5b2 <DIO_set_PORT_dir+0x24>
     5ac:	81 36       	cpi	r24, 0x61	; 97
     5ae:	69 f4       	brne	.+26     	; 0x5ca <DIO_set_PORT_dir+0x3c>
     5b0:	05 c0       	rjmp	.+10     	; 0x5bc <DIO_set_PORT_dir+0x2e>
     5b2:	83 36       	cpi	r24, 0x63	; 99
     5b4:	39 f0       	breq	.+14     	; 0x5c4 <DIO_set_PORT_dir+0x36>
     5b6:	84 36       	cpi	r24, 0x64	; 100
     5b8:	41 f4       	brne	.+16     	; 0x5ca <DIO_set_PORT_dir+0x3c>
     5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <DIO_set_PORT_dir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=portvalue;
     5bc:	6a bb       	out	0x1a, r22	; 26
		break;
     5be:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=portvalue;
     5c0:	67 bb       	out	0x17, r22	; 23
		break;
     5c2:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=portvalue;
     5c4:	64 bb       	out	0x14, r22	; 20
		break;
     5c6:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=portvalue;
     5c8:	61 bb       	out	0x11, r22	; 17
     5ca:	08 95       	ret

000005cc <DIO_output_on_PORT>:
		break;
	}
}
void DIO_output_on_PORT (unsigned char portname,unsigned char output_on_port)
{
	switch (portname)
     5cc:	84 34       	cpi	r24, 0x44	; 68
     5ce:	d9 f0       	breq	.+54     	; 0x606 <DIO_output_on_PORT+0x3a>
     5d0:	85 34       	cpi	r24, 0x45	; 69
     5d2:	38 f4       	brcc	.+14     	; 0x5e2 <DIO_output_on_PORT+0x16>
     5d4:	82 34       	cpi	r24, 0x42	; 66
     5d6:	99 f0       	breq	.+38     	; 0x5fe <DIO_output_on_PORT+0x32>
     5d8:	83 34       	cpi	r24, 0x43	; 67
     5da:	98 f4       	brcc	.+38     	; 0x602 <DIO_output_on_PORT+0x36>
     5dc:	81 34       	cpi	r24, 0x41	; 65
     5de:	a1 f4       	brne	.+40     	; 0x608 <DIO_output_on_PORT+0x3c>
     5e0:	0c c0       	rjmp	.+24     	; 0x5fa <DIO_output_on_PORT+0x2e>
     5e2:	82 36       	cpi	r24, 0x62	; 98
     5e4:	61 f0       	breq	.+24     	; 0x5fe <DIO_output_on_PORT+0x32>
     5e6:	83 36       	cpi	r24, 0x63	; 99
     5e8:	18 f4       	brcc	.+6      	; 0x5f0 <DIO_output_on_PORT+0x24>
     5ea:	81 36       	cpi	r24, 0x61	; 97
     5ec:	69 f4       	brne	.+26     	; 0x608 <DIO_output_on_PORT+0x3c>
     5ee:	05 c0       	rjmp	.+10     	; 0x5fa <DIO_output_on_PORT+0x2e>
     5f0:	83 36       	cpi	r24, 0x63	; 99
     5f2:	39 f0       	breq	.+14     	; 0x602 <DIO_output_on_PORT+0x36>
     5f4:	84 36       	cpi	r24, 0x64	; 100
     5f6:	41 f4       	brne	.+16     	; 0x608 <DIO_output_on_PORT+0x3c>
     5f8:	06 c0       	rjmp	.+12     	; 0x606 <DIO_output_on_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=output_on_port;
     5fa:	6b bb       	out	0x1b, r22	; 27
		break;
     5fc:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=output_on_port;
     5fe:	68 bb       	out	0x18, r22	; 24
		break;
     600:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=output_on_port;
     602:	65 bb       	out	0x15, r22	; 21
		break;
     604:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=output_on_port;
     606:	62 bb       	out	0x12, r22	; 18
     608:	08 95       	ret

0000060a <DIO_Toggle_PORT>:
		break;
	}
}
void DIO_Toggle_PORT (unsigned char portname)
{
	switch (portname)
     60a:	84 34       	cpi	r24, 0x44	; 68
     60c:	09 f1       	breq	.+66     	; 0x650 <DIO_Toggle_PORT+0x46>
     60e:	85 34       	cpi	r24, 0x45	; 69
     610:	38 f4       	brcc	.+14     	; 0x620 <DIO_Toggle_PORT+0x16>
     612:	82 34       	cpi	r24, 0x42	; 66
     614:	a9 f0       	breq	.+42     	; 0x640 <DIO_Toggle_PORT+0x36>
     616:	83 34       	cpi	r24, 0x43	; 67
     618:	b8 f4       	brcc	.+46     	; 0x648 <DIO_Toggle_PORT+0x3e>
     61a:	81 34       	cpi	r24, 0x41	; 65
     61c:	e1 f4       	brne	.+56     	; 0x656 <DIO_Toggle_PORT+0x4c>
     61e:	0c c0       	rjmp	.+24     	; 0x638 <DIO_Toggle_PORT+0x2e>
     620:	82 36       	cpi	r24, 0x62	; 98
     622:	71 f0       	breq	.+28     	; 0x640 <DIO_Toggle_PORT+0x36>
     624:	83 36       	cpi	r24, 0x63	; 99
     626:	18 f4       	brcc	.+6      	; 0x62e <DIO_Toggle_PORT+0x24>
     628:	81 36       	cpi	r24, 0x61	; 97
     62a:	a9 f4       	brne	.+42     	; 0x656 <DIO_Toggle_PORT+0x4c>
     62c:	05 c0       	rjmp	.+10     	; 0x638 <DIO_Toggle_PORT+0x2e>
     62e:	83 36       	cpi	r24, 0x63	; 99
     630:	59 f0       	breq	.+22     	; 0x648 <DIO_Toggle_PORT+0x3e>
     632:	84 36       	cpi	r24, 0x64	; 100
     634:	81 f4       	brne	.+32     	; 0x656 <DIO_Toggle_PORT+0x4c>
     636:	0c c0       	rjmp	.+24     	; 0x650 <DIO_Toggle_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     638:	8b b3       	in	r24, 0x1b	; 27
     63a:	80 95       	com	r24
     63c:	8b bb       	out	0x1b, r24	; 27
		break;
     63e:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     640:	88 b3       	in	r24, 0x18	; 24
     642:	80 95       	com	r24
     644:	88 bb       	out	0x18, r24	; 24
		break;
     646:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     648:	85 b3       	in	r24, 0x15	; 21
     64a:	80 95       	com	r24
     64c:	85 bb       	out	0x15, r24	; 21
		break;
     64e:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     650:	82 b3       	in	r24, 0x12	; 18
     652:	80 95       	com	r24
     654:	82 bb       	out	0x12, r24	; 18
     656:	08 95       	ret

00000658 <DIO_READ_PORT>:
	}
}
unsigned char DIO_READ_PORT (unsigned char portname)
{
	unsigned char returned_value;
	switch (portname)
     658:	84 34       	cpi	r24, 0x44	; 68
     65a:	d9 f0       	breq	.+54     	; 0x692 <DIO_READ_PORT+0x3a>
     65c:	85 34       	cpi	r24, 0x45	; 69
     65e:	38 f4       	brcc	.+14     	; 0x66e <DIO_READ_PORT+0x16>
     660:	82 34       	cpi	r24, 0x42	; 66
     662:	99 f0       	breq	.+38     	; 0x68a <DIO_READ_PORT+0x32>
     664:	83 34       	cpi	r24, 0x43	; 67
     666:	98 f4       	brcc	.+38     	; 0x68e <DIO_READ_PORT+0x36>
     668:	81 34       	cpi	r24, 0x41	; 65
     66a:	a1 f4       	brne	.+40     	; 0x694 <DIO_READ_PORT+0x3c>
     66c:	0c c0       	rjmp	.+24     	; 0x686 <DIO_READ_PORT+0x2e>
     66e:	82 36       	cpi	r24, 0x62	; 98
     670:	61 f0       	breq	.+24     	; 0x68a <DIO_READ_PORT+0x32>
     672:	83 36       	cpi	r24, 0x63	; 99
     674:	18 f4       	brcc	.+6      	; 0x67c <DIO_READ_PORT+0x24>
     676:	81 36       	cpi	r24, 0x61	; 97
     678:	69 f4       	brne	.+26     	; 0x694 <DIO_READ_PORT+0x3c>
     67a:	05 c0       	rjmp	.+10     	; 0x686 <DIO_READ_PORT+0x2e>
     67c:	83 36       	cpi	r24, 0x63	; 99
     67e:	39 f0       	breq	.+14     	; 0x68e <DIO_READ_PORT+0x36>
     680:	84 36       	cpi	r24, 0x64	; 100
     682:	41 f4       	brne	.+16     	; 0x694 <DIO_READ_PORT+0x3c>
     684:	06 c0       	rjmp	.+12     	; 0x692 <DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		returned_value=PORTA;
     686:	8b b3       	in	r24, 0x1b	; 27
		break;
     688:	08 95       	ret
		case 'B':
		case 'b':
		returned_value=PORTB;
     68a:	88 b3       	in	r24, 0x18	; 24
		break;
     68c:	08 95       	ret
		case 'C':
		case 'c':
		returned_value=PORTC;
     68e:	85 b3       	in	r24, 0x15	; 21
		break;
     690:	08 95       	ret
		case 'D':
		case 'd':
		returned_value=PORTD;
     692:	82 b3       	in	r24, 0x12	; 18
		break;
		default:
		break;
	}
}
     694:	08 95       	ret

00000696 <DIO_enable_PULLUP>:
void DIO_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7,unsigned char enable_pullup)
{
	switch (portname)
     696:	84 34       	cpi	r24, 0x44	; 68
     698:	09 f4       	brne	.+2      	; 0x69c <DIO_enable_PULLUP+0x6>
     69a:	71 c0       	rjmp	.+226    	; 0x77e <DIO_enable_PULLUP+0xe8>
     69c:	85 34       	cpi	r24, 0x45	; 69
     69e:	48 f4       	brcc	.+18     	; 0x6b2 <DIO_enable_PULLUP+0x1c>
     6a0:	82 34       	cpi	r24, 0x42	; 66
     6a2:	99 f1       	breq	.+102    	; 0x70a <DIO_enable_PULLUP+0x74>
     6a4:	83 34       	cpi	r24, 0x43	; 67
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <DIO_enable_PULLUP+0x14>
     6a8:	4d c0       	rjmp	.+154    	; 0x744 <DIO_enable_PULLUP+0xae>
     6aa:	81 34       	cpi	r24, 0x41	; 65
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <DIO_enable_PULLUP+0x1a>
     6ae:	83 c0       	rjmp	.+262    	; 0x7b6 <DIO_enable_PULLUP+0x120>
     6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <DIO_enable_PULLUP+0x3a>
     6b2:	82 36       	cpi	r24, 0x62	; 98
     6b4:	51 f1       	breq	.+84     	; 0x70a <DIO_enable_PULLUP+0x74>
     6b6:	83 36       	cpi	r24, 0x63	; 99
     6b8:	20 f4       	brcc	.+8      	; 0x6c2 <DIO_enable_PULLUP+0x2c>
     6ba:	81 36       	cpi	r24, 0x61	; 97
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <DIO_enable_PULLUP+0x2a>
     6be:	7b c0       	rjmp	.+246    	; 0x7b6 <DIO_enable_PULLUP+0x120>
     6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <DIO_enable_PULLUP+0x3a>
     6c2:	83 36       	cpi	r24, 0x63	; 99
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <DIO_enable_PULLUP+0x32>
     6c6:	3e c0       	rjmp	.+124    	; 0x744 <DIO_enable_PULLUP+0xae>
     6c8:	84 36       	cpi	r24, 0x64	; 100
     6ca:	09 f0       	breq	.+2      	; 0x6ce <DIO_enable_PULLUP+0x38>
     6cc:	74 c0       	rjmp	.+232    	; 0x7b6 <DIO_enable_PULLUP+0x120>
     6ce:	57 c0       	rjmp	.+174    	; 0x77e <DIO_enable_PULLUP+0xe8>
	{
		case 'A':
		case 'a':
		if (enable_pullup==1)
     6d0:	41 30       	cpi	r20, 0x01	; 1
     6d2:	69 f4       	brne	.+26     	; 0x6ee <DIO_enable_PULLUP+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
     6d4:	2b b3       	in	r18, 0x1b	; 27
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	ac 01       	movw	r20, r24
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_enable_PULLUP+0x4c>
     6de:	44 0f       	add	r20, r20
     6e0:	55 1f       	adc	r21, r21
     6e2:	6a 95       	dec	r22
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_enable_PULLUP+0x48>
     6e6:	ba 01       	movw	r22, r20
     6e8:	62 2b       	or	r22, r18
     6ea:	6b bb       	out	0x1b, r22	; 27
     6ec:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
     6ee:	2b b3       	in	r18, 0x1b	; 27
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	ac 01       	movw	r20, r24
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_enable_PULLUP+0x66>
     6f8:	44 0f       	add	r20, r20
     6fa:	55 1f       	adc	r21, r21
     6fc:	6a 95       	dec	r22
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_enable_PULLUP+0x62>
     700:	ba 01       	movw	r22, r20
     702:	60 95       	com	r22
     704:	62 23       	and	r22, r18
     706:	6b bb       	out	0x1b, r22	; 27
     708:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (enable_pullup==1)
     70a:	41 30       	cpi	r20, 0x01	; 1
     70c:	69 f4       	brne	.+26     	; 0x728 <DIO_enable_PULLUP+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
     70e:	28 b3       	in	r18, 0x18	; 24
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	ac 01       	movw	r20, r24
     716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_enable_PULLUP+0x86>
     718:	44 0f       	add	r20, r20
     71a:	55 1f       	adc	r21, r21
     71c:	6a 95       	dec	r22
     71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_enable_PULLUP+0x82>
     720:	ba 01       	movw	r22, r20
     722:	62 2b       	or	r22, r18
     724:	68 bb       	out	0x18, r22	; 24
     726:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
     728:	28 b3       	in	r18, 0x18	; 24
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	ac 01       	movw	r20, r24
     730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_enable_PULLUP+0xa0>
     732:	44 0f       	add	r20, r20
     734:	55 1f       	adc	r21, r21
     736:	6a 95       	dec	r22
     738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_enable_PULLUP+0x9c>
     73a:	ba 01       	movw	r22, r20
     73c:	60 95       	com	r22
     73e:	62 23       	and	r22, r18
     740:	68 bb       	out	0x18, r22	; 24
     742:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (enable_pullup==1)
     744:	41 30       	cpi	r20, 0x01	; 1
     746:	69 f4       	brne	.+26     	; 0x762 <DIO_enable_PULLUP+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
     748:	25 b3       	in	r18, 0x15	; 21
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	ac 01       	movw	r20, r24
     750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_enable_PULLUP+0xc0>
     752:	44 0f       	add	r20, r20
     754:	55 1f       	adc	r21, r21
     756:	6a 95       	dec	r22
     758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_enable_PULLUP+0xbc>
     75a:	ba 01       	movw	r22, r20
     75c:	62 2b       	or	r22, r18
     75e:	65 bb       	out	0x15, r22	; 21
     760:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
     762:	25 b3       	in	r18, 0x15	; 21
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	ac 01       	movw	r20, r24
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_enable_PULLUP+0xda>
     76c:	44 0f       	add	r20, r20
     76e:	55 1f       	adc	r21, r21
     770:	6a 95       	dec	r22
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_enable_PULLUP+0xd6>
     774:	ba 01       	movw	r22, r20
     776:	60 95       	com	r22
     778:	62 23       	and	r22, r18
     77a:	65 bb       	out	0x15, r22	; 21
     77c:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (enable_pullup==1)
     77e:	41 30       	cpi	r20, 0x01	; 1
     780:	69 f4       	brne	.+26     	; 0x79c <DIO_enable_PULLUP+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
     782:	22 b3       	in	r18, 0x12	; 18
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	ac 01       	movw	r20, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_enable_PULLUP+0xfa>
     78c:	44 0f       	add	r20, r20
     78e:	55 1f       	adc	r21, r21
     790:	6a 95       	dec	r22
     792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_enable_PULLUP+0xf6>
     794:	ba 01       	movw	r22, r20
     796:	62 2b       	or	r22, r18
     798:	62 bb       	out	0x12, r22	; 18
     79a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
     79c:	22 b3       	in	r18, 0x12	; 18
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	ac 01       	movw	r20, r24
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_enable_PULLUP+0x114>
     7a6:	44 0f       	add	r20, r20
     7a8:	55 1f       	adc	r21, r21
     7aa:	6a 95       	dec	r22
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_enable_PULLUP+0x110>
     7ae:	ba 01       	movw	r22, r20
     7b0:	60 95       	com	r22
     7b2:	62 23       	and	r22, r18
     7b4:	62 bb       	out	0x12, r22	; 18
     7b6:	08 95       	ret

000007b8 <enable_pulse>:
#define command 0
#define data 1

void static enable_pulse (void)
{
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,1);
     7b8:	83 e6       	ldi	r24, 0x63	; 99
     7ba:	64 e0       	ldi	r22, 0x04	; 4
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     7c2:	8f e9       	ldi	r24, 0x9F	; 159
     7c4:	9f e0       	ldi	r25, 0x0F	; 15
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <enable_pulse+0xe>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <enable_pulse+0x14>
     7cc:	00 00       	nop
	_delay_ms(2);
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,0);
     7ce:	83 e6       	ldi	r24, 0x63	; 99
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
}
     7d8:	08 95       	ret

000007da <LCD_send_char>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	c0 e0       	ldi	r28, 0x00	; 0
     7f0:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
     7f2:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
     7f4:	0f 2e       	mov	r0, r31
     7f6:	f7 e0       	ldi	r31, 0x07	; 7
     7f8:	ef 2e       	mov	r14, r31
     7fa:	ff 24       	eor	r15, r15
     7fc:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     7fe:	cc 24       	eor	r12, r12
     800:	dd 24       	eor	r13, r13
     802:	c3 94       	inc	r12
     804:	a8 2e       	mov	r10, r24
     806:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
			x=3;
     808:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
     80a:	a7 01       	movw	r20, r14
     80c:	4c 1b       	sub	r20, r28
     80e:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     810:	c6 01       	movw	r24, r12
     812:	04 2e       	mov	r0, r20
     814:	02 c0       	rjmp	.+4      	; 0x81a <LCD_send_char+0x40>
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	0a 94       	dec	r0
     81c:	e2 f7       	brpl	.-8      	; 0x816 <LCD_send_char+0x3c>
     81e:	8a 21       	and	r24, r10
     820:	9b 21       	and	r25, r11
     822:	9c 01       	movw	r18, r24
     824:	02 c0       	rjmp	.+4      	; 0x82a <LCD_send_char+0x50>
     826:	36 95       	lsr	r19
     828:	27 95       	ror	r18
     82a:	4a 95       	dec	r20
     82c:	e2 f7       	brpl	.-8      	; 0x826 <LCD_send_char+0x4c>
     82e:	a9 01       	movw	r20, r18
     830:	83 e6       	ldi	r24, 0x63	; 99
     832:	61 2f       	mov	r22, r17
     834:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
     838:	c3 30       	cpi	r28, 0x03	; 3
     83a:	21 f0       	breq	.+8      	; 0x844 <LCD_send_char+0x6a>
     83c:	c7 30       	cpi	r28, 0x07	; 7
     83e:	11 f0       	breq	.+4      	; 0x844 <LCD_send_char+0x6a>
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
     840:	11 50       	subi	r17, 0x01	; 1
     842:	08 c0       	rjmp	.+16     	; 0x854 <LCD_send_char+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
     844:	83 e6       	ldi	r24, 0x63	; 99
     846:	65 e0       	ldi	r22, 0x05	; 5
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
			enable_pulse();
     84e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <enable_pulse>
			x=3;
     852:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
     854:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
     856:	c8 30       	cpi	r28, 0x08	; 8
     858:	d1 05       	cpc	r29, r1
     85a:	b9 f6       	brne	.-82     	; 0x80a <LCD_send_char+0x30>
     85c:	8f ec       	ldi	r24, 0xCF	; 207
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <__stack+0x1>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__stack+0x7>
     866:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	08 95       	ret

0000087e <LCD_send_cmd>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
     87e:	af 92       	push	r10
     880:	bf 92       	push	r11
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	c0 e0       	ldi	r28, 0x00	; 0
     894:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//;
     896:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
     898:	0f 2e       	mov	r0, r31
     89a:	f7 e0       	ldi	r31, 0x07	; 7
     89c:	ef 2e       	mov	r14, r31
     89e:	ff 24       	eor	r15, r15
     8a0:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     8a2:	cc 24       	eor	r12, r12
     8a4:	dd 24       	eor	r13, r13
     8a6:	c3 94       	inc	r12
     8a8:	a8 2e       	mov	r10, r24
     8aa:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
			x=3;
     8ac:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
     8ae:	a7 01       	movw	r20, r14
     8b0:	4c 1b       	sub	r20, r28
     8b2:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     8b4:	c6 01       	movw	r24, r12
     8b6:	04 2e       	mov	r0, r20
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <LCD_send_cmd+0x40>
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	0a 94       	dec	r0
     8c0:	e2 f7       	brpl	.-8      	; 0x8ba <LCD_send_cmd+0x3c>
     8c2:	8a 21       	and	r24, r10
     8c4:	9b 21       	and	r25, r11
     8c6:	9c 01       	movw	r18, r24
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <LCD_send_cmd+0x50>
     8ca:	36 95       	lsr	r19
     8cc:	27 95       	ror	r18
     8ce:	4a 95       	dec	r20
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <LCD_send_cmd+0x4c>
     8d2:	a9 01       	movw	r20, r18
     8d4:	83 e6       	ldi	r24, 0x63	; 99
     8d6:	61 2f       	mov	r22, r17
     8d8:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
     8dc:	c3 30       	cpi	r28, 0x03	; 3
     8de:	21 f0       	breq	.+8      	; 0x8e8 <LCD_send_cmd+0x6a>
     8e0:	c7 30       	cpi	r28, 0x07	; 7
     8e2:	11 f0       	breq	.+4      	; 0x8e8 <LCD_send_cmd+0x6a>
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
     8e4:	11 50       	subi	r17, 0x01	; 1
     8e6:	08 c0       	rjmp	.+16     	; 0x8f8 <LCD_send_cmd+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
     8e8:	83 e6       	ldi	r24, 0x63	; 99
     8ea:	65 e0       	ldi	r22, 0x05	; 5
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
			enable_pulse();
     8f2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <enable_pulse>
			x=3;
     8f6:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
     8f8:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
     8fa:	c8 30       	cpi	r28, 0x08	; 8
     8fc:	d1 05       	cpc	r29, r1
     8fe:	b9 f6       	brne	.-82     	; 0x8ae <LCD_send_cmd+0x30>
     900:	8f ec       	ldi	r24, 0xCF	; 207
     902:	97 e0       	ldi	r25, 0x07	; 7
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <LCD_send_cmd+0x86>
     908:	00 c0       	rjmp	.+0      	; 0x90a <LCD_send_cmd+0x8c>
     90a:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	bf 90       	pop	r11
     91e:	af 90       	pop	r10
     920:	08 95       	ret

00000922 <LCD_CLEAR_Screen>:
#endif


void LCD_CLEAR_Screen (void)
{
	LCD_send_cmd(0x01);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
     928:	8f e1       	ldi	r24, 0x1F	; 31
     92a:	9e e4       	ldi	r25, 0x4E	; 78
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <LCD_CLEAR_Screen+0xa>
     930:	00 c0       	rjmp	.+0      	; 0x932 <LCD_CLEAR_Screen+0x10>
     932:	00 00       	nop
	_delay_ms(10);
}
     934:	08 95       	ret

00000936 <LCD_INIT>:
	LCD_send_cmd(ENTRY_MODE_RTL);
	
}
#elif defined Four_BITS_MODE
void LCD_INIT (void)
{
     936:	cf 93       	push	r28
     938:	8f e7       	ldi	r24, 0x7F	; 127
     93a:	98 e3       	ldi	r25, 0x38	; 56
     93c:	a1 e0       	ldi	r26, 0x01	; 1
     93e:	81 50       	subi	r24, 0x01	; 1
     940:	90 40       	sbci	r25, 0x00	; 0
     942:	a0 40       	sbci	r26, 0x00	; 0
     944:	e1 f7       	brne	.-8      	; 0x93e <LCD_INIT+0x8>
     946:	00 c0       	rjmp	.+0      	; 0x948 <LCD_INIT+0x12>
     948:	00 00       	nop
	_delay_ms(50);
	unsigned char counter=0;
     94a:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
     94c:	83 e6       	ldi	r24, 0x63	; 99
     94e:	6c 2f       	mov	r22, r28
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
void LCD_INIT (void)
{
	_delay_ms(50);
	unsigned char counter=0;
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
     956:	cf 5f       	subi	r28, 0xFF	; 255
     958:	c4 30       	cpi	r28, 0x04	; 4
     95a:	c1 f7       	brne	.-16     	; 0x94c <LCD_INIT+0x16>
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
		x++;
	}
	DIO_set_PIN_dir(En_Rg_selection,En_Pn_selection,1);
     95c:	83 e6       	ldi	r24, 0x63	; 99
     95e:	64 e0       	ldi	r22, 0x04	; 4
     960:	41 e0       	ldi	r20, 0x01	; 1
     962:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir(RS_Rg_selection,RS_Pn_selection,1);
     966:	83 e6       	ldi	r24, 0x63	; 99
     968:	65 e0       	ldi	r22, 0x05	; 5
     96a:	41 e0       	ldi	r20, 0x01	; 1
     96c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	LCD_send_cmd(RETURN_HOME);
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
     976:	af e0       	ldi	r26, 0x0F	; 15
     978:	b7 e2       	ldi	r27, 0x27	; 39
     97a:	11 97       	sbiw	r26, 0x01	; 1
     97c:	f1 f7       	brne	.-4      	; 0x97a <LCD_INIT+0x44>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <LCD_INIT+0x4a>
     980:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(0x28);
     982:	88 e2       	ldi	r24, 0x28	; 40
     984:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
     988:	8e e0       	ldi	r24, 0x0E	; 14
     98a:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
	LCD_send_cmd(CLEAR_SCREEN);
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
     994:	8f e0       	ldi	r24, 0x0F	; 15
     996:	97 e2       	ldi	r25, 0x27	; 39
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <LCD_INIT+0x62>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <LCD_INIT+0x68>
     99e:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(ENTRY_MODE_RTL);
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
}
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <LCD_MOVE_CURSOR>:
#endif

void LCD_MOVE_CURSOR (unsigned char row,unsigned char coloumn)
{
	if (row>2||row<1||coloumn>16||coloumn<1)
     9aa:	98 2f       	mov	r25, r24
     9ac:	91 50       	subi	r25, 0x01	; 1
     9ae:	92 30       	cpi	r25, 0x02	; 2
     9b0:	20 f4       	brcc	.+8      	; 0x9ba <LCD_MOVE_CURSOR+0x10>
     9b2:	61 31       	cpi	r22, 0x11	; 17
     9b4:	10 f4       	brcc	.+4      	; 0x9ba <LCD_MOVE_CURSOR+0x10>
     9b6:	66 23       	and	r22, r22
     9b8:	21 f4       	brne	.+8      	; 0x9c2 <LCD_MOVE_CURSOR+0x18>
	{
		LCD_send_cmd(0x80);
     9ba:	80 e8       	ldi	r24, 0x80	; 128
     9bc:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
     9c0:	08 95       	ret
	}
	else if (row==1)
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	29 f4       	brne	.+10     	; 0x9d0 <LCD_MOVE_CURSOR+0x26>
	{
		LCD_send_cmd(0x80+coloumn-1);
     9c6:	86 2f       	mov	r24, r22
     9c8:	81 58       	subi	r24, 0x81	; 129
     9ca:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
     9ce:	08 95       	ret
	}
	else if (row==2)
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	21 f4       	brne	.+8      	; 0x9dc <LCD_MOVE_CURSOR+0x32>
	{
		LCD_send_cmd(0xc0+coloumn-1);
     9d4:	86 2f       	mov	r24, r22
     9d6:	81 54       	subi	r24, 0x41	; 65
     9d8:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
     9dc:	08 95       	ret

000009de <LCD_send_string>:
	}
}
void LCD_send_string (char*ptr)
{
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ec 01       	movw	r28, r24
	while (*ptr!=0)
     9e4:	88 81       	ld	r24, Y
     9e6:	88 23       	and	r24, r24
     9e8:	31 f0       	breq	.+12     	; 0x9f6 <LCD_send_string+0x18>
	else if (row==2)
	{
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
     9ea:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		LCD_send_char(*ptr);
     9ec:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
{
	while (*ptr!=0)
     9f0:	89 91       	ld	r24, Y+
     9f2:	88 23       	and	r24, r24
     9f4:	d9 f7       	brne	.-10     	; 0x9ec <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	08 95       	ret

000009fc <scan_value>:
int scan_value (unsigned char first_asci,int first_value)
{
	
	first_value*=10;
     9fc:	26 2f       	mov	r18, r22
     9fe:	37 2f       	mov	r19, r23
     a00:	22 0f       	add	r18, r18
     a02:	33 1f       	adc	r19, r19
     a04:	a9 01       	movw	r20, r18
     a06:	44 0f       	add	r20, r20
     a08:	55 1f       	adc	r21, r21
     a0a:	44 0f       	add	r20, r20
     a0c:	55 1f       	adc	r21, r21
     a0e:	24 0f       	add	r18, r20
     a10:	35 1f       	adc	r19, r21
	first_value+=(first_asci-0x30);
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	c0 97       	sbiw	r24, 0x30	; 48
     a16:	82 0f       	add	r24, r18
     a18:	93 1f       	adc	r25, r19
	
	return first_value;
}
     a1a:	08 95       	ret

00000a1c <print_val>:
void print_val (int val)
{
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	7c 01       	movw	r14, r24
	int asci_val,counter=1,x=val;
	if (val==0)
     a2a:	00 97       	sbiw	r24, 0x00	; 0
     a2c:	21 f4       	brne	.+8      	; 0xa36 <print_val+0x1a>
	{
		LCD_send_char('0');
     a2e:	80 e3       	ldi	r24, 0x30	; 48
     a30:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
     a34:	40 c0       	rjmp	.+128    	; 0xab6 <print_val+0x9a>
	}
	else if (val<10)
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	e8 16       	cp	r14, r24
     a3a:	f1 04       	cpc	r15, r1
     a3c:	2c f4       	brge	.+10     	; 0xa48 <print_val+0x2c>
	{
		LCD_send_char(val+0x30);
     a3e:	8e 2d       	mov	r24, r14
     a40:	80 5d       	subi	r24, 0xD0	; 208
     a42:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
     a46:	37 c0       	rjmp	.+110    	; 0xab6 <print_val+0x9a>
	int asci_val,counter=1,x=val;
	if (val==0)
	{
		LCD_send_char('0');
	}
	else if (val<10)
     a48:	c7 01       	movw	r24, r14
     a4a:	c1 e0       	ldi	r28, 0x01	; 1
     a4c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else
	{
		while (x>=10)
		{
			x=x/10;
     a4e:	ea e0       	ldi	r30, 0x0A	; 10
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	bf 01       	movw	r22, r30
     a54:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divmodhi4>
     a58:	cb 01       	movw	r24, r22
			counter*=10;
     a5a:	9e 01       	movw	r18, r28
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	cc 0f       	add	r28, r28
     a62:	dd 1f       	adc	r29, r29
     a64:	cc 0f       	add	r28, r28
     a66:	dd 1f       	adc	r29, r29
     a68:	cc 0f       	add	r28, r28
     a6a:	dd 1f       	adc	r29, r29
     a6c:	c2 0f       	add	r28, r18
     a6e:	d3 1f       	adc	r29, r19
	{
		LCD_send_char(val+0x30);
	}
	else
	{
		while (x>=10)
     a70:	6a 30       	cpi	r22, 0x0A	; 10
     a72:	71 05       	cpc	r23, r1
     a74:	74 f7       	brge	.-36     	; 0xa52 <print_val+0x36>
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
     a76:	ca 30       	cpi	r28, 0x0A	; 10
     a78:	d1 05       	cpc	r29, r1
     a7a:	ac f0       	brlt	.+42     	; 0xaa6 <print_val+0x8a>
		{
			asci_val=(val/counter)%10;
     a7c:	0a e0       	ldi	r16, 0x0A	; 10
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	c7 01       	movw	r24, r14
     a82:	be 01       	movw	r22, r28
     a84:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divmodhi4>
     a88:	cb 01       	movw	r24, r22
     a8a:	b8 01       	movw	r22, r16
     a8c:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divmodhi4>
			LCD_send_char(asci_val+0x30);
     a90:	80 5d       	subi	r24, 0xD0	; 208
     a92:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
			counter/=10;
     a96:	ce 01       	movw	r24, r28
     a98:	b8 01       	movw	r22, r16
     a9a:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divmodhi4>
     a9e:	eb 01       	movw	r28, r22
		while (x>=10)
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
     aa0:	6a 30       	cpi	r22, 0x0A	; 10
     aa2:	71 05       	cpc	r23, r1
     aa4:	6c f7       	brge	.-38     	; 0xa80 <print_val+0x64>
		{
			asci_val=(val/counter)%10;
			LCD_send_char(asci_val+0x30);
			counter/=10;
		}
		LCD_send_char((val%10)+0x30);
     aa6:	c7 01       	movw	r24, r14
     aa8:	6a e0       	ldi	r22, 0x0A	; 10
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	0e 94 ed 0c 	call	0x19da	; 0x19da <__divmodhi4>
     ab0:	80 5d       	subi	r24, 0xD0	; 208
     ab2:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
	}
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	08 95       	ret

00000ac4 <LED_INIT>:
 *  Author: MT
 */ 
#include "DIO.h"
void LED_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,1);
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
}
     aca:	08 95       	ret

00000acc <BUTTON_INIT>:
void BUTTON_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
}
     ad2:	08 95       	ret

00000ad4 <BUTTON_INIT_enable_PULLUP>:
void BUTTON_INIT_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	d8 2f       	mov	r29, r24
     ada:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,1);
     ae2:	8d 2f       	mov	r24, r29
     ae4:	6c 2f       	mov	r22, r28
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_enable_PULLUP>
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <BUTTON_INIT_disable_PULLUP>:
void BUTTON_INIT_disable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	d8 2f       	mov	r29, r24
     af8:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,0);
     b00:	8d 2f       	mov	r24, r29
     b02:	6c 2f       	mov	r22, r28
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	0e 94 4b 03 	call	0x696	; 0x696 <DIO_enable_PULLUP>
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <LED_ON>:

void LED_ON (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,1);
     b10:	41 e0       	ldi	r20, 0x01	; 1
     b12:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
}
     b16:	08 95       	ret

00000b18 <LED_OFF>:
void LED_OFF (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,0);
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
}
     b1e:	08 95       	ret

00000b20 <LED_TOGGLE>:
void LED_TOGGLE (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_Toggle_PIN_on_port(portname,pin_number_0_7);
     b20:	0e 94 12 02 	call	0x424	; 0x424 <DIO_Toggle_PIN_on_port>
}
     b24:	08 95       	ret

00000b26 <READ_PIN_status>:
unsigned char READ_PIN_status (unsigned char portname,unsigned char pin_number_0_7)
{	
	return DIO_READ_PIN(portname,pin_number_0_7);
     b26:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_READ_PIN>
}	
     b2a:	08 95       	ret

00000b2c <SEVEN_SEGMENT_INT>:
#include "DIO.h"

char SS[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
void SEVEN_SEGMENT_INT (unsigned char portname)
{
	DIO_set_PORT_dir(portname,0xff);
     b2c:	6f ef       	ldi	r22, 0xFF	; 255
     b2e:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_set_PORT_dir>
}
     b32:	08 95       	ret

00000b34 <SEVEN_SEGMENT_write>:
void SEVEN_SEGMENT_write (unsigned char portname, unsigned char number,unsigned char Comm_Cathode_1_Comm_Anode_2)
{
	if (Comm_Cathode_1_Comm_Anode_2==1)
     b34:	41 30       	cpi	r20, 0x01	; 1
     b36:	41 f4       	brne	.+16     	; 0xb48 <SEVEN_SEGMENT_write+0x14>
	{
		DIO_output_on_PORT(portname,SS[number]);
     b38:	e0 e6       	ldi	r30, 0x60	; 96
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	e6 0f       	add	r30, r22
     b3e:	f1 1d       	adc	r31, r1
     b40:	60 81       	ld	r22, Z
     b42:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_output_on_PORT>
     b46:	08 95       	ret
	}
	else
	{
		DIO_output_on_PORT(portname,~SS[number]);
     b48:	e0 e6       	ldi	r30, 0x60	; 96
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	e6 0f       	add	r30, r22
     b4e:	f1 1d       	adc	r31, r1
     b50:	60 81       	ld	r22, Z
     b52:	60 95       	com	r22
     b54:	0e 94 e6 02 	call	0x5cc	; 0x5cc <DIO_output_on_PORT>
     b58:	08 95       	ret

00000b5a <SEVEN_SEGMENT_INT_BCD>:
	}
}
void SEVEN_SEGMENT_INT_BCD (unsigned char portname,unsigned char firstpin)
{
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	18 2f       	mov	r17, r24
     b62:	c6 2f       	mov	r28, r22
	else
	{
		DIO_output_on_PORT(portname,~SS[number]);
	}
}
void SEVEN_SEGMENT_INT_BCD (unsigned char portname,unsigned char firstpin)
     b64:	d6 2f       	mov	r29, r22
     b66:	dc 5f       	subi	r29, 0xFC	; 252
{
	unsigned char counter=0;
	for (counter;counter<=3;counter++)
	{
		DIO_set_PIN_dir(portname,firstpin,1);
     b68:	81 2f       	mov	r24, r17
     b6a:	6c 2f       	mov	r22, r28
     b6c:	41 e0       	ldi	r20, 0x01	; 1
     b6e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
		firstpin++;
     b72:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void SEVEN_SEGMENT_INT_BCD (unsigned char portname,unsigned char firstpin)
{
	unsigned char counter=0;
	for (counter;counter<=3;counter++)
     b74:	cd 17       	cp	r28, r29
     b76:	c1 f7       	brne	.-16     	; 0xb68 <SEVEN_SEGMENT_INT_BCD+0xe>
	{
		DIO_set_PIN_dir(portname,firstpin,1);
		firstpin++;
	}
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	08 95       	ret

00000b80 <SEVEN_SEGMENT_write_BCD>:
void SEVEN_SEGMENT_write_BCD (unsigned char portname,unsigned char firstpin,unsigned char number)
{
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	08 2f       	mov	r16, r24
     b92:	16 2f       	mov	r17, r22
     b94:	c0 e0       	ldi	r28, 0x00	; 0
     b96:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_output_PIN_on_port(portname,firstpin,READ_BIT(number,counter));
     b98:	ee 24       	eor	r14, r14
     b9a:	ff 24       	eor	r15, r15
     b9c:	e3 94       	inc	r14
     b9e:	c4 2e       	mov	r12, r20
     ba0:	dd 24       	eor	r13, r13
	{
		DIO_set_PIN_dir(portname,firstpin,1);
		firstpin++;
	}
}
void SEVEN_SEGMENT_write_BCD (unsigned char portname,unsigned char firstpin,unsigned char number)
     ba2:	6c 2f       	mov	r22, r28
     ba4:	61 0f       	add	r22, r17
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_output_PIN_on_port(portname,firstpin,READ_BIT(number,counter));
     ba6:	c7 01       	movw	r24, r14
     ba8:	0c 2e       	mov	r0, r28
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <SEVEN_SEGMENT_write_BCD+0x30>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	0a 94       	dec	r0
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <SEVEN_SEGMENT_write_BCD+0x2c>
     bb4:	8c 21       	and	r24, r12
     bb6:	9d 21       	and	r25, r13
     bb8:	9c 01       	movw	r18, r24
     bba:	0c 2e       	mov	r0, r28
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <SEVEN_SEGMENT_write_BCD+0x42>
     bbe:	36 95       	lsr	r19
     bc0:	27 95       	ror	r18
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <SEVEN_SEGMENT_write_BCD+0x3e>
     bc6:	a9 01       	movw	r20, r18
     bc8:	80 2f       	mov	r24, r16
     bca:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     bce:	21 96       	adiw	r28, 0x01	; 1
	}
}
void SEVEN_SEGMENT_write_BCD (unsigned char portname,unsigned char firstpin,unsigned char number)
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
     bd0:	c4 30       	cpi	r28, 0x04	; 4
     bd2:	d1 05       	cpc	r29, r1
     bd4:	31 f7       	brne	.-52     	; 0xba2 <SEVEN_SEGMENT_write_BCD+0x22>
	{
		DIO_output_PIN_on_port(portname,firstpin,READ_BIT(number,counter));
		firstpin++;
	}
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	08 95       	ret

00000be8 <__vector_12>:
		//0.00056 DEGREE
		
	}
}
ISR(SPI_STC_vect)
{
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
	x=SPI_SLAVE_recieve_char(1);
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 cf 00 	call	0x19e	; 0x19e <SPI_SLAVE_recieve_char>
     c10:	80 93 c5 00 	sts	0x00C5, r24
	i++;
     c14:	80 91 ac 00 	lds	r24, 0x00AC
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 ac 00 	sts	0x00AC, r24
}
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	0f 90       	pop	r0
     c3c:	1f 90       	pop	r1
     c3e:	18 95       	reti

00000c40 <__vector_5>:
ISR(TIMER2_OVF_vect)
{
     c40:	1f 92       	push	r1
     c42:	0f 92       	push	r0
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	8f 93       	push	r24
	second++;
     c4c:	80 91 c4 00 	lds	r24, 0x00C4
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	80 93 c4 00 	sts	0x00C4, r24
}
     c56:	8f 91       	pop	r24
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <TIME_CLOCK>:
void TIME_CLOCK (void)
{
     c62:	cf 93       	push	r28
		SEVEN_SEGMENT_write('a',second%10,1);
     c64:	80 91 c4 00 	lds	r24, 0x00C4
     c68:	ca e0       	ldi	r28, 0x0A	; 10
     c6a:	6c 2f       	mov	r22, r28
     c6c:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     c70:	69 2f       	mov	r22, r25
     c72:	81 e6       	ldi	r24, 0x61	; 97
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	0e 94 9a 05 	call	0xb34	; 0xb34 <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('b',3,0);
     c80:	82 e6       	ldi	r24, 0x62	; 98
     c82:	63 e0       	ldi	r22, 0x03	; 3
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     c8a:	8f ec       	ldi	r24, 0xCF	; 207
     c8c:	97 e0       	ldi	r25, 0x07	; 7
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <TIME_CLOCK+0x2c>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <TIME_CLOCK+0x32>
     c94:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('b',3,1);
     c96:	82 e6       	ldi	r24, 0x62	; 98
     c98:	63 e0       	ldi	r22, 0x03	; 3
     c9a:	41 e0       	ldi	r20, 0x01	; 1
     c9c:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',second/10,1);
     ca0:	80 91 c4 00 	lds	r24, 0x00C4
     ca4:	6c 2f       	mov	r22, r28
     ca6:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     caa:	68 2f       	mov	r22, r24
     cac:	81 e6       	ldi	r24, 0x61	; 97
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	0e 94 9a 05 	call	0xb34	; 0xb34 <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('b',2,0);
     cba:	82 e6       	ldi	r24, 0x62	; 98
     cbc:	62 e0       	ldi	r22, 0x02	; 2
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     cc4:	8f ec       	ldi	r24, 0xCF	; 207
     cc6:	97 e0       	ldi	r25, 0x07	; 7
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <TIME_CLOCK+0x66>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <TIME_CLOCK+0x6c>
     cce:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('b',2,1);
     cd0:	82 e6       	ldi	r24, 0x62	; 98
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',minute%10,1);
     cda:	80 91 c3 00 	lds	r24, 0x00C3
     cde:	6c 2f       	mov	r22, r28
     ce0:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     ce4:	69 2f       	mov	r22, r25
     ce6:	81 e6       	ldi	r24, 0x61	; 97
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	41 e0       	ldi	r20, 0x01	; 1
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	0e 94 9a 05 	call	0xb34	; 0xb34 <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('b',1,0);
     cf4:	82 e6       	ldi	r24, 0x62	; 98
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     cfe:	8f ec       	ldi	r24, 0xCF	; 207
     d00:	97 e0       	ldi	r25, 0x07	; 7
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <TIME_CLOCK+0xa0>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <TIME_CLOCK+0xa6>
     d08:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('b',1,1);
     d0a:	82 e6       	ldi	r24, 0x62	; 98
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',minute/10,1);
     d14:	80 91 c3 00 	lds	r24, 0x00C3
     d18:	6c 2f       	mov	r22, r28
     d1a:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     d1e:	68 2f       	mov	r22, r24
     d20:	81 e6       	ldi	r24, 0x61	; 97
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 9a 05 	call	0xb34	; 0xb34 <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('b',0,0);
     d2e:	82 e6       	ldi	r24, 0x62	; 98
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     d38:	8f ec       	ldi	r24, 0xCF	; 207
     d3a:	97 e0       	ldi	r25, 0x07	; 7
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <TIME_CLOCK+0xda>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <TIME_CLOCK+0xe0>
     d42:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('b',0,1);
     d44:	82 e6       	ldi	r24, 0x62	; 98
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',hours%10,1);
     d4e:	80 91 c2 00 	lds	r24, 0x00C2
     d52:	6c 2f       	mov	r22, r28
     d54:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     d58:	69 2f       	mov	r22, r25
     d5a:	81 e6       	ldi	r24, 0x61	; 97
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	0e 94 9a 05 	call	0xb34	; 0xb34 <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('d',1,0);
     d68:	84 e6       	ldi	r24, 0x64	; 100
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     d72:	8f ec       	ldi	r24, 0xCF	; 207
     d74:	97 e0       	ldi	r25, 0x07	; 7
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <TIME_CLOCK+0x114>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <TIME_CLOCK+0x11a>
     d7c:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('d',1,1);
     d7e:	84 e6       	ldi	r24, 0x64	; 100
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	41 e0       	ldi	r20, 0x01	; 1
     d84:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',hours/10,1);
     d88:	80 91 c2 00 	lds	r24, 0x00C2
     d8c:	6c 2f       	mov	r22, r28
     d8e:	0e 94 cd 0c 	call	0x199a	; 0x199a <__udivmodqi4>
     d92:	68 2f       	mov	r22, r24
     d94:	81 e6       	ldi	r24, 0x61	; 97
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	0e 94 9a 05 	call	0xb34	; 0xb34 <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('d',0,0);
     da2:	84 e6       	ldi	r24, 0x64	; 100
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     dac:	8f ec       	ldi	r24, 0xCF	; 207
     dae:	97 e0       	ldi	r25, 0x07	; 7
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <TIME_CLOCK+0x14e>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <TIME_CLOCK+0x154>
     db6:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('d',0,1);
     db8:	84 e6       	ldi	r24, 0x64	; 100
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
		
		if (second>=60)
     dc2:	80 91 c4 00 	lds	r24, 0x00C4
     dc6:	8c 33       	cpi	r24, 0x3C	; 60
     dc8:	40 f0       	brcs	.+16     	; 0xdda <TIME_CLOCK+0x178>
        {
			second=0;
     dca:	10 92 c4 00 	sts	0x00C4, r1
			minute++;
     dce:	80 91 c3 00 	lds	r24, 0x00C3
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 93 c3 00 	sts	0x00C3, r24
     dd8:	12 c0       	rjmp	.+36     	; 0xdfe <TIME_CLOCK+0x19c>
        } 
        else if (minute>=60)
     dda:	80 91 c3 00 	lds	r24, 0x00C3
     dde:	8c 33       	cpi	r24, 0x3C	; 60
     de0:	40 f0       	brcs	.+16     	; 0xdf2 <TIME_CLOCK+0x190>
        {
			minute=0;
     de2:	10 92 c3 00 	sts	0x00C3, r1
			hours++;
     de6:	80 91 c2 00 	lds	r24, 0x00C2
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	80 93 c2 00 	sts	0x00C2, r24
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <TIME_CLOCK+0x19c>
        } 
        else if (hours>=24)
     df2:	80 91 c2 00 	lds	r24, 0x00C2
     df6:	88 31       	cpi	r24, 0x18	; 24
     df8:	10 f0       	brcs	.+4      	; 0xdfe <TIME_CLOCK+0x19c>
        {
			hours=0;
     dfa:	10 92 c2 00 	sts	0x00C2, r1
        }
}
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <check_mode_fn>:
void check_mode_fn (void)
{
	LCD_MOVE_CURSOR(1,1);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
	for (i=0;i<=15;i++)
     e0a:	10 92 ac 00 	sts	0x00AC, r1
	{
		LCD_send_char(0xff);
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
        }
}
void check_mode_fn (void)
{
	LCD_MOVE_CURSOR(1,1);
	for (i=0;i<=15;i++)
     e14:	80 91 ac 00 	lds	r24, 0x00AC
     e18:	8f 5f       	subi	r24, 0xFF	; 255
     e1a:	80 93 ac 00 	sts	0x00AC, r24
     e1e:	80 31       	cpi	r24, 0x10	; 16
     e20:	b0 f3       	brcs	.-20     	; 0xe0e <check_mode_fn+0xc>
	{
		LCD_send_char(0xff);
	}
	LCD_MOVE_CURSOR(2,1);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
	for (i=0;i<=15;i++)
     e2a:	10 92 ac 00 	sts	0x00AC, r1
	{
		LCD_send_char(0xff);
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
	for (i=0;i<=15;i++)
	{
		LCD_send_char(0xff);
	}
	LCD_MOVE_CURSOR(2,1);
	for (i=0;i<=15;i++)
     e34:	80 91 ac 00 	lds	r24, 0x00AC
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	80 93 ac 00 	sts	0x00AC, r24
     e3e:	80 31       	cpi	r24, 0x10	; 16
     e40:	b0 f3       	brcs	.-20     	; 0xe2e <check_mode_fn+0x2c>
	{
		LCD_send_char(0xff);
	}
	SEVEN_SEGMENT_write('a',8,1);
     e42:	81 e6       	ldi	r24, 0x61	; 97
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	68 e0       	ldi	r22, 0x08	; 8
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	0e 94 9a 05 	call	0xb34	; 0xb34 <SEVEN_SEGMENT_write>
	DIO_output_PIN_on_port('b',3,0);
     e52:	82 e6       	ldi	r24, 0x62	; 98
     e54:	63 e0       	ldi	r22, 0x03	; 3
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
	DIO_output_PIN_on_port('b',2,0);
     e5c:	82 e6       	ldi	r24, 0x62	; 98
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
	DIO_output_PIN_on_port('b',1,0);
     e66:	82 e6       	ldi	r24, 0x62	; 98
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
	DIO_output_PIN_on_port('b',0,0);
     e70:	82 e6       	ldi	r24, 0x62	; 98
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
	DIO_output_PIN_on_port('d',1,0);
     e7a:	84 e6       	ldi	r24, 0x64	; 100
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
	DIO_output_PIN_on_port('d',0,0);
     e84:	84 e6       	ldi	r24, 0x64	; 100
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	0e 94 81 01 	call	0x302	; 0x302 <DIO_output_PIN_on_port>
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	93 e2       	ldi	r25, 0x23	; 35
     e92:	a4 ef       	ldi	r26, 0xF4	; 244
     e94:	81 50       	subi	r24, 0x01	; 1
     e96:	90 40       	sbci	r25, 0x00	; 0
     e98:	a0 40       	sbci	r26, 0x00	; 0
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <check_mode_fn+0x92>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <check_mode_fn+0x9c>
     e9e:	00 00       	nop
	_delay_ms(10000);
	TIME_CLOCK();
     ea0:	0e 94 31 06 	call	0xc62	; 0xc62 <TIME_CLOCK>
	LCD_CLEAR_Screen();
     ea4:	0e 94 91 04 	call	0x922	; 0x922 <LCD_CLEAR_Screen>
}
     ea8:	08 95       	ret

00000eaa <main>:
	//unsigned char d2[3]={0,0,0};
	unsigned char i=0,x,cmd=0x00,dr=0,slew_degree1=0,slew_degree2=0,s_seconds_1=0,s_minutes_1=0,s_seconds_2=0,s_minutes_2=0;
	unsigned long s_time_1=0,s_time_2=0;
	
int main(void)
{
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <main+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <main+0x8>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <main+0xa>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	timer2_INIT_OVERFLOW_Interrupt();
     eb8:	0e 94 ce 0a 	call	0x159c	; 0x159c <timer2_INIT_OVERFLOW_Interrupt>
	
	SEVEN_SEGMENT_INT('a');
     ebc:	81 e6       	ldi	r24, 0x61	; 97
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 96 05 	call	0xb2c	; 0xb2c <SEVEN_SEGMENT_INT>
	DIO_set_PIN_dir('d',0,1);
     ec4:	84 e6       	ldi	r24, 0x64	; 100
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('d',1,1);
     ece:	84 e6       	ldi	r24, 0x64	; 100
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',0,1);
     ed8:	82 e6       	ldi	r24, 0x62	; 98
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',1,1);
     ee2:	82 e6       	ldi	r24, 0x62	; 98
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',2,1);
     eec:	82 e6       	ldi	r24, 0x62	; 98
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',3,1);
     ef6:	82 e6       	ldi	r24, 0x62	; 98
     ef8:	63 e0       	ldi	r22, 0x03	; 3
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	LCD_INIT();
     f00:	0e 94 9b 04 	call	0x936	; 0x936 <LCD_INIT>
	//_delay_ms(300);
	SPI_SLAVE_INIT();
     f04:	0e 94 bb 00 	call	0x176	; 0x176 <SPI_SLAVE_INIT>
	sei();
     f08:	78 94       	sei
	DIO_set_PIN_dir('d',2,0);
     f0a:	84 e6       	ldi	r24, 0x64	; 100
     f0c:	62 e0       	ldi	r22, 0x02	; 2
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_set_PIN_dir>
	/*SET_BIT(MCUCR,ISC00);
	SET_BIT(MCUCR,ISC01);
	SET_BIT(GICR,INT0);*/
	//_delay_ms(500);
	unsigned short degree1=0,degree2=0;
	LCD_send_cmd(DISPLAY_ON_CURSOR_OFF);
     f14:	8c e0       	ldi	r24, 0x0C	; 12
     f16:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_send_cmd>
	DIO_set_PIN_dir('d',2,0);
	/*SET_BIT(MCUCR,ISC00);
	SET_BIT(MCUCR,ISC01);
	SET_BIT(GICR,INT0);*/
	//_delay_ms(500);
	unsigned short degree1=0,degree2=0;
     f1a:	88 24       	eor	r8, r8
     f1c:	99 24       	eor	r9, r9
     f1e:	aa 24       	eor	r10, r10
     f20:	bb 24       	eor	r11, r11
	{
		TIME_CLOCK();
		_delay_ms(1);
		if (i>=1)
		{
			d1[i-1]=x;
     f22:	0f 2e       	mov	r0, r31
     f24:	fd ea       	ldi	r31, 0xAD	; 173
     f26:	ef 2e       	mov	r14, r31
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ff 2e       	mov	r15, r31
     f2c:	f0 2d       	mov	r31, r0
			dr=0;
		}
		
		if (dr==0&d1[11]==0xf0)
     f2e:	0f 2e       	mov	r0, r31
     f30:	f8 eb       	ldi	r31, 0xB8	; 184
     f32:	6f 2e       	mov	r6, r31
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	7f 2e       	mov	r7, r31
     f38:	f0 2d       	mov	r31, r0
					dr=1;
				}
				else
				{
					LCD_MOVE_CURSOR(1,1);
					LCD_send_string("degree1:");
     f3a:	0f 2e       	mov	r0, r31
     f3c:	f7 e7       	ldi	r31, 0x77	; 119
     f3e:	4f 2e       	mov	r4, r31
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	5f 2e       	mov	r5, r31
     f44:	f0 2d       	mov	r31, r0
					{
						LCD_send_char(d1[i]+48);
						degree1=scan_value(d1[i]+48,degree1);
					}
					LCD_MOVE_CURSOR(2,1);
					LCD_send_string("degree2:");
     f46:	0f 2e       	mov	r0, r31
     f48:	f0 e8       	ldi	r31, 0x80	; 128
     f4a:	2f 2e       	mov	r2, r31
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	3f 2e       	mov	r3, r31
     f50:	f0 2d       	mov	r31, r0
					{
						LCD_send_char(d1[i]+48);
						degree2=scan_value(d1[i]+48,degree2);
					}
					s_seconds_1=d1[7];
					s_minutes_1=d1[8];
     f52:	24 eb       	ldi	r18, 0xB4	; 180
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	3a 83       	std	Y+2, r19	; 0x02
     f5c:	29 83       	std	Y+1, r18	; 0x01
					s_seconds_2=d1[9];
     f5e:	84 eb       	ldi	r24, 0xB4	; 180
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 96       	adiw	r24, 0x02	; 2
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char d1[12]={0,0,0};
	//unsigned char d2[3]={0,0,0};
	unsigned char i=0,x,cmd=0x00,dr=0,slew_degree1=0,slew_degree2=0,s_seconds_1=0,s_minutes_1=0,s_seconds_2=0,s_minutes_2=0;
	unsigned long s_time_1=0,s_time_2=0;
	
int main(void)
     f68:	0f 2e       	mov	r0, r31
     f6a:	fc e0       	ldi	r31, 0x0C	; 12
     f6c:	cf 2e       	mov	r12, r31
     f6e:	dd 24       	eor	r13, r13
     f70:	f0 2d       	mov	r31, r0
     f72:	ce 0c       	add	r12, r14
     f74:	df 1c       	adc	r13, r15
				degree2=0;
				LCD_CLEAR_Screen();
				if (d1[0]==SET_TIME)
				{
					LCD_send_string("setting time");
					second=(d1[5]*10)+d1[6];
     f76:	a2 eb       	ldi	r26, 0xB2	; 178
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	11 96       	adiw	r26, 0x01	; 1
     f7c:	be 83       	std	Y+6, r27	; 0x06
     f7e:	ad 83       	std	Y+5, r26	; 0x05
	//_delay_ms(500);
	unsigned short degree1=0,degree2=0;
	LCD_send_cmd(DISPLAY_ON_CURSOR_OFF);
	while(1)
	{
		TIME_CLOCK();
     f80:	0e 94 31 06 	call	0xc62	; 0xc62 <TIME_CLOCK>
     f84:	ef ec       	ldi	r30, 0xCF	; 207
     f86:	f7 e0       	ldi	r31, 0x07	; 7
     f88:	31 97       	sbiw	r30, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <main+0xde>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <main+0xe4>
     f8e:	00 00       	nop
		_delay_ms(1);
		if (i>=1)
     f90:	80 91 ac 00 	lds	r24, 0x00AC
     f94:	88 23       	and	r24, r24
     f96:	59 f0       	breq	.+22     	; 0xfae <main+0x104>
		{
			d1[i-1]=x;
     f98:	97 01       	movw	r18, r14
     f9a:	28 0f       	add	r18, r24
     f9c:	31 1d       	adc	r19, r1
     f9e:	c9 01       	movw	r24, r18
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	20 91 c5 00 	lds	r18, 0x00C5
     fa6:	dc 01       	movw	r26, r24
     fa8:	2c 93       	st	X, r18
			dr=0;
     faa:	10 92 aa 00 	sts	0x00AA, r1
		}
		
		if (dr==0&d1[11]==0xf0)
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 91 aa 00 	lds	r25, 0x00AA
     fb4:	91 11       	cpse	r25, r1
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	88 23       	and	r24, r24
     fba:	09 f4       	brne	.+2      	; 0xfbe <main+0x114>
     fbc:	0e c1       	rjmp	.+540    	; 0x11da <main+0x330>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	f3 01       	movw	r30, r6
     fc2:	90 81       	ld	r25, Z
     fc4:	90 3f       	cpi	r25, 0xF0	; 240
     fc6:	09 f0       	breq	.+2      	; 0xfca <main+0x120>
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	88 23       	and	r24, r24
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <main+0x126>
     fce:	05 c1       	rjmp	.+522    	; 0x11da <main+0x330>
			{
				degree1=0;
				degree2=0;
				LCD_CLEAR_Screen();
     fd0:	0e 94 91 04 	call	0x922	; 0x922 <LCD_CLEAR_Screen>
				if (d1[0]==SET_TIME)
     fd4:	d7 01       	movw	r26, r14
     fd6:	8c 91       	ld	r24, X
     fd8:	8e 3e       	cpi	r24, 0xEE	; 238
     fda:	09 f0       	breq	.+2      	; 0xfde <main+0x134>
     fdc:	4b c0       	rjmp	.+150    	; 0x1074 <main+0x1ca>
				{
					LCD_send_string("setting time");
     fde:	8a e6       	ldi	r24, 0x6A	; 106
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
					second=(d1[5]*10)+d1[6];
     fe6:	e2 eb       	ldi	r30, 0xB2	; 178
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 0f       	add	r24, r24
     fee:	98 2f       	mov	r25, r24
     ff0:	99 0f       	add	r25, r25
     ff2:	99 0f       	add	r25, r25
     ff4:	89 0f       	add	r24, r25
     ff6:	ad 81       	ldd	r26, Y+5	; 0x05
     ff8:	be 81       	ldd	r27, Y+6	; 0x06
     ffa:	9c 91       	ld	r25, X
     ffc:	89 0f       	add	r24, r25
     ffe:	80 93 c4 00 	sts	0x00C4, r24
					minute=(d1[3]*10)+d1[4];
    1002:	80 91 b0 00 	lds	r24, 0x00B0
    1006:	88 0f       	add	r24, r24
    1008:	98 2f       	mov	r25, r24
    100a:	99 0f       	add	r25, r25
    100c:	99 0f       	add	r25, r25
    100e:	89 0f       	add	r24, r25
    1010:	90 91 b1 00 	lds	r25, 0x00B1
    1014:	89 0f       	add	r24, r25
    1016:	80 93 c3 00 	sts	0x00C3, r24
					hours=(d1[1]*10)+d1[2];
    101a:	80 91 ae 00 	lds	r24, 0x00AE
    101e:	88 0f       	add	r24, r24
    1020:	98 2f       	mov	r25, r24
    1022:	99 0f       	add	r25, r25
    1024:	99 0f       	add	r25, r25
    1026:	89 0f       	add	r24, r25
    1028:	90 91 af 00 	lds	r25, 0x00AF
    102c:	89 0f       	add	r24, r25
    102e:	80 93 c2 00 	sts	0x00C2, r24
					TIME_CLOCK();
    1032:	0e 94 31 06 	call	0xc62	; 0xc62 <TIME_CLOCK>
    1036:	e2 eb       	ldi	r30, 0xB2	; 178
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	35 97       	sbiw	r30, 0x05	; 5
	unsigned char d1[12]={0,0,0};
	//unsigned char d2[3]={0,0,0};
	unsigned char i=0,x,cmd=0x00,dr=0,slew_degree1=0,slew_degree2=0,s_seconds_1=0,s_minutes_1=0,s_seconds_2=0,s_minutes_2=0;
	unsigned long s_time_1=0,s_time_2=0;
	
int main(void)
    103c:	82 eb       	ldi	r24, 0xB2	; 178
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	07 96       	adiw	r24, 0x07	; 7
					minute=(d1[3]*10)+d1[4];
					hours=(d1[1]*10)+d1[2];
					TIME_CLOCK();
					for (i=0;i<=11;i++)
					{
						d1[i]=0;
    1042:	11 92       	st	Z+, r1
					LCD_send_string("setting time");
					second=(d1[5]*10)+d1[6];
					minute=(d1[3]*10)+d1[4];
					hours=(d1[1]*10)+d1[2];
					TIME_CLOCK();
					for (i=0;i<=11;i++)
    1044:	e8 17       	cp	r30, r24
    1046:	f9 07       	cpc	r31, r25
    1048:	e1 f7       	brne	.-8      	; 0x1042 <main+0x198>
					{
						d1[i]=0;
					}
					i=0;
    104a:	10 92 ac 00 	sts	0x00AC, r1
					dr=1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	80 93 aa 00 	sts	0x00AA, r24
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	99 e6       	ldi	r25, 0x69	; 105
    1058:	a8 e1       	ldi	r26, 0x18	; 24
    105a:	81 50       	subi	r24, 0x01	; 1
    105c:	90 40       	sbci	r25, 0x00	; 0
    105e:	a0 40       	sbci	r26, 0x00	; 0
    1060:	e1 f7       	brne	.-8      	; 0x105a <main+0x1b0>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <main+0x1ba>
    1064:	00 00       	nop
					_delay_ms(1000);
					LCD_CLEAR_Screen();
    1066:	0e 94 91 04 	call	0x922	; 0x922 <LCD_CLEAR_Screen>
		}
		
		if (dr==0&d1[11]==0xf0)
			{
				degree1=0;
				degree2=0;
    106a:	88 24       	eor	r8, r8
    106c:	99 24       	eor	r9, r9
			dr=0;
		}
		
		if (dr==0&d1[11]==0xf0)
			{
				degree1=0;
    106e:	aa 24       	eor	r10, r10
    1070:	bb 24       	eor	r11, r11
    1072:	ab c0       	rjmp	.+342    	; 0x11ca <main+0x320>
					dr=1;
					_delay_ms(1000);
					LCD_CLEAR_Screen();
					//_delay_ms(1000);
				} 
				else if (d1[0]==check_mode&d1[1]==check_mode)
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	8a 3a       	cpi	r24, 0xAA	; 170
    1078:	09 f0       	breq	.+2      	; 0x107c <main+0x1d2>
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	99 23       	and	r25, r25
    107e:	a9 f0       	breq	.+42     	; 0x10aa <main+0x200>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	ae ea       	ldi	r26, 0xAE	; 174
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	9c 91       	ld	r25, X
    1088:	9a 3a       	cpi	r25, 0xAA	; 170
    108a:	09 f0       	breq	.+2      	; 0x108e <main+0x1e4>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	88 23       	and	r24, r24
    1090:	61 f0       	breq	.+24     	; 0x10aa <main+0x200>
				{
					check_mode_fn();
    1092:	0e 94 01 07 	call	0xe02	; 0xe02 <check_mode_fn>
    1096:	f7 01       	movw	r30, r14
					for (i=0;i<=11;i++)
					{
						d1[i]=0;
    1098:	11 92       	st	Z+, r1
					//_delay_ms(1000);
				} 
				else if (d1[0]==check_mode&d1[1]==check_mode)
				{
					check_mode_fn();
					for (i=0;i<=11;i++)
    109a:	ec 15       	cp	r30, r12
    109c:	fd 05       	cpc	r31, r13
    109e:	e1 f7       	brne	.-8      	; 0x1098 <main+0x1ee>
		}
		
		if (dr==0&d1[11]==0xf0)
			{
				degree1=0;
				degree2=0;
    10a0:	88 24       	eor	r8, r8
    10a2:	99 24       	eor	r9, r9
			dr=0;
		}
		
		if (dr==0&d1[11]==0xf0)
			{
				degree1=0;
    10a4:	aa 24       	eor	r10, r10
    10a6:	bb 24       	eor	r11, r11
    10a8:	90 c0       	rjmp	.+288    	; 0x11ca <main+0x320>
					i=0;
					dr=1;
				}
				else
				{
					LCD_MOVE_CURSOR(1,1);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
					LCD_send_string("degree1:");
    10b2:	c2 01       	movw	r24, r4
    10b4:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
					for (i=1;i<=3;i++)
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	80 93 ac 00 	sts	0x00AC, r24
			dr=0;
		}
		
		if (dr==0&d1[11]==0xf0)
			{
				degree1=0;
    10be:	aa 24       	eor	r10, r10
    10c0:	bb 24       	eor	r11, r11
				{
					LCD_MOVE_CURSOR(1,1);
					LCD_send_string("degree1:");
					for (i=1;i<=3;i++)
					{
						LCD_send_char(d1[i]+48);
    10c2:	f7 01       	movw	r30, r14
    10c4:	e8 0f       	add	r30, r24
    10c6:	f1 1d       	adc	r31, r1
    10c8:	80 81       	ld	r24, Z
    10ca:	80 5d       	subi	r24, 0xD0	; 208
    10cc:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
						degree1=scan_value(d1[i]+48,degree1);
    10d0:	80 91 ac 00 	lds	r24, 0x00AC
    10d4:	f7 01       	movw	r30, r14
    10d6:	e8 0f       	add	r30, r24
    10d8:	f1 1d       	adc	r31, r1
    10da:	80 81       	ld	r24, Z
    10dc:	80 5d       	subi	r24, 0xD0	; 208
    10de:	b5 01       	movw	r22, r10
    10e0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <scan_value>
    10e4:	a8 2e       	mov	r10, r24
    10e6:	b9 2e       	mov	r11, r25
				}
				else
				{
					LCD_MOVE_CURSOR(1,1);
					LCD_send_string("degree1:");
					for (i=1;i<=3;i++)
    10e8:	80 91 ac 00 	lds	r24, 0x00AC
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	80 93 ac 00 	sts	0x00AC, r24
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	30 f3       	brcs	.-52     	; 0x10c2 <main+0x218>
					{
						LCD_send_char(d1[i]+48);
						degree1=scan_value(d1[i]+48,degree1);
					}
					LCD_MOVE_CURSOR(2,1);
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
					LCD_send_string("degree2:");
    10fe:	c1 01       	movw	r24, r2
    1100:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
					for (i=4;i<=6;i++)
    1104:	84 e0       	ldi	r24, 0x04	; 4
    1106:	80 93 ac 00 	sts	0x00AC, r24
		}
		
		if (dr==0&d1[11]==0xf0)
			{
				degree1=0;
				degree2=0;
    110a:	88 24       	eor	r8, r8
    110c:	99 24       	eor	r9, r9
					}
					LCD_MOVE_CURSOR(2,1);
					LCD_send_string("degree2:");
					for (i=4;i<=6;i++)
					{
						LCD_send_char(d1[i]+48);
    110e:	f7 01       	movw	r30, r14
    1110:	e8 0f       	add	r30, r24
    1112:	f1 1d       	adc	r31, r1
    1114:	80 81       	ld	r24, Z
    1116:	80 5d       	subi	r24, 0xD0	; 208
    1118:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
						degree2=scan_value(d1[i]+48,degree2);
    111c:	80 91 ac 00 	lds	r24, 0x00AC
    1120:	f7 01       	movw	r30, r14
    1122:	e8 0f       	add	r30, r24
    1124:	f1 1d       	adc	r31, r1
    1126:	80 81       	ld	r24, Z
    1128:	80 5d       	subi	r24, 0xD0	; 208
    112a:	b4 01       	movw	r22, r8
    112c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <scan_value>
    1130:	88 2e       	mov	r8, r24
    1132:	99 2e       	mov	r9, r25
						LCD_send_char(d1[i]+48);
						degree1=scan_value(d1[i]+48,degree1);
					}
					LCD_MOVE_CURSOR(2,1);
					LCD_send_string("degree2:");
					for (i=4;i<=6;i++)
    1134:	80 91 ac 00 	lds	r24, 0x00AC
    1138:	8f 5f       	subi	r24, 0xFF	; 255
    113a:	80 93 ac 00 	sts	0x00AC, r24
    113e:	87 30       	cpi	r24, 0x07	; 7
    1140:	30 f3       	brcs	.-52     	; 0x110e <main+0x264>
					{
						LCD_send_char(d1[i]+48);
						degree2=scan_value(d1[i]+48,degree2);
					}
					s_seconds_1=d1[7];
    1142:	e4 eb       	ldi	r30, 0xB4	; 180
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	40 81       	ld	r20, Z
    1148:	40 93 a7 00 	sts	0x00A7, r20
					s_minutes_1=d1[8];
    114c:	a9 81       	ldd	r26, Y+1	; 0x01
    114e:	ba 81       	ldd	r27, Y+2	; 0x02
    1150:	8c 91       	ld	r24, X
    1152:	80 93 a6 00 	sts	0x00A6, r24
					s_seconds_2=d1[9];
    1156:	eb 81       	ldd	r30, Y+3	; 0x03
    1158:	fc 81       	ldd	r31, Y+4	; 0x04
    115a:	60 81       	ld	r22, Z
    115c:	60 93 a5 00 	sts	0x00A5, r22
					s_minutes_2=d1[10];
    1160:	50 91 b7 00 	lds	r21, 0x00B7
    1164:	50 93 a4 00 	sts	0x00A4, r21
					s_time_1=(s_seconds_1+s_minutes_1*60);
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	ec e3       	ldi	r30, 0x3C	; 60
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	8e 9f       	mul	r24, r30
    1170:	90 01       	movw	r18, r0
    1172:	8f 9f       	mul	r24, r31
    1174:	30 0d       	add	r19, r0
    1176:	9e 9f       	mul	r25, r30
    1178:	30 0d       	add	r19, r0
    117a:	11 24       	eor	r1, r1
    117c:	c9 01       	movw	r24, r18
    117e:	84 0f       	add	r24, r20
    1180:	91 1d       	adc	r25, r1
    1182:	aa 27       	eor	r26, r26
    1184:	97 fd       	sbrc	r25, 7
    1186:	a0 95       	com	r26
    1188:	ba 2f       	mov	r27, r26
    118a:	80 93 a0 00 	sts	0x00A0, r24
    118e:	90 93 a1 00 	sts	0x00A1, r25
    1192:	a0 93 a2 00 	sts	0x00A2, r26
    1196:	b0 93 a3 00 	sts	0x00A3, r27
					s_time_2=(s_seconds_2+s_minutes_2*60);
    119a:	85 2f       	mov	r24, r21
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	8e 9f       	mul	r24, r30
    11a0:	90 01       	movw	r18, r0
    11a2:	8f 9f       	mul	r24, r31
    11a4:	30 0d       	add	r19, r0
    11a6:	9e 9f       	mul	r25, r30
    11a8:	30 0d       	add	r19, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	c9 01       	movw	r24, r18
    11ae:	86 0f       	add	r24, r22
    11b0:	91 1d       	adc	r25, r1
    11b2:	aa 27       	eor	r26, r26
    11b4:	97 fd       	sbrc	r25, 7
    11b6:	a0 95       	com	r26
    11b8:	ba 2f       	mov	r27, r26
    11ba:	80 93 9c 00 	sts	0x009C, r24
    11be:	90 93 9d 00 	sts	0x009D, r25
    11c2:	a0 93 9e 00 	sts	0x009E, r26
    11c6:	b0 93 9f 00 	sts	0x009F, r27
				}
				i=0;
    11ca:	10 92 ac 00 	sts	0x00AC, r1
				dr=1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 aa 00 	sts	0x00AA, r24
				//d1[9]=0x00
				//_delay_ms(2000);
				d1[11]=0xff;
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	d3 01       	movw	r26, r6
    11d8:	8c 93       	st	X, r24
			}
			
			if (d1[0]==POINTING_MODE&d1[11]==0xff&dr==1)
    11da:	f7 01       	movw	r30, r14
    11dc:	40 81       	ld	r20, Z
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	83 85       	ldd	r24, Z+11	; 0x0b
    11e2:	8f 3f       	cpi	r24, 0xFF	; 255
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <main+0x33e>
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	30 91 aa 00 	lds	r19, 0x00AA
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	31 30       	cpi	r19, 0x01	; 1
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <main+0x34e>
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	4d 3d       	cpi	r20, 0xDD	; 221
    11fc:	09 f0       	breq	.+2      	; 0x1200 <main+0x356>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	82 23       	and	r24, r18
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	86 23       	and	r24, r22
    1206:	97 23       	and	r25, r23
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	d1 f0       	breq	.+52     	; 0x1240 <main+0x396>
			{
				
				timer1_INIT_WAVE_Fast_PMW_A(degree1);
    120c:	b5 01       	movw	r22, r10
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__floatunsisf>
    1216:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer1_INIT_WAVE_Fast_PMW_A>
				timer1_INIT_WAVE_Fast_PMW_B(degree2);
    121a:	b4 01       	movw	r22, r8
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__floatunsisf>
    1224:	0e 94 15 0b 	call	0x162a	; 0x162a <timer1_INIT_WAVE_Fast_PMW_B>
    1228:	f7 01       	movw	r30, r14
				for (i=0;i<=11;i++)
				{
					d1[i]=0;
    122a:	11 92       	st	Z+, r1
			if (d1[0]==POINTING_MODE&d1[11]==0xff&dr==1)
			{
				
				timer1_INIT_WAVE_Fast_PMW_A(degree1);
				timer1_INIT_WAVE_Fast_PMW_B(degree2);
				for (i=0;i<=11;i++)
    122c:	ec 15       	cp	r30, r12
    122e:	fd 05       	cpc	r31, r13
    1230:	e1 f7       	brne	.-8      	; 0x122a <main+0x380>
				{
					d1[i]=0;
				}
				i=0;
    1232:	10 92 ac 00 	sts	0x00AC, r1
				degree1=0;
				degree2=0;
    1236:	88 24       	eor	r8, r8
    1238:	99 24       	eor	r9, r9
				for (i=0;i<=11;i++)
				{
					d1[i]=0;
				}
				i=0;
				degree1=0;
    123a:	aa 24       	eor	r10, r10
    123c:	bb 24       	eor	r11, r11
    123e:	a0 ce       	rjmp	.-704    	; 0xf80 <main+0xd6>
				degree2=0;
				//dr=0;
				//_delay_ms(2000);
			}
			else if (d1[0]==SLEWING_MODE&d1[11]==0xff&dr>=1)
    1240:	e1 e0       	ldi	r30, 0x01	; 1
    1242:	4e 3d       	cpi	r20, 0xDE	; 222
    1244:	09 f0       	breq	.+2      	; 0x1248 <main+0x39e>
    1246:	e0 e0       	ldi	r30, 0x00	; 0
    1248:	e2 23       	and	r30, r18
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	33 23       	and	r19, r19
    1252:	11 f4       	brne	.+4      	; 0x1258 <main+0x3ae>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	8e 23       	and	r24, r30
    125a:	9f 23       	and	r25, r31
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	09 f4       	brne	.+2      	; 0x1262 <main+0x3b8>
    1260:	4e c1       	rjmp	.+668    	; 0x14fe <main+0x654>
			{
				
				/*starting_sec=second;
				starting_min=minute;*/
				dr++;
    1262:	3f 5f       	subi	r19, 0xFF	; 255
    1264:	30 93 aa 00 	sts	0x00AA, r19
				if (s_time_1>0)
    1268:	80 91 a0 00 	lds	r24, 0x00A0
    126c:	90 91 a1 00 	lds	r25, 0x00A1
    1270:	a0 91 a2 00 	lds	r26, 0x00A2
    1274:	b0 91 a3 00 	lds	r27, 0x00A3
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	a1 05       	cpc	r26, r1
    127c:	b1 05       	cpc	r27, r1
    127e:	91 f1       	breq	.+100    	; 0x12e4 <main+0x43a>
				{
					slew_degree1+=(degree1/(s_seconds_1+s_minutes_1*60));
    1280:	40 91 a7 00 	lds	r20, 0x00A7
    1284:	80 91 a6 00 	lds	r24, 0x00A6
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	2c e3       	ldi	r18, 0x3C	; 60
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	82 9f       	mul	r24, r18
    1290:	b0 01       	movw	r22, r0
    1292:	83 9f       	mul	r24, r19
    1294:	70 0d       	add	r23, r0
    1296:	92 9f       	mul	r25, r18
    1298:	70 0d       	add	r23, r0
    129a:	11 24       	eor	r1, r1
    129c:	64 0f       	add	r22, r20
    129e:	71 1d       	adc	r23, r1
    12a0:	c5 01       	movw	r24, r10
    12a2:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__udivmodhi4>
    12a6:	80 91 a9 00 	lds	r24, 0x00A9
    12aa:	68 0f       	add	r22, r24
    12ac:	60 93 a9 00 	sts	0x00A9, r22
					timer1_INIT_WAVE_Fast_PMW_A(slew_degree1);
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__floatunsisf>
    12ba:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer1_INIT_WAVE_Fast_PMW_A>
					s_time_1--;
    12be:	80 91 a0 00 	lds	r24, 0x00A0
    12c2:	90 91 a1 00 	lds	r25, 0x00A1
    12c6:	a0 91 a2 00 	lds	r26, 0x00A2
    12ca:	b0 91 a3 00 	lds	r27, 0x00A3
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	a1 09       	sbc	r26, r1
    12d2:	b1 09       	sbc	r27, r1
    12d4:	80 93 a0 00 	sts	0x00A0, r24
    12d8:	90 93 a1 00 	sts	0x00A1, r25
    12dc:	a0 93 a2 00 	sts	0x00A2, r26
    12e0:	b0 93 a3 00 	sts	0x00A3, r27
				}
				else if (s_time_1==0)
				{
				}
				if (s_time_2>0)
    12e4:	80 91 9c 00 	lds	r24, 0x009C
    12e8:	90 91 9d 00 	lds	r25, 0x009D
    12ec:	a0 91 9e 00 	lds	r26, 0x009E
    12f0:	b0 91 9f 00 	lds	r27, 0x009F
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	a1 05       	cpc	r26, r1
    12f8:	b1 05       	cpc	r27, r1
    12fa:	91 f1       	breq	.+100    	; 0x1360 <main+0x4b6>
				{
					slew_degree2+=(degree2/(s_seconds_2+s_minutes_2*60));
    12fc:	40 91 a5 00 	lds	r20, 0x00A5
    1300:	80 91 a4 00 	lds	r24, 0x00A4
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	2c e3       	ldi	r18, 0x3C	; 60
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	82 9f       	mul	r24, r18
    130c:	b0 01       	movw	r22, r0
    130e:	83 9f       	mul	r24, r19
    1310:	70 0d       	add	r23, r0
    1312:	92 9f       	mul	r25, r18
    1314:	70 0d       	add	r23, r0
    1316:	11 24       	eor	r1, r1
    1318:	64 0f       	add	r22, r20
    131a:	71 1d       	adc	r23, r1
    131c:	c4 01       	movw	r24, r8
    131e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__udivmodhi4>
    1322:	80 91 a8 00 	lds	r24, 0x00A8
    1326:	68 0f       	add	r22, r24
    1328:	60 93 a8 00 	sts	0x00A8, r22
					timer1_INIT_WAVE_Fast_PMW_B(slew_degree2);
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__floatunsisf>
    1336:	0e 94 15 0b 	call	0x162a	; 0x162a <timer1_INIT_WAVE_Fast_PMW_B>
					s_time_2--;
    133a:	80 91 9c 00 	lds	r24, 0x009C
    133e:	90 91 9d 00 	lds	r25, 0x009D
    1342:	a0 91 9e 00 	lds	r26, 0x009E
    1346:	b0 91 9f 00 	lds	r27, 0x009F
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	a1 09       	sbc	r26, r1
    134e:	b1 09       	sbc	r27, r1
    1350:	80 93 9c 00 	sts	0x009C, r24
    1354:	90 93 9d 00 	sts	0x009D, r25
    1358:	a0 93 9e 00 	sts	0x009E, r26
    135c:	b0 93 9f 00 	sts	0x009F, r27
				}
				
				/*to exit mode*/
				
				
				if (dr==1)
    1360:	80 91 aa 00 	lds	r24, 0x00AA
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	81 f4       	brne	.+32     	; 0x1388 <main+0x4de>
				{
					LCD_CLEAR_Screen();
    1368:	0e 94 91 04 	call	0x922	; 0x922 <LCD_CLEAR_Screen>
					LCD_MOVE_CURSOR(1,1);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
					LCD_send_string("degree1:");
    1374:	c2 01       	movw	r24, r4
    1376:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
					LCD_MOVE_CURSOR(2,1);
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
					LCD_send_string("degree2:");
    1382:	c1 01       	movw	r24, r2
    1384:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
					
				}
				LCD_MOVE_CURSOR(1,9);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	69 e0       	ldi	r22, 0x09	; 9
    138c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
				LCD_send_char(' ');
    1390:	80 e2       	ldi	r24, 0x20	; 32
    1392:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
				print_val(slew_degree1);
    1396:	80 91 a9 00 	lds	r24, 0x00A9
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <print_val>
				LCD_send_char(' ');
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
				LCD_MOVE_CURSOR(2,9);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	69 e0       	ldi	r22, 0x09	; 9
    13aa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
				LCD_send_char(' ');
    13ae:	80 e2       	ldi	r24, 0x20	; 32
    13b0:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
				print_val(slew_degree2);
    13b4:	80 91 a8 00 	lds	r24, 0x00A8
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 0e 05 	call	0xa1c	; 0xa1c <print_val>
				LCD_send_char(' ');
    13be:	80 e2       	ldi	r24, 0x20	; 32
    13c0:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
				if (s_time_1==0&s_time_2==0)
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	80 91 a0 00 	lds	r24, 0x00A0
    13ca:	90 91 a1 00 	lds	r25, 0x00A1
    13ce:	a0 91 a2 00 	lds	r26, 0x00A2
    13d2:	b0 91 a3 00 	lds	r27, 0x00A3
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	a1 05       	cpc	r26, r1
    13da:	b1 05       	cpc	r27, r1
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <main+0x536>
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	22 23       	and	r18, r18
    13e2:	39 f1       	breq	.+78     	; 0x1432 <main+0x588>
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	80 91 9c 00 	lds	r24, 0x009C
    13ea:	90 91 9d 00 	lds	r25, 0x009D
    13ee:	a0 91 9e 00 	lds	r26, 0x009E
    13f2:	b0 91 9f 00 	lds	r27, 0x009F
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	a1 05       	cpc	r26, r1
    13fa:	b1 05       	cpc	r27, r1
    13fc:	09 f0       	breq	.+2      	; 0x1400 <main+0x556>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	22 23       	and	r18, r18
    1402:	b9 f0       	breq	.+46     	; 0x1432 <main+0x588>
    1404:	f7 01       	movw	r30, r14
				{
					for (i=0;i<=11;i++)
					{
						d1[i]=0;
    1406:	11 92       	st	Z+, r1
				LCD_send_char(' ');
				print_val(slew_degree2);
				LCD_send_char(' ');
				if (s_time_1==0&s_time_2==0)
				{
					for (i=0;i<=11;i++)
    1408:	ec 15       	cp	r30, r12
    140a:	fd 05       	cpc	r31, r13
    140c:	e1 f7       	brne	.-8      	; 0x1406 <main+0x55c>
					{
						d1[i]=0;
					}
					i=0;
    140e:	10 92 ac 00 	sts	0x00AC, r1
					degree1=0;
					degree2=0;
					s_seconds_1=0,s_seconds_2=0,s_minutes_1=0,s_minutes_2=0;
    1412:	10 92 a7 00 	sts	0x00A7, r1
    1416:	10 92 a5 00 	sts	0x00A5, r1
    141a:	10 92 a6 00 	sts	0x00A6, r1
    141e:	10 92 a4 00 	sts	0x00A4, r1
					slew_degree1=0,slew_degree2=0;
    1422:	10 92 a9 00 	sts	0x00A9, r1
    1426:	10 92 a8 00 	sts	0x00A8, r1
					{
						d1[i]=0;
					}
					i=0;
					degree1=0;
					degree2=0;
    142a:	88 24       	eor	r8, r8
    142c:	99 24       	eor	r9, r9
					for (i=0;i<=11;i++)
					{
						d1[i]=0;
					}
					i=0;
					degree1=0;
    142e:	aa 24       	eor	r10, r10
    1430:	bb 24       	eor	r11, r11
					degree2=0;
					s_seconds_1=0,s_seconds_2=0,s_minutes_1=0,s_minutes_2=0;
					slew_degree1=0,slew_degree2=0;
				}
				starting_time=(second)+(minute*60)+(hours*60*60);
    1432:	60 91 c4 00 	lds	r22, 0x00C4
    1436:	80 91 c2 00 	lds	r24, 0x00C2
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	20 e1       	ldi	r18, 0x10	; 16
    143e:	3e e0       	ldi	r19, 0x0E	; 14
    1440:	82 9f       	mul	r24, r18
    1442:	f0 01       	movw	r30, r0
    1444:	83 9f       	mul	r24, r19
    1446:	f0 0d       	add	r31, r0
    1448:	92 9f       	mul	r25, r18
    144a:	f0 0d       	add	r31, r0
    144c:	11 24       	eor	r1, r1
    144e:	80 91 c3 00 	lds	r24, 0x00C3
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	2c e3       	ldi	r18, 0x3C	; 60
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	82 9f       	mul	r24, r18
    145a:	a0 01       	movw	r20, r0
    145c:	83 9f       	mul	r24, r19
    145e:	50 0d       	add	r21, r0
    1460:	92 9f       	mul	r25, r18
    1462:	50 0d       	add	r21, r0
    1464:	11 24       	eor	r1, r1
    1466:	cf 01       	movw	r24, r30
    1468:	84 0f       	add	r24, r20
    146a:	95 1f       	adc	r25, r21
    146c:	86 0f       	add	r24, r22
    146e:	91 1d       	adc	r25, r1
    1470:	aa 27       	eor	r26, r26
    1472:	97 fd       	sbrc	r25, 7
    1474:	a0 95       	com	r26
    1476:	ba 2f       	mov	r27, r26
    1478:	80 93 bd 00 	sts	0x00BD, r24
    147c:	90 93 be 00 	sts	0x00BE, r25
    1480:	a0 93 bf 00 	sts	0x00BF, r26
    1484:	b0 93 c0 00 	sts	0x00C0, r27
				do 
				{
					TIME_CLOCK();
					time=(second)+(minute*60)+(hours*60*60);
    1488:	0c e3       	ldi	r16, 0x3C	; 60
    148a:	10 e0       	ldi	r17, 0x00	; 0
					slew_degree1=0,slew_degree2=0;
				}
				starting_time=(second)+(minute*60)+(hours*60*60);
				do 
				{
					TIME_CLOCK();
    148c:	0e 94 31 06 	call	0xc62	; 0xc62 <TIME_CLOCK>
					time=(second)+(minute*60)+(hours*60*60);
    1490:	40 91 c4 00 	lds	r20, 0x00C4
    1494:	80 91 c2 00 	lds	r24, 0x00C2
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	20 e1       	ldi	r18, 0x10	; 16
    149c:	3e e0       	ldi	r19, 0x0E	; 14
    149e:	82 9f       	mul	r24, r18
    14a0:	b0 01       	movw	r22, r0
    14a2:	83 9f       	mul	r24, r19
    14a4:	70 0d       	add	r23, r0
    14a6:	92 9f       	mul	r25, r18
    14a8:	70 0d       	add	r23, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	80 91 c3 00 	lds	r24, 0x00C3
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	80 9f       	mul	r24, r16
    14b4:	90 01       	movw	r18, r0
    14b6:	81 9f       	mul	r24, r17
    14b8:	30 0d       	add	r19, r0
    14ba:	90 9f       	mul	r25, r16
    14bc:	30 0d       	add	r19, r0
    14be:	11 24       	eor	r1, r1
    14c0:	cb 01       	movw	r24, r22
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	84 0f       	add	r24, r20
    14c8:	91 1d       	adc	r25, r1
    14ca:	aa 27       	eor	r26, r26
    14cc:	97 fd       	sbrc	r25, 7
    14ce:	a0 95       	com	r26
    14d0:	ba 2f       	mov	r27, r26
    14d2:	80 93 b9 00 	sts	0x00B9, r24
    14d6:	90 93 ba 00 	sts	0x00BA, r25
    14da:	a0 93 bb 00 	sts	0x00BB, r26
    14de:	b0 93 bc 00 	sts	0x00BC, r27
				} while (time==starting_time);
    14e2:	40 91 bd 00 	lds	r20, 0x00BD
    14e6:	50 91 be 00 	lds	r21, 0x00BE
    14ea:	60 91 bf 00 	lds	r22, 0x00BF
    14ee:	70 91 c0 00 	lds	r23, 0x00C0
    14f2:	84 17       	cp	r24, r20
    14f4:	95 07       	cpc	r25, r21
    14f6:	a6 07       	cpc	r26, r22
    14f8:	b7 07       	cpc	r27, r23
    14fa:	41 f2       	breq	.-112    	; 0x148c <main+0x5e2>
    14fc:	41 cd       	rjmp	.-1406   	; 0xf80 <main+0xd6>
			}
			else if (d1[0]==HOMING_MODE&d1[11]==0xff&dr==1)
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	4c 3d       	cpi	r20, 0xDC	; 220
    1502:	09 f0       	breq	.+2      	; 0x1506 <main+0x65c>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	82 23       	and	r24, r18
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	86 23       	and	r24, r22
    150c:	97 23       	and	r25, r23
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	41 f1       	breq	.+80     	; 0x1562 <main+0x6b8>
			{
				timer1_INIT_WAVE_Fast_PMW_A(0);
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	cb 01       	movw	r24, r22
    1518:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <timer1_INIT_WAVE_Fast_PMW_A>
				timer1_INIT_WAVE_Fast_PMW_B(0);
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	cb 01       	movw	r24, r22
    1522:	0e 94 15 0b 	call	0x162a	; 0x162a <timer1_INIT_WAVE_Fast_PMW_B>
				LCD_CLEAR_Screen();
    1526:	0e 94 91 04 	call	0x922	; 0x922 <LCD_CLEAR_Screen>
				LCD_send_string("degree1:");
    152a:	c2 01       	movw	r24, r4
    152c:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
				LCD_send_char('0');
    1530:	80 e3       	ldi	r24, 0x30	; 48
    1532:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
				LCD_MOVE_CURSOR(2,1);
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LCD_MOVE_CURSOR>
				LCD_send_string("degree2:");
    153e:	c1 01       	movw	r24, r2
    1540:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
				LCD_send_char('0');
    1544:	80 e3       	ldi	r24, 0x30	; 48
    1546:	0e 94 ed 03 	call	0x7da	; 0x7da <LCD_send_char>
    154a:	f7 01       	movw	r30, r14
				for (i=0;i<=11;i++)
				{
					d1[i]=0;
    154c:	11 92       	st	Z+, r1
				LCD_send_string("degree1:");
				LCD_send_char('0');
				LCD_MOVE_CURSOR(2,1);
				LCD_send_string("degree2:");
				LCD_send_char('0');
				for (i=0;i<=11;i++)
    154e:	ec 15       	cp	r30, r12
    1550:	fd 05       	cpc	r31, r13
    1552:	e1 f7       	brne	.-8      	; 0x154c <main+0x6a2>
				{
					d1[i]=0;
				}
				i=0;
    1554:	10 92 ac 00 	sts	0x00AC, r1
				degree1=0;
				degree2=0;
    1558:	88 24       	eor	r8, r8
    155a:	99 24       	eor	r9, r9
				for (i=0;i<=11;i++)
				{
					d1[i]=0;
				}
				i=0;
				degree1=0;
    155c:	aa 24       	eor	r10, r10
    155e:	bb 24       	eor	r11, r11
    1560:	0f cd       	rjmp	.-1506   	; 0xf80 <main+0xd6>
				degree2=0;
			}
			else if (d1[0]==TRACKING_MODE&d1[11]==0xff&dr==1)
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	4f 3d       	cpi	r20, 0xDF	; 223
    1566:	09 f0       	breq	.+2      	; 0x156a <main+0x6c0>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	82 23       	and	r24, r18
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	86 23       	and	r24, r22
    1570:	97 23       	and	r25, r23
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	09 f4       	brne	.+2      	; 0x1578 <main+0x6ce>
    1576:	04 cd       	rjmp	.-1528   	; 0xf80 <main+0xd6>
			{
				LCD_CLEAR_Screen();
    1578:	0e 94 91 04 	call	0x922	; 0x922 <LCD_CLEAR_Screen>
				LCD_send_string("Not Supported yet");
    157c:	89 e8       	ldi	r24, 0x89	; 137
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 ef 04 	call	0x9de	; 0x9de <LCD_send_string>
    1584:	f7 01       	movw	r30, r14
				degree1=0;
				degree2=0;
				for (i=0;i<=11;i++)
				{
					d1[i]=0;
    1586:	11 92       	st	Z+, r1
			{
				LCD_CLEAR_Screen();
				LCD_send_string("Not Supported yet");
				degree1=0;
				degree2=0;
				for (i=0;i<=11;i++)
    1588:	ec 15       	cp	r30, r12
    158a:	fd 05       	cpc	r31, r13
    158c:	e1 f7       	brne	.-8      	; 0x1586 <main+0x6dc>
				{
					d1[i]=0;
				}
				i=0;
    158e:	10 92 ac 00 	sts	0x00AC, r1
			else if (d1[0]==TRACKING_MODE&d1[11]==0xff&dr==1)
			{
				LCD_CLEAR_Screen();
				LCD_send_string("Not Supported yet");
				degree1=0;
				degree2=0;
    1592:	88 24       	eor	r8, r8
    1594:	99 24       	eor	r9, r9
			}
			else if (d1[0]==TRACKING_MODE&d1[11]==0xff&dr==1)
			{
				LCD_CLEAR_Screen();
				LCD_send_string("Not Supported yet");
				degree1=0;
    1596:	aa 24       	eor	r10, r10
    1598:	bb 24       	eor	r11, r11
    159a:	f2 cc       	rjmp	.-1564   	; 0xf80 <main+0xd6>

0000159c <timer2_INIT_OVERFLOW_Interrupt>:
#include <avr/interrupt.h>
#include <avr/io.h>

void timer2_INIT_OVERFLOW_Interrupt (void)
{
	SET_BIT(ASSR,AS2);//choose the oscillation source [0 for internal / 1 for TOSC2]
    159c:	82 b5       	in	r24, 0x22	; 34
    159e:	88 60       	ori	r24, 0x08	; 8
    15a0:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS20);//choose the prescaler factor from table
    15a2:	85 b5       	in	r24, 0x25	; 37
    15a4:	81 60       	ori	r24, 0x01	; 1
    15a6:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
    15a8:	85 b5       	in	r24, 0x25	; 37
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	85 bd       	out	0x25, r24	; 37
	
	//enable interrupt
	sei();
    15ae:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);//for overflow interrupt
    15b0:	89 b7       	in	r24, 0x39	; 57
    15b2:	80 64       	ori	r24, 0x40	; 64
    15b4:	89 bf       	out	0x39, r24	; 57
}
    15b6:	08 95       	ret

000015b8 <timer1_INIT_WAVE_Fast_PMW_A>:
void timer1_INIT_WAVE_Fast_PMW_A (double value)
{
	value=value*0.0055555555555556+1.5;
    15b8:	21 e6       	ldi	r18, 0x61	; 97
    15ba:	3b e0       	ldi	r19, 0x0B	; 11
    15bc:	46 eb       	ldi	r20, 0xB6	; 182
    15be:	5b e3       	ldi	r21, 0x3B	; 59
    15c0:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__mulsf3>
	SET_BIT(DDRD,5);//set bin d5 to be output bin
    15c4:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(DDRD,4);
    15c6:	8c 9a       	sbi	0x11, 4	; 17
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
    15c8:	2f b5       	in	r18, 0x2f	; 47
    15ca:	2e 7f       	andi	r18, 0xFE	; 254
    15cc:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,WGM11);
    15ce:	2f b5       	in	r18, 0x2f	; 47
    15d0:	22 60       	ori	r18, 0x02	; 2
    15d2:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
    15d4:	2e b5       	in	r18, 0x2e	; 46
    15d6:	28 60       	ori	r18, 0x08	; 8
    15d8:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
    15da:	2e b5       	in	r18, 0x2e	; 46
    15dc:	20 61       	ori	r18, 0x10	; 16
    15de:	2e bd       	out	0x2e, r18	; 46
	sei();
	SET_BIT(TIMSK,TOIE2);//for overflow interrupt
}
void timer1_INIT_WAVE_Fast_PMW_A (double value)
{
	value=value*0.0055555555555556+1.5;
    15e0:	46 2f       	mov	r20, r22
    15e2:	57 2f       	mov	r21, r23
    15e4:	68 2f       	mov	r22, r24
    15e6:	79 2f       	mov	r23, r25
    15e8:	cb 01       	movw	r24, r22
    15ea:	ba 01       	movw	r22, r20
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 ec       	ldi	r20, 0xC0	; 192
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__addsf3>
	SET_BIT(DDRD,4);
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
	OCR1A=value*1000;//load the OCR1A,ICR1 values
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__mulsf3>
    1604:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9b bd       	out	0x2b, r25	; 43
    160e:	8a bd       	out	0x2a, r24	; 42
	OCR1B=value*1000;
    1610:	99 bd       	out	0x29, r25	; 41
    1612:	88 bd       	out	0x28, r24	; 40
	ICR1=19999;
    1614:	8f e1       	ldi	r24, 0x1F	; 31
    1616:	9e e4       	ldi	r25, 0x4E	; 78
    1618:	97 bd       	out	0x27, r25	; 39
    161a:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1B,CS11);//no prescaling
    161c:	8e b5       	in	r24, 0x2e	; 46
    161e:	82 60       	ori	r24, 0x02	; 2
    1620:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1A1);
    1622:	8f b5       	in	r24, 0x2f	; 47
    1624:	80 68       	ori	r24, 0x80	; 128
    1626:	8f bd       	out	0x2f, r24	; 47
}
    1628:	08 95       	ret

0000162a <timer1_INIT_WAVE_Fast_PMW_B>:

void timer1_INIT_WAVE_Fast_PMW_B (double value)
{
	value=value*0.0055555555555556+1.5;
    162a:	21 e6       	ldi	r18, 0x61	; 97
    162c:	3b e0       	ldi	r19, 0x0B	; 11
    162e:	46 eb       	ldi	r20, 0xB6	; 182
    1630:	5b e3       	ldi	r21, 0x3B	; 59
    1632:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__mulsf3>
	SET_BIT(DDRD,4);//set bin d5 to be output bin
    1636:	8c 9a       	sbi	0x11, 4	; 17
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
    1638:	2f b5       	in	r18, 0x2f	; 47
    163a:	2e 7f       	andi	r18, 0xFE	; 254
    163c:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,WGM11);
    163e:	2f b5       	in	r18, 0x2f	; 47
    1640:	22 60       	ori	r18, 0x02	; 2
    1642:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
    1644:	2e b5       	in	r18, 0x2e	; 46
    1646:	28 60       	ori	r18, 0x08	; 8
    1648:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
    164a:	2e b5       	in	r18, 0x2e	; 46
    164c:	20 61       	ori	r18, 0x10	; 16
    164e:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1A,COM1A1);
}

void timer1_INIT_WAVE_Fast_PMW_B (double value)
{
	value=value*0.0055555555555556+1.5;
    1650:	46 2f       	mov	r20, r22
    1652:	57 2f       	mov	r21, r23
    1654:	68 2f       	mov	r22, r24
    1656:	79 2f       	mov	r23, r25
    1658:	cb 01       	movw	r24, r22
    165a:	ba 01       	movw	r22, r20
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 ec       	ldi	r20, 0xC0	; 192
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__addsf3>
	SET_BIT(DDRD,4);//set bin d5 to be output bin
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
	OCR1B=value*1000;//load the OCR1A,ICR1 values
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a e7       	ldi	r20, 0x7A	; 122
    166e:	54 e4       	ldi	r21, 0x44	; 68
    1670:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__mulsf3>
    1674:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	99 bd       	out	0x29, r25	; 41
    167e:	88 bd       	out	0x28, r24	; 40
	ICR1=19999;
    1680:	8f e1       	ldi	r24, 0x1F	; 31
    1682:	9e e4       	ldi	r25, 0x4E	; 78
    1684:	97 bd       	out	0x27, r25	; 39
    1686:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1B,CS11);//no prescaling
    1688:	8e b5       	in	r24, 0x2e	; 46
    168a:	82 60       	ori	r24, 0x02	; 2
    168c:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1B1);
    168e:	8f b5       	in	r24, 0x2f	; 47
    1690:	80 62       	ori	r24, 0x20	; 32
    1692:	8f bd       	out	0x2f, r24	; 47
    1694:	08 95       	ret

00001696 <__subsf3>:
    1696:	50 58       	subi	r21, 0x80	; 128

00001698 <__addsf3>:
    1698:	bb 27       	eor	r27, r27
    169a:	aa 27       	eor	r26, r26
    169c:	0e d0       	rcall	.+28     	; 0x16ba <__addsf3x>
    169e:	e0 c0       	rjmp	.+448    	; 0x1860 <__fp_round>
    16a0:	d1 d0       	rcall	.+418    	; 0x1844 <__fp_pscA>
    16a2:	30 f0       	brcs	.+12     	; 0x16b0 <__addsf3+0x18>
    16a4:	d6 d0       	rcall	.+428    	; 0x1852 <__fp_pscB>
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <__addsf3+0x18>
    16a8:	31 f4       	brne	.+12     	; 0x16b6 <__addsf3+0x1e>
    16aa:	9f 3f       	cpi	r25, 0xFF	; 255
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <__addsf3+0x1a>
    16ae:	1e f4       	brtc	.+6      	; 0x16b6 <__addsf3+0x1e>
    16b0:	c6 c0       	rjmp	.+396    	; 0x183e <__fp_nan>
    16b2:	0e f4       	brtc	.+2      	; 0x16b6 <__addsf3+0x1e>
    16b4:	e0 95       	com	r30
    16b6:	e7 fb       	bst	r30, 7
    16b8:	bc c0       	rjmp	.+376    	; 0x1832 <__fp_inf>

000016ba <__addsf3x>:
    16ba:	e9 2f       	mov	r30, r25
    16bc:	e2 d0       	rcall	.+452    	; 0x1882 <__fp_split3>
    16be:	80 f3       	brcs	.-32     	; 0x16a0 <__addsf3+0x8>
    16c0:	ba 17       	cp	r27, r26
    16c2:	62 07       	cpc	r22, r18
    16c4:	73 07       	cpc	r23, r19
    16c6:	84 07       	cpc	r24, r20
    16c8:	95 07       	cpc	r25, r21
    16ca:	18 f0       	brcs	.+6      	; 0x16d2 <__addsf3x+0x18>
    16cc:	71 f4       	brne	.+28     	; 0x16ea <__addsf3x+0x30>
    16ce:	9e f5       	brtc	.+102    	; 0x1736 <__addsf3x+0x7c>
    16d0:	fa c0       	rjmp	.+500    	; 0x18c6 <__fp_zero>
    16d2:	0e f4       	brtc	.+2      	; 0x16d6 <__addsf3x+0x1c>
    16d4:	e0 95       	com	r30
    16d6:	0b 2e       	mov	r0, r27
    16d8:	ba 2f       	mov	r27, r26
    16da:	a0 2d       	mov	r26, r0
    16dc:	0b 01       	movw	r0, r22
    16de:	b9 01       	movw	r22, r18
    16e0:	90 01       	movw	r18, r0
    16e2:	0c 01       	movw	r0, r24
    16e4:	ca 01       	movw	r24, r20
    16e6:	a0 01       	movw	r20, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	ff 27       	eor	r31, r31
    16ec:	59 1b       	sub	r21, r25
    16ee:	99 f0       	breq	.+38     	; 0x1716 <__addsf3x+0x5c>
    16f0:	59 3f       	cpi	r21, 0xF9	; 249
    16f2:	50 f4       	brcc	.+20     	; 0x1708 <__addsf3x+0x4e>
    16f4:	50 3e       	cpi	r21, 0xE0	; 224
    16f6:	68 f1       	brcs	.+90     	; 0x1752 <__addsf3x+0x98>
    16f8:	1a 16       	cp	r1, r26
    16fa:	f0 40       	sbci	r31, 0x00	; 0
    16fc:	a2 2f       	mov	r26, r18
    16fe:	23 2f       	mov	r18, r19
    1700:	34 2f       	mov	r19, r20
    1702:	44 27       	eor	r20, r20
    1704:	58 5f       	subi	r21, 0xF8	; 248
    1706:	f3 cf       	rjmp	.-26     	; 0x16ee <__addsf3x+0x34>
    1708:	46 95       	lsr	r20
    170a:	37 95       	ror	r19
    170c:	27 95       	ror	r18
    170e:	a7 95       	ror	r26
    1710:	f0 40       	sbci	r31, 0x00	; 0
    1712:	53 95       	inc	r21
    1714:	c9 f7       	brne	.-14     	; 0x1708 <__addsf3x+0x4e>
    1716:	7e f4       	brtc	.+30     	; 0x1736 <__addsf3x+0x7c>
    1718:	1f 16       	cp	r1, r31
    171a:	ba 0b       	sbc	r27, r26
    171c:	62 0b       	sbc	r22, r18
    171e:	73 0b       	sbc	r23, r19
    1720:	84 0b       	sbc	r24, r20
    1722:	ba f0       	brmi	.+46     	; 0x1752 <__addsf3x+0x98>
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	a1 f0       	breq	.+40     	; 0x1750 <__addsf3x+0x96>
    1728:	ff 0f       	add	r31, r31
    172a:	bb 1f       	adc	r27, r27
    172c:	66 1f       	adc	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	c2 f7       	brpl	.-16     	; 0x1724 <__addsf3x+0x6a>
    1734:	0e c0       	rjmp	.+28     	; 0x1752 <__addsf3x+0x98>
    1736:	ba 0f       	add	r27, r26
    1738:	62 1f       	adc	r22, r18
    173a:	73 1f       	adc	r23, r19
    173c:	84 1f       	adc	r24, r20
    173e:	48 f4       	brcc	.+18     	; 0x1752 <__addsf3x+0x98>
    1740:	87 95       	ror	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b7 95       	ror	r27
    1748:	f7 95       	ror	r31
    174a:	9e 3f       	cpi	r25, 0xFE	; 254
    174c:	08 f0       	brcs	.+2      	; 0x1750 <__addsf3x+0x96>
    174e:	b3 cf       	rjmp	.-154    	; 0x16b6 <__addsf3+0x1e>
    1750:	93 95       	inc	r25
    1752:	88 0f       	add	r24, r24
    1754:	08 f0       	brcs	.+2      	; 0x1758 <__addsf3x+0x9e>
    1756:	99 27       	eor	r25, r25
    1758:	ee 0f       	add	r30, r30
    175a:	97 95       	ror	r25
    175c:	87 95       	ror	r24
    175e:	08 95       	ret

00001760 <__fixunssfsi>:
    1760:	98 d0       	rcall	.+304    	; 0x1892 <__fp_splitA>
    1762:	88 f0       	brcs	.+34     	; 0x1786 <__fixunssfsi+0x26>
    1764:	9f 57       	subi	r25, 0x7F	; 127
    1766:	90 f0       	brcs	.+36     	; 0x178c <__fixunssfsi+0x2c>
    1768:	b9 2f       	mov	r27, r25
    176a:	99 27       	eor	r25, r25
    176c:	b7 51       	subi	r27, 0x17	; 23
    176e:	a0 f0       	brcs	.+40     	; 0x1798 <__fixunssfsi+0x38>
    1770:	d1 f0       	breq	.+52     	; 0x17a6 <__fixunssfsi+0x46>
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	1a f0       	brmi	.+6      	; 0x1782 <__fixunssfsi+0x22>
    177c:	ba 95       	dec	r27
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__fixunssfsi+0x12>
    1780:	12 c0       	rjmp	.+36     	; 0x17a6 <__fixunssfsi+0x46>
    1782:	b1 30       	cpi	r27, 0x01	; 1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <__fixunssfsi+0x46>
    1786:	9f d0       	rcall	.+318    	; 0x18c6 <__fp_zero>
    1788:	b1 e0       	ldi	r27, 0x01	; 1
    178a:	08 95       	ret
    178c:	9c c0       	rjmp	.+312    	; 0x18c6 <__fp_zero>
    178e:	67 2f       	mov	r22, r23
    1790:	78 2f       	mov	r23, r24
    1792:	88 27       	eor	r24, r24
    1794:	b8 5f       	subi	r27, 0xF8	; 248
    1796:	39 f0       	breq	.+14     	; 0x17a6 <__fixunssfsi+0x46>
    1798:	b9 3f       	cpi	r27, 0xF9	; 249
    179a:	cc f3       	brlt	.-14     	; 0x178e <__fixunssfsi+0x2e>
    179c:	86 95       	lsr	r24
    179e:	77 95       	ror	r23
    17a0:	67 95       	ror	r22
    17a2:	b3 95       	inc	r27
    17a4:	d9 f7       	brne	.-10     	; 0x179c <__fixunssfsi+0x3c>
    17a6:	3e f4       	brtc	.+14     	; 0x17b6 <__fixunssfsi+0x56>
    17a8:	90 95       	com	r25
    17aa:	80 95       	com	r24
    17ac:	70 95       	com	r23
    17ae:	61 95       	neg	r22
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	8f 4f       	sbci	r24, 0xFF	; 255
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	08 95       	ret

000017b8 <__floatunsisf>:
    17b8:	e8 94       	clt
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <__floatsisf+0x12>

000017bc <__floatsisf>:
    17bc:	97 fb       	bst	r25, 7
    17be:	3e f4       	brtc	.+14     	; 0x17ce <__floatsisf+0x12>
    17c0:	90 95       	com	r25
    17c2:	80 95       	com	r24
    17c4:	70 95       	com	r23
    17c6:	61 95       	neg	r22
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	99 23       	and	r25, r25
    17d0:	a9 f0       	breq	.+42     	; 0x17fc <__floatsisf+0x40>
    17d2:	f9 2f       	mov	r31, r25
    17d4:	96 e9       	ldi	r25, 0x96	; 150
    17d6:	bb 27       	eor	r27, r27
    17d8:	93 95       	inc	r25
    17da:	f6 95       	lsr	r31
    17dc:	87 95       	ror	r24
    17de:	77 95       	ror	r23
    17e0:	67 95       	ror	r22
    17e2:	b7 95       	ror	r27
    17e4:	f1 11       	cpse	r31, r1
    17e6:	f8 cf       	rjmp	.-16     	; 0x17d8 <__floatsisf+0x1c>
    17e8:	fa f4       	brpl	.+62     	; 0x1828 <__floatsisf+0x6c>
    17ea:	bb 0f       	add	r27, r27
    17ec:	11 f4       	brne	.+4      	; 0x17f2 <__floatsisf+0x36>
    17ee:	60 ff       	sbrs	r22, 0
    17f0:	1b c0       	rjmp	.+54     	; 0x1828 <__floatsisf+0x6c>
    17f2:	6f 5f       	subi	r22, 0xFF	; 255
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	16 c0       	rjmp	.+44     	; 0x1828 <__floatsisf+0x6c>
    17fc:	88 23       	and	r24, r24
    17fe:	11 f0       	breq	.+4      	; 0x1804 <__floatsisf+0x48>
    1800:	96 e9       	ldi	r25, 0x96	; 150
    1802:	11 c0       	rjmp	.+34     	; 0x1826 <__floatsisf+0x6a>
    1804:	77 23       	and	r23, r23
    1806:	21 f0       	breq	.+8      	; 0x1810 <__floatsisf+0x54>
    1808:	9e e8       	ldi	r25, 0x8E	; 142
    180a:	87 2f       	mov	r24, r23
    180c:	76 2f       	mov	r23, r22
    180e:	05 c0       	rjmp	.+10     	; 0x181a <__floatsisf+0x5e>
    1810:	66 23       	and	r22, r22
    1812:	71 f0       	breq	.+28     	; 0x1830 <__floatsisf+0x74>
    1814:	96 e8       	ldi	r25, 0x86	; 134
    1816:	86 2f       	mov	r24, r22
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	2a f0       	brmi	.+10     	; 0x1828 <__floatsisf+0x6c>
    181e:	9a 95       	dec	r25
    1820:	66 0f       	add	r22, r22
    1822:	77 1f       	adc	r23, r23
    1824:	88 1f       	adc	r24, r24
    1826:	da f7       	brpl	.-10     	; 0x181e <__floatsisf+0x62>
    1828:	88 0f       	add	r24, r24
    182a:	96 95       	lsr	r25
    182c:	87 95       	ror	r24
    182e:	97 f9       	bld	r25, 7
    1830:	08 95       	ret

00001832 <__fp_inf>:
    1832:	97 f9       	bld	r25, 7
    1834:	9f 67       	ori	r25, 0x7F	; 127
    1836:	80 e8       	ldi	r24, 0x80	; 128
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	08 95       	ret

0000183e <__fp_nan>:
    183e:	9f ef       	ldi	r25, 0xFF	; 255
    1840:	80 ec       	ldi	r24, 0xC0	; 192
    1842:	08 95       	ret

00001844 <__fp_pscA>:
    1844:	00 24       	eor	r0, r0
    1846:	0a 94       	dec	r0
    1848:	16 16       	cp	r1, r22
    184a:	17 06       	cpc	r1, r23
    184c:	18 06       	cpc	r1, r24
    184e:	09 06       	cpc	r0, r25
    1850:	08 95       	ret

00001852 <__fp_pscB>:
    1852:	00 24       	eor	r0, r0
    1854:	0a 94       	dec	r0
    1856:	12 16       	cp	r1, r18
    1858:	13 06       	cpc	r1, r19
    185a:	14 06       	cpc	r1, r20
    185c:	05 06       	cpc	r0, r21
    185e:	08 95       	ret

00001860 <__fp_round>:
    1860:	09 2e       	mov	r0, r25
    1862:	03 94       	inc	r0
    1864:	00 0c       	add	r0, r0
    1866:	11 f4       	brne	.+4      	; 0x186c <__fp_round+0xc>
    1868:	88 23       	and	r24, r24
    186a:	52 f0       	brmi	.+20     	; 0x1880 <__fp_round+0x20>
    186c:	bb 0f       	add	r27, r27
    186e:	40 f4       	brcc	.+16     	; 0x1880 <__fp_round+0x20>
    1870:	bf 2b       	or	r27, r31
    1872:	11 f4       	brne	.+4      	; 0x1878 <__fp_round+0x18>
    1874:	60 ff       	sbrs	r22, 0
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <__fp_round+0x20>
    1878:	6f 5f       	subi	r22, 0xFF	; 255
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	08 95       	ret

00001882 <__fp_split3>:
    1882:	57 fd       	sbrc	r21, 7
    1884:	90 58       	subi	r25, 0x80	; 128
    1886:	44 0f       	add	r20, r20
    1888:	55 1f       	adc	r21, r21
    188a:	59 f0       	breq	.+22     	; 0x18a2 <__fp_splitA+0x10>
    188c:	5f 3f       	cpi	r21, 0xFF	; 255
    188e:	71 f0       	breq	.+28     	; 0x18ac <__fp_splitA+0x1a>
    1890:	47 95       	ror	r20

00001892 <__fp_splitA>:
    1892:	88 0f       	add	r24, r24
    1894:	97 fb       	bst	r25, 7
    1896:	99 1f       	adc	r25, r25
    1898:	61 f0       	breq	.+24     	; 0x18b2 <__fp_splitA+0x20>
    189a:	9f 3f       	cpi	r25, 0xFF	; 255
    189c:	79 f0       	breq	.+30     	; 0x18bc <__fp_splitA+0x2a>
    189e:	87 95       	ror	r24
    18a0:	08 95       	ret
    18a2:	12 16       	cp	r1, r18
    18a4:	13 06       	cpc	r1, r19
    18a6:	14 06       	cpc	r1, r20
    18a8:	55 1f       	adc	r21, r21
    18aa:	f2 cf       	rjmp	.-28     	; 0x1890 <__fp_split3+0xe>
    18ac:	46 95       	lsr	r20
    18ae:	f1 df       	rcall	.-30     	; 0x1892 <__fp_splitA>
    18b0:	08 c0       	rjmp	.+16     	; 0x18c2 <__fp_splitA+0x30>
    18b2:	16 16       	cp	r1, r22
    18b4:	17 06       	cpc	r1, r23
    18b6:	18 06       	cpc	r1, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	f1 cf       	rjmp	.-30     	; 0x189e <__fp_splitA+0xc>
    18bc:	86 95       	lsr	r24
    18be:	71 05       	cpc	r23, r1
    18c0:	61 05       	cpc	r22, r1
    18c2:	08 94       	sec
    18c4:	08 95       	ret

000018c6 <__fp_zero>:
    18c6:	e8 94       	clt

000018c8 <__fp_szero>:
    18c8:	bb 27       	eor	r27, r27
    18ca:	66 27       	eor	r22, r22
    18cc:	77 27       	eor	r23, r23
    18ce:	cb 01       	movw	r24, r22
    18d0:	97 f9       	bld	r25, 7
    18d2:	08 95       	ret

000018d4 <__mulsf3>:
    18d4:	0b d0       	rcall	.+22     	; 0x18ec <__mulsf3x>
    18d6:	c4 cf       	rjmp	.-120    	; 0x1860 <__fp_round>
    18d8:	b5 df       	rcall	.-150    	; 0x1844 <__fp_pscA>
    18da:	28 f0       	brcs	.+10     	; 0x18e6 <__mulsf3+0x12>
    18dc:	ba df       	rcall	.-140    	; 0x1852 <__fp_pscB>
    18de:	18 f0       	brcs	.+6      	; 0x18e6 <__mulsf3+0x12>
    18e0:	95 23       	and	r25, r21
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <__mulsf3+0x12>
    18e4:	a6 cf       	rjmp	.-180    	; 0x1832 <__fp_inf>
    18e6:	ab cf       	rjmp	.-170    	; 0x183e <__fp_nan>
    18e8:	11 24       	eor	r1, r1
    18ea:	ee cf       	rjmp	.-36     	; 0x18c8 <__fp_szero>

000018ec <__mulsf3x>:
    18ec:	ca df       	rcall	.-108    	; 0x1882 <__fp_split3>
    18ee:	a0 f3       	brcs	.-24     	; 0x18d8 <__mulsf3+0x4>

000018f0 <__mulsf3_pse>:
    18f0:	95 9f       	mul	r25, r21
    18f2:	d1 f3       	breq	.-12     	; 0x18e8 <__mulsf3+0x14>
    18f4:	95 0f       	add	r25, r21
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	55 1f       	adc	r21, r21
    18fa:	62 9f       	mul	r22, r18
    18fc:	f0 01       	movw	r30, r0
    18fe:	72 9f       	mul	r23, r18
    1900:	bb 27       	eor	r27, r27
    1902:	f0 0d       	add	r31, r0
    1904:	b1 1d       	adc	r27, r1
    1906:	63 9f       	mul	r22, r19
    1908:	aa 27       	eor	r26, r26
    190a:	f0 0d       	add	r31, r0
    190c:	b1 1d       	adc	r27, r1
    190e:	aa 1f       	adc	r26, r26
    1910:	64 9f       	mul	r22, r20
    1912:	66 27       	eor	r22, r22
    1914:	b0 0d       	add	r27, r0
    1916:	a1 1d       	adc	r26, r1
    1918:	66 1f       	adc	r22, r22
    191a:	82 9f       	mul	r24, r18
    191c:	22 27       	eor	r18, r18
    191e:	b0 0d       	add	r27, r0
    1920:	a1 1d       	adc	r26, r1
    1922:	62 1f       	adc	r22, r18
    1924:	73 9f       	mul	r23, r19
    1926:	b0 0d       	add	r27, r0
    1928:	a1 1d       	adc	r26, r1
    192a:	62 1f       	adc	r22, r18
    192c:	83 9f       	mul	r24, r19
    192e:	a0 0d       	add	r26, r0
    1930:	61 1d       	adc	r22, r1
    1932:	22 1f       	adc	r18, r18
    1934:	74 9f       	mul	r23, r20
    1936:	33 27       	eor	r19, r19
    1938:	a0 0d       	add	r26, r0
    193a:	61 1d       	adc	r22, r1
    193c:	23 1f       	adc	r18, r19
    193e:	84 9f       	mul	r24, r20
    1940:	60 0d       	add	r22, r0
    1942:	21 1d       	adc	r18, r1
    1944:	82 2f       	mov	r24, r18
    1946:	76 2f       	mov	r23, r22
    1948:	6a 2f       	mov	r22, r26
    194a:	11 24       	eor	r1, r1
    194c:	9f 57       	subi	r25, 0x7F	; 127
    194e:	50 40       	sbci	r21, 0x00	; 0
    1950:	8a f0       	brmi	.+34     	; 0x1974 <__mulsf3_pse+0x84>
    1952:	e1 f0       	breq	.+56     	; 0x198c <__mulsf3_pse+0x9c>
    1954:	88 23       	and	r24, r24
    1956:	4a f0       	brmi	.+18     	; 0x196a <__mulsf3_pse+0x7a>
    1958:	ee 0f       	add	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	bb 1f       	adc	r27, r27
    195e:	66 1f       	adc	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	88 1f       	adc	r24, r24
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	50 40       	sbci	r21, 0x00	; 0
    1968:	a9 f7       	brne	.-22     	; 0x1954 <__mulsf3_pse+0x64>
    196a:	9e 3f       	cpi	r25, 0xFE	; 254
    196c:	51 05       	cpc	r21, r1
    196e:	70 f0       	brcs	.+28     	; 0x198c <__mulsf3_pse+0x9c>
    1970:	60 cf       	rjmp	.-320    	; 0x1832 <__fp_inf>
    1972:	aa cf       	rjmp	.-172    	; 0x18c8 <__fp_szero>
    1974:	5f 3f       	cpi	r21, 0xFF	; 255
    1976:	ec f3       	brlt	.-6      	; 0x1972 <__mulsf3_pse+0x82>
    1978:	98 3e       	cpi	r25, 0xE8	; 232
    197a:	dc f3       	brlt	.-10     	; 0x1972 <__mulsf3_pse+0x82>
    197c:	86 95       	lsr	r24
    197e:	77 95       	ror	r23
    1980:	67 95       	ror	r22
    1982:	b7 95       	ror	r27
    1984:	f7 95       	ror	r31
    1986:	e7 95       	ror	r30
    1988:	9f 5f       	subi	r25, 0xFF	; 255
    198a:	c1 f7       	brne	.-16     	; 0x197c <__mulsf3_pse+0x8c>
    198c:	fe 2b       	or	r31, r30
    198e:	88 0f       	add	r24, r24
    1990:	91 1d       	adc	r25, r1
    1992:	96 95       	lsr	r25
    1994:	87 95       	ror	r24
    1996:	97 f9       	bld	r25, 7
    1998:	08 95       	ret

0000199a <__udivmodqi4>:
    199a:	99 1b       	sub	r25, r25
    199c:	79 e0       	ldi	r23, 0x09	; 9
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <__udivmodqi4_ep>

000019a0 <__udivmodqi4_loop>:
    19a0:	99 1f       	adc	r25, r25
    19a2:	96 17       	cp	r25, r22
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <__udivmodqi4_ep>
    19a6:	96 1b       	sub	r25, r22

000019a8 <__udivmodqi4_ep>:
    19a8:	88 1f       	adc	r24, r24
    19aa:	7a 95       	dec	r23
    19ac:	c9 f7       	brne	.-14     	; 0x19a0 <__udivmodqi4_loop>
    19ae:	80 95       	com	r24
    19b0:	08 95       	ret

000019b2 <__udivmodhi4>:
    19b2:	aa 1b       	sub	r26, r26
    19b4:	bb 1b       	sub	r27, r27
    19b6:	51 e1       	ldi	r21, 0x11	; 17
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <__udivmodhi4_ep>

000019ba <__udivmodhi4_loop>:
    19ba:	aa 1f       	adc	r26, r26
    19bc:	bb 1f       	adc	r27, r27
    19be:	a6 17       	cp	r26, r22
    19c0:	b7 07       	cpc	r27, r23
    19c2:	10 f0       	brcs	.+4      	; 0x19c8 <__udivmodhi4_ep>
    19c4:	a6 1b       	sub	r26, r22
    19c6:	b7 0b       	sbc	r27, r23

000019c8 <__udivmodhi4_ep>:
    19c8:	88 1f       	adc	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	5a 95       	dec	r21
    19ce:	a9 f7       	brne	.-22     	; 0x19ba <__udivmodhi4_loop>
    19d0:	80 95       	com	r24
    19d2:	90 95       	com	r25
    19d4:	bc 01       	movw	r22, r24
    19d6:	cd 01       	movw	r24, r26
    19d8:	08 95       	ret

000019da <__divmodhi4>:
    19da:	97 fb       	bst	r25, 7
    19dc:	09 2e       	mov	r0, r25
    19de:	07 26       	eor	r0, r23
    19e0:	0a d0       	rcall	.+20     	; 0x19f6 <__divmodhi4_neg1>
    19e2:	77 fd       	sbrc	r23, 7
    19e4:	04 d0       	rcall	.+8      	; 0x19ee <__divmodhi4_neg2>
    19e6:	e5 df       	rcall	.-54     	; 0x19b2 <__udivmodhi4>
    19e8:	06 d0       	rcall	.+12     	; 0x19f6 <__divmodhi4_neg1>
    19ea:	00 20       	and	r0, r0
    19ec:	1a f4       	brpl	.+6      	; 0x19f4 <__divmodhi4_exit>

000019ee <__divmodhi4_neg2>:
    19ee:	70 95       	com	r23
    19f0:	61 95       	neg	r22
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255

000019f4 <__divmodhi4_exit>:
    19f4:	08 95       	ret

000019f6 <__divmodhi4_neg1>:
    19f6:	f6 f7       	brtc	.-4      	; 0x19f4 <__divmodhi4_exit>
    19f8:	90 95       	com	r25
    19fa:	81 95       	neg	r24
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	08 95       	ret

00001a00 <__udivmodsi4>:
    1a00:	a1 e2       	ldi	r26, 0x21	; 33
    1a02:	1a 2e       	mov	r1, r26
    1a04:	aa 1b       	sub	r26, r26
    1a06:	bb 1b       	sub	r27, r27
    1a08:	fd 01       	movw	r30, r26
    1a0a:	0d c0       	rjmp	.+26     	; 0x1a26 <__udivmodsi4_ep>

00001a0c <__udivmodsi4_loop>:
    1a0c:	aa 1f       	adc	r26, r26
    1a0e:	bb 1f       	adc	r27, r27
    1a10:	ee 1f       	adc	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	a2 17       	cp	r26, r18
    1a16:	b3 07       	cpc	r27, r19
    1a18:	e4 07       	cpc	r30, r20
    1a1a:	f5 07       	cpc	r31, r21
    1a1c:	20 f0       	brcs	.+8      	; 0x1a26 <__udivmodsi4_ep>
    1a1e:	a2 1b       	sub	r26, r18
    1a20:	b3 0b       	sbc	r27, r19
    1a22:	e4 0b       	sbc	r30, r20
    1a24:	f5 0b       	sbc	r31, r21

00001a26 <__udivmodsi4_ep>:
    1a26:	66 1f       	adc	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	1a 94       	dec	r1
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <__udivmodsi4_loop>
    1a32:	60 95       	com	r22
    1a34:	70 95       	com	r23
    1a36:	80 95       	com	r24
    1a38:	90 95       	com	r25
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	bd 01       	movw	r22, r26
    1a40:	cf 01       	movw	r24, r30
    1a42:	08 95       	ret

00001a44 <_exit>:
    1a44:	f8 94       	cli

00001a46 <__stop_program>:
    1a46:	ff cf       	rjmp	.-2      	; 0x1a46 <__stop_program>
