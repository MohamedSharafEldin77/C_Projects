
Slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000011f6  0000128a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00001290  2**0
                  ALLOC
  3 .stab         00001c14  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000005e5  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00003490  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013eb  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00004a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc2  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00005dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f02  00000000  00000000  000066e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
      8a:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_INIT>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void ADC_INIT (void)
{
	SET_BIT(ADMUX,REFS0);
      92:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);//for 1 1 to get 2.56v internal
      94:	3f 9a       	sbi	0x07, 7	; 7
	SET_BIT(ADMUX,MUX4);//to get the (A0-A1)*1 [differential mode] remove it to get back page_215
      96:	3c 9a       	sbi	0x07, 4	; 7
	SET_BIT(ADCSRA,ADEN);
      98:	37 9a       	sbi	0x06, 7	; 6
	//set the clock generated to the ADC
	SET_BIT(ADCSRA,ADPS1);
      9a:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADPS2);
      9c:	32 9a       	sbi	0x06, 2	; 6
}
      9e:	08 95       	ret

000000a0 <ADC_read>:
unsigned short ADC_read (void)
{
	unsigned short read_value;
	SET_BIT(ADCSRA,ADSC);
      a0:	36 9a       	sbi	0x06, 6	; 6
	while(READ_BIT(ADCSRA,ADSC)==1);
      a2:	36 99       	sbic	0x06, 6	; 6
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_read+0x2>
	/*while(READ_BIT(ADCSRA,ADIF)==0);
	SET_BIT(ADCSRA,ADIF);//clear ADIF*/
	read_value=ADCL;
      a6:	84 b1       	in	r24, 0x04	; 4
      a8:	90 e0       	ldi	r25, 0x00	; 0
	read_value|=(ADCH<<8);
      aa:	45 b1       	in	r20, 0x05	; 5
      ac:	34 2f       	mov	r19, r20
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	82 2b       	or	r24, r18
      b2:	93 2b       	or	r25, r19
	return read_value;
      b4:	08 95       	ret

000000b6 <UART_INIT>:
#include "DIO.h"
//#define 


void UART_INIT (unsigned long baud)
{
      b6:	dc 01       	movw	r26, r24
      b8:	cb 01       	movw	r24, r22
	unsigned short UBRR;
	UBRR=(F_CPU/(16*baud))-1;
      ba:	88 0f       	add	r24, r24
      bc:	99 1f       	adc	r25, r25
      be:	aa 1f       	adc	r26, r26
      c0:	bb 1f       	adc	r27, r27
      c2:	88 0f       	add	r24, r24
      c4:	99 1f       	adc	r25, r25
      c6:	aa 1f       	adc	r26, r26
      c8:	bb 1f       	adc	r27, r27
      ca:	9c 01       	movw	r18, r24
      cc:	ad 01       	movw	r20, r26
      ce:	22 0f       	add	r18, r18
      d0:	33 1f       	adc	r19, r19
      d2:	44 1f       	adc	r20, r20
      d4:	55 1f       	adc	r21, r21
      d6:	22 0f       	add	r18, r18
      d8:	33 1f       	adc	r19, r19
      da:	44 1f       	adc	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	72 e1       	ldi	r23, 0x12	; 18
      e2:	8a e7       	ldi	r24, 0x7A	; 122
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 c3 08 	call	0x1186	; 0x1186 <__udivmodsi4>
      ea:	21 50       	subi	r18, 0x01	; 1
      ec:	30 40       	sbci	r19, 0x00	; 0
	UBRRH=(unsigned char)(UBRR>>8);
      ee:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)(UBRR);//choosing the baud speed from the equation
      f0:	29 b9       	out	0x09, r18	; 9
	
	UCSRB|=(1<<RXEN)|(1<<TXEN);//enable the RX , TX in UCSRB
      f2:	8a b1       	in	r24, 0x0a	; 10
      f4:	88 61       	ori	r24, 0x18	; 24
      f6:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC|=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//setting the 8-bit character size with URSEL to choose UCSRC
      f8:	80 b5       	in	r24, 0x20	; 32
      fa:	86 68       	ori	r24, 0x86	; 134
      fc:	80 bd       	out	0x20, r24	; 32
}
      fe:	08 95       	ret

00000100 <UART_send_data>:
void UART_send_data (char data)
{
	while (READ_BIT(UCSRA,UDRE)==0);//waiting data register empty bit to be 1 so it is clear to write
     100:	5d 9b       	sbis	0x0b, 5	; 11
     102:	fe cf       	rjmp	.-4      	; 0x100 <UART_send_data>
	UDR=data;//writing
     104:	8c b9       	out	0x0c, r24	; 12
}
     106:	08 95       	ret

00000108 <UART_receive_data>:
char UART_receive_data (void)
{
	while (READ_BIT(UCSRA,RXC)==0);
     108:	5f 9b       	sbis	0x0b, 7	; 11
     10a:	fe cf       	rjmp	.-4      	; 0x108 <UART_receive_data>
	return UDR;
     10c:	8c b1       	in	r24, 0x0c	; 12
}
     10e:	08 95       	ret

00000110 <UART_send_string>:
void UART_send_string (char *ptr)
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	ec 01       	movw	r28, r24
	while (*ptr!=0)
     116:	88 81       	ld	r24, Y
     118:	88 23       	and	r24, r24
     11a:	79 f0       	breq	.+30     	; 0x13a <UART_send_string+0x2a>
char UART_receive_data (void)
{
	while (READ_BIT(UCSRA,RXC)==0);
	return UDR;
}
void UART_send_string (char *ptr)
     11c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		UART_send_data(*ptr);
     11e:	0e 94 80 00 	call	0x100	; 0x100 <UART_send_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     122:	8f e7       	ldi	r24, 0x7F	; 127
     124:	98 e3       	ldi	r25, 0x38	; 56
     126:	a1 e0       	ldi	r26, 0x01	; 1
     128:	81 50       	subi	r24, 0x01	; 1
     12a:	90 40       	sbci	r25, 0x00	; 0
     12c:	a0 40       	sbci	r26, 0x00	; 0
     12e:	e1 f7       	brne	.-8      	; 0x128 <UART_send_string+0x18>
     130:	00 c0       	rjmp	.+0      	; 0x132 <UART_send_string+0x22>
     132:	00 00       	nop
	while (READ_BIT(UCSRA,RXC)==0);
	return UDR;
}
void UART_send_string (char *ptr)
{
	while (*ptr!=0)
     134:	89 91       	ld	r24, Y+
     136:	88 23       	and	r24, r24
     138:	91 f7       	brne	.-28     	; 0x11e <UART_send_string+0xe>
	{
		UART_send_data(*ptr);
		ptr++;
		_delay_ms(50);
	}
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <SPI_MASTER_INIT>:
void SPI_MASTER_INIT (void)
{
	DIO_set_PIN_dir('b',4,1);//SS
     140:	82 e6       	ldi	r24, 0x62	; 98
     142:	64 e0       	ldi	r22, 0x04	; 4
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',5,1);//MOSI
     14a:	82 e6       	ldi	r24, 0x62	; 98
     14c:	65 e0       	ldi	r22, 0x05	; 5
     14e:	41 e0       	ldi	r20, 0x01	; 1
     150:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',6,0);//MISO
     154:	82 e6       	ldi	r24, 0x62	; 98
     156:	66 e0       	ldi	r22, 0x06	; 6
     158:	40 e0       	ldi	r20, 0x00	; 0
     15a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('b',7,1);//SCK
     15e:	82 e6       	ldi	r24, 0x62	; 98
     160:	67 e0       	ldi	r22, 0x07	; 7
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	SET_BIT(SPCR,MSTR);//enable Master
     168:	6c 9a       	sbi	0x0d, 4	; 13
	SET_BIT(SPCR,SPE);//set SPE to enable the SPI
     16a:	6e 9a       	sbi	0x0d, 6	; 13
	DIO_output_PIN_on_port('b',4,1);//SS to logic high (idle)
     16c:	82 e6       	ldi	r24, 0x62	; 98
     16e:	64 e0       	ldi	r22, 0x04	; 4
     170:	41 e0       	ldi	r20, 0x01	; 1
     172:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
}
     176:	08 95       	ret

00000178 <SPI_SLAVE_INIT>:
void SPI_SLAVE_INIT (void)
{
	SET_BIT(SPCR,SPE);//set SPE to enable the SPI
     178:	6e 9a       	sbi	0x0d, 6	; 13
	SET_BIT(SPCR,SPIE);//set SPIE to enable the Interrupt
     17a:	6f 9a       	sbi	0x0d, 7	; 13
	DIO_set_PIN_dir('b',6,1);//Set MISO output
     17c:	82 e6       	ldi	r24, 0x62	; 98
     17e:	66 e0       	ldi	r22, 0x06	; 6
     180:	41 e0       	ldi	r20, 0x01	; 1
     182:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
}
     186:	08 95       	ret

00000188 <SPI_MASTER_Transmit_char>:
unsigned char SPI_MASTER_Transmit_char (unsigned char data,unsigned char slave_SS)
{
     188:	cf 93       	push	r28
     18a:	c8 2f       	mov	r28, r24
	DIO_output_PIN_on_port('b',slave_SS,0);
     18c:	82 e6       	ldi	r24, 0x62	; 98
     18e:	40 e0       	ldi	r20, 0x00	; 0
     190:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
	SPDR=data;//put the data into SPDR to be transmitted
     194:	cf b9       	out	0x0f, r28	; 15
	while (READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
     196:	77 9b       	sbis	0x0e, 7	; 14
     198:	fe cf       	rjmp	.-4      	; 0x196 <SPI_MASTER_Transmit_char+0xe>
	return SPDR;
     19a:	8f b1       	in	r24, 0x0f	; 15
}
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <SPI_SLAVE_recieve_char>:
unsigned char SPI_SLAVE_recieve_char (unsigned char data)
{
	SPDR=data;
     1a0:	8f b9       	out	0x0f, r24	; 15
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
     1a2:	77 9b       	sbis	0x0e, 7	; 14
     1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <SPI_SLAVE_recieve_char+0x2>
	return SPDR;
     1a6:	8f b1       	in	r24, 0x0f	; 15
}
     1a8:	08 95       	ret

000001aa <SPI_MASTER_Transmit_string>:
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
{
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	ec 01       	movw	r28, r24
     1b2:	16 2f       	mov	r17, r22
	while ((*ptr)!=0)
     1b4:	88 81       	ld	r24, Y
     1b6:	88 23       	and	r24, r24
     1b8:	81 f0       	breq	.+32     	; 0x1da <SPI_MASTER_Transmit_string+0x30>
{
	SPDR=data;
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
	return SPDR;
}
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
     1ba:	21 96       	adiw	r28, 0x01	; 1
{
	while ((*ptr)!=0)
	{
		SPI_MASTER_Transmit_char(*ptr,slave_SS);
     1bc:	61 2f       	mov	r22, r17
     1be:	0e 94 c4 00 	call	0x188	; 0x188 <SPI_MASTER_Transmit_char>
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	92 e5       	ldi	r25, 0x52	; 82
     1c6:	a7 e0       	ldi	r26, 0x07	; 7
     1c8:	81 50       	subi	r24, 0x01	; 1
     1ca:	90 40       	sbci	r25, 0x00	; 0
     1cc:	a0 40       	sbci	r26, 0x00	; 0
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <SPI_MASTER_Transmit_string+0x1e>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <SPI_MASTER_Transmit_string+0x28>
     1d2:	00 00       	nop
	while(READ_BIT(SPSR,SPIF)==0);//waiting till transmission is finished
	return SPDR;
}
unsigned char SPI_MASTER_Transmit_string (unsigned char *ptr,unsigned char slave_SS)
{
	while ((*ptr)!=0)
     1d4:	89 91       	ld	r24, Y+
     1d6:	88 23       	and	r24, r24
     1d8:	89 f7       	brne	.-30     	; 0x1bc <SPI_MASTER_Transmit_string+0x12>
	{
		SPI_MASTER_Transmit_char(*ptr,slave_SS);
		_delay_ms(300);
		ptr++;
	}
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	08 95       	ret

000001e2 <DIO_set_PIN_dir>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void DIO_set_PIN_dir (unsigned char portname,unsigned char pin_number_0_7,unsigned char direction)
{
	switch (portname)
     1e2:	84 34       	cpi	r24, 0x44	; 68
     1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_set_PIN_dir+0x6>
     1e6:	71 c0       	rjmp	.+226    	; 0x2ca <DIO_set_PIN_dir+0xe8>
     1e8:	85 34       	cpi	r24, 0x45	; 69
     1ea:	48 f4       	brcc	.+18     	; 0x1fe <DIO_set_PIN_dir+0x1c>
     1ec:	82 34       	cpi	r24, 0x42	; 66
     1ee:	99 f1       	breq	.+102    	; 0x256 <DIO_set_PIN_dir+0x74>
     1f0:	83 34       	cpi	r24, 0x43	; 67
     1f2:	08 f0       	brcs	.+2      	; 0x1f6 <DIO_set_PIN_dir+0x14>
     1f4:	4d c0       	rjmp	.+154    	; 0x290 <DIO_set_PIN_dir+0xae>
     1f6:	81 34       	cpi	r24, 0x41	; 65
     1f8:	09 f0       	breq	.+2      	; 0x1fc <DIO_set_PIN_dir+0x1a>
     1fa:	83 c0       	rjmp	.+262    	; 0x302 <DIO_set_PIN_dir+0x120>
     1fc:	0f c0       	rjmp	.+30     	; 0x21c <DIO_set_PIN_dir+0x3a>
     1fe:	82 36       	cpi	r24, 0x62	; 98
     200:	51 f1       	breq	.+84     	; 0x256 <DIO_set_PIN_dir+0x74>
     202:	83 36       	cpi	r24, 0x63	; 99
     204:	20 f4       	brcc	.+8      	; 0x20e <DIO_set_PIN_dir+0x2c>
     206:	81 36       	cpi	r24, 0x61	; 97
     208:	09 f0       	breq	.+2      	; 0x20c <DIO_set_PIN_dir+0x2a>
     20a:	7b c0       	rjmp	.+246    	; 0x302 <DIO_set_PIN_dir+0x120>
     20c:	07 c0       	rjmp	.+14     	; 0x21c <DIO_set_PIN_dir+0x3a>
     20e:	83 36       	cpi	r24, 0x63	; 99
     210:	09 f4       	brne	.+2      	; 0x214 <DIO_set_PIN_dir+0x32>
     212:	3e c0       	rjmp	.+124    	; 0x290 <DIO_set_PIN_dir+0xae>
     214:	84 36       	cpi	r24, 0x64	; 100
     216:	09 f0       	breq	.+2      	; 0x21a <DIO_set_PIN_dir+0x38>
     218:	74 c0       	rjmp	.+232    	; 0x302 <DIO_set_PIN_dir+0x120>
     21a:	57 c0       	rjmp	.+174    	; 0x2ca <DIO_set_PIN_dir+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
     21c:	41 30       	cpi	r20, 0x01	; 1
     21e:	69 f4       	brne	.+26     	; 0x23a <DIO_set_PIN_dir+0x58>
		{
			SET_BIT(DDRA,pin_number_0_7);
     220:	2a b3       	in	r18, 0x1a	; 26
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	ac 01       	movw	r20, r24
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_set_PIN_dir+0x4c>
     22a:	44 0f       	add	r20, r20
     22c:	55 1f       	adc	r21, r21
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_set_PIN_dir+0x48>
     232:	ba 01       	movw	r22, r20
     234:	62 2b       	or	r22, r18
     236:	6a bb       	out	0x1a, r22	; 26
     238:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin_number_0_7);
     23a:	2a b3       	in	r18, 0x1a	; 26
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	ac 01       	movw	r20, r24
     242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_set_PIN_dir+0x66>
     244:	44 0f       	add	r20, r20
     246:	55 1f       	adc	r21, r21
     248:	6a 95       	dec	r22
     24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_set_PIN_dir+0x62>
     24c:	ba 01       	movw	r22, r20
     24e:	60 95       	com	r22
     250:	62 23       	and	r22, r18
     252:	6a bb       	out	0x1a, r22	; 26
     254:	08 95       	ret
		}
		break;
		//DDRA=dir==1?DDRA|(1<<pin):DDRA&~(1<<pin);
		case 'B':
		case 'b':
		if (direction==1)
     256:	41 30       	cpi	r20, 0x01	; 1
     258:	69 f4       	brne	.+26     	; 0x274 <DIO_set_PIN_dir+0x92>
		{
			SET_BIT(DDRB,pin_number_0_7);
     25a:	27 b3       	in	r18, 0x17	; 23
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	ac 01       	movw	r20, r24
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_set_PIN_dir+0x86>
     264:	44 0f       	add	r20, r20
     266:	55 1f       	adc	r21, r21
     268:	6a 95       	dec	r22
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_set_PIN_dir+0x82>
     26c:	ba 01       	movw	r22, r20
     26e:	62 2b       	or	r22, r18
     270:	67 bb       	out	0x17, r22	; 23
     272:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin_number_0_7);
     274:	27 b3       	in	r18, 0x17	; 23
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	ac 01       	movw	r20, r24
     27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_set_PIN_dir+0xa0>
     27e:	44 0f       	add	r20, r20
     280:	55 1f       	adc	r21, r21
     282:	6a 95       	dec	r22
     284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_set_PIN_dir+0x9c>
     286:	ba 01       	movw	r22, r20
     288:	60 95       	com	r22
     28a:	62 23       	and	r22, r18
     28c:	67 bb       	out	0x17, r22	; 23
     28e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
     290:	41 30       	cpi	r20, 0x01	; 1
     292:	69 f4       	brne	.+26     	; 0x2ae <DIO_set_PIN_dir+0xcc>
		{
			SET_BIT(DDRC,pin_number_0_7);
     294:	24 b3       	in	r18, 0x14	; 20
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	ac 01       	movw	r20, r24
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_set_PIN_dir+0xc0>
     29e:	44 0f       	add	r20, r20
     2a0:	55 1f       	adc	r21, r21
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_set_PIN_dir+0xbc>
     2a6:	ba 01       	movw	r22, r20
     2a8:	62 2b       	or	r22, r18
     2aa:	64 bb       	out	0x14, r22	; 20
     2ac:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin_number_0_7);
     2ae:	24 b3       	in	r18, 0x14	; 20
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	ac 01       	movw	r20, r24
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_set_PIN_dir+0xda>
     2b8:	44 0f       	add	r20, r20
     2ba:	55 1f       	adc	r21, r21
     2bc:	6a 95       	dec	r22
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_set_PIN_dir+0xd6>
     2c0:	ba 01       	movw	r22, r20
     2c2:	60 95       	com	r22
     2c4:	62 23       	and	r22, r18
     2c6:	64 bb       	out	0x14, r22	; 20
     2c8:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (direction==1)
     2ca:	41 30       	cpi	r20, 0x01	; 1
     2cc:	69 f4       	brne	.+26     	; 0x2e8 <DIO_set_PIN_dir+0x106>
		{
			SET_BIT(DDRD,pin_number_0_7);
     2ce:	21 b3       	in	r18, 0x11	; 17
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	ac 01       	movw	r20, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_set_PIN_dir+0xfa>
     2d8:	44 0f       	add	r20, r20
     2da:	55 1f       	adc	r21, r21
     2dc:	6a 95       	dec	r22
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_set_PIN_dir+0xf6>
     2e0:	ba 01       	movw	r22, r20
     2e2:	62 2b       	or	r22, r18
     2e4:	61 bb       	out	0x11, r22	; 17
     2e6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin_number_0_7);
     2e8:	21 b3       	in	r18, 0x11	; 17
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	ac 01       	movw	r20, r24
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_set_PIN_dir+0x114>
     2f2:	44 0f       	add	r20, r20
     2f4:	55 1f       	adc	r21, r21
     2f6:	6a 95       	dec	r22
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_set_PIN_dir+0x110>
     2fa:	ba 01       	movw	r22, r20
     2fc:	60 95       	com	r22
     2fe:	62 23       	and	r22, r18
     300:	61 bb       	out	0x11, r22	; 17
     302:	08 95       	ret

00000304 <DIO_output_PIN_on_port>:
		break;
	}
}
void DIO_output_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7,unsigned char output)
{
	switch (portname)
     304:	84 34       	cpi	r24, 0x44	; 68
     306:	09 f4       	brne	.+2      	; 0x30a <DIO_output_PIN_on_port+0x6>
     308:	71 c0       	rjmp	.+226    	; 0x3ec <DIO_output_PIN_on_port+0xe8>
     30a:	85 34       	cpi	r24, 0x45	; 69
     30c:	48 f4       	brcc	.+18     	; 0x320 <DIO_output_PIN_on_port+0x1c>
     30e:	82 34       	cpi	r24, 0x42	; 66
     310:	99 f1       	breq	.+102    	; 0x378 <DIO_output_PIN_on_port+0x74>
     312:	83 34       	cpi	r24, 0x43	; 67
     314:	08 f0       	brcs	.+2      	; 0x318 <DIO_output_PIN_on_port+0x14>
     316:	4d c0       	rjmp	.+154    	; 0x3b2 <DIO_output_PIN_on_port+0xae>
     318:	81 34       	cpi	r24, 0x41	; 65
     31a:	09 f0       	breq	.+2      	; 0x31e <DIO_output_PIN_on_port+0x1a>
     31c:	83 c0       	rjmp	.+262    	; 0x424 <DIO_output_PIN_on_port+0x120>
     31e:	0f c0       	rjmp	.+30     	; 0x33e <DIO_output_PIN_on_port+0x3a>
     320:	82 36       	cpi	r24, 0x62	; 98
     322:	51 f1       	breq	.+84     	; 0x378 <DIO_output_PIN_on_port+0x74>
     324:	83 36       	cpi	r24, 0x63	; 99
     326:	20 f4       	brcc	.+8      	; 0x330 <DIO_output_PIN_on_port+0x2c>
     328:	81 36       	cpi	r24, 0x61	; 97
     32a:	09 f0       	breq	.+2      	; 0x32e <DIO_output_PIN_on_port+0x2a>
     32c:	7b c0       	rjmp	.+246    	; 0x424 <DIO_output_PIN_on_port+0x120>
     32e:	07 c0       	rjmp	.+14     	; 0x33e <DIO_output_PIN_on_port+0x3a>
     330:	83 36       	cpi	r24, 0x63	; 99
     332:	09 f4       	brne	.+2      	; 0x336 <DIO_output_PIN_on_port+0x32>
     334:	3e c0       	rjmp	.+124    	; 0x3b2 <DIO_output_PIN_on_port+0xae>
     336:	84 36       	cpi	r24, 0x64	; 100
     338:	09 f0       	breq	.+2      	; 0x33c <DIO_output_PIN_on_port+0x38>
     33a:	74 c0       	rjmp	.+232    	; 0x424 <DIO_output_PIN_on_port+0x120>
     33c:	57 c0       	rjmp	.+174    	; 0x3ec <DIO_output_PIN_on_port+0xe8>
	{
		case 'A':
		case 'a':
		if (output==1)
     33e:	41 30       	cpi	r20, 0x01	; 1
     340:	69 f4       	brne	.+26     	; 0x35c <DIO_output_PIN_on_port+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
     342:	2b b3       	in	r18, 0x1b	; 27
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	ac 01       	movw	r20, r24
     34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_output_PIN_on_port+0x4c>
     34c:	44 0f       	add	r20, r20
     34e:	55 1f       	adc	r21, r21
     350:	6a 95       	dec	r22
     352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_output_PIN_on_port+0x48>
     354:	ba 01       	movw	r22, r20
     356:	62 2b       	or	r22, r18
     358:	6b bb       	out	0x1b, r22	; 27
     35a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
     35c:	2b b3       	in	r18, 0x1b	; 27
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	ac 01       	movw	r20, r24
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_output_PIN_on_port+0x66>
     366:	44 0f       	add	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	6a 95       	dec	r22
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_output_PIN_on_port+0x62>
     36e:	ba 01       	movw	r22, r20
     370:	60 95       	com	r22
     372:	62 23       	and	r22, r18
     374:	6b bb       	out	0x1b, r22	; 27
     376:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (output==1)
     378:	41 30       	cpi	r20, 0x01	; 1
     37a:	69 f4       	brne	.+26     	; 0x396 <DIO_output_PIN_on_port+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
     37c:	28 b3       	in	r18, 0x18	; 24
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	ac 01       	movw	r20, r24
     384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_output_PIN_on_port+0x86>
     386:	44 0f       	add	r20, r20
     388:	55 1f       	adc	r21, r21
     38a:	6a 95       	dec	r22
     38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_output_PIN_on_port+0x82>
     38e:	ba 01       	movw	r22, r20
     390:	62 2b       	or	r22, r18
     392:	68 bb       	out	0x18, r22	; 24
     394:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
     396:	28 b3       	in	r18, 0x18	; 24
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	ac 01       	movw	r20, r24
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_output_PIN_on_port+0xa0>
     3a0:	44 0f       	add	r20, r20
     3a2:	55 1f       	adc	r21, r21
     3a4:	6a 95       	dec	r22
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_output_PIN_on_port+0x9c>
     3a8:	ba 01       	movw	r22, r20
     3aa:	60 95       	com	r22
     3ac:	62 23       	and	r22, r18
     3ae:	68 bb       	out	0x18, r22	; 24
     3b0:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (output==1)
     3b2:	41 30       	cpi	r20, 0x01	; 1
     3b4:	69 f4       	brne	.+26     	; 0x3d0 <DIO_output_PIN_on_port+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
     3b6:	25 b3       	in	r18, 0x15	; 21
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	ac 01       	movw	r20, r24
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_output_PIN_on_port+0xc0>
     3c0:	44 0f       	add	r20, r20
     3c2:	55 1f       	adc	r21, r21
     3c4:	6a 95       	dec	r22
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_output_PIN_on_port+0xbc>
     3c8:	ba 01       	movw	r22, r20
     3ca:	62 2b       	or	r22, r18
     3cc:	65 bb       	out	0x15, r22	; 21
     3ce:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
     3d0:	25 b3       	in	r18, 0x15	; 21
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	ac 01       	movw	r20, r24
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_output_PIN_on_port+0xda>
     3da:	44 0f       	add	r20, r20
     3dc:	55 1f       	adc	r21, r21
     3de:	6a 95       	dec	r22
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_output_PIN_on_port+0xd6>
     3e2:	ba 01       	movw	r22, r20
     3e4:	60 95       	com	r22
     3e6:	62 23       	and	r22, r18
     3e8:	65 bb       	out	0x15, r22	; 21
     3ea:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (output==1)
     3ec:	41 30       	cpi	r20, 0x01	; 1
     3ee:	69 f4       	brne	.+26     	; 0x40a <DIO_output_PIN_on_port+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
     3f0:	22 b3       	in	r18, 0x12	; 18
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	ac 01       	movw	r20, r24
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_output_PIN_on_port+0xfa>
     3fa:	44 0f       	add	r20, r20
     3fc:	55 1f       	adc	r21, r21
     3fe:	6a 95       	dec	r22
     400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_output_PIN_on_port+0xf6>
     402:	ba 01       	movw	r22, r20
     404:	62 2b       	or	r22, r18
     406:	62 bb       	out	0x12, r22	; 18
     408:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
     40a:	22 b3       	in	r18, 0x12	; 18
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	ac 01       	movw	r20, r24
     412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_output_PIN_on_port+0x114>
     414:	44 0f       	add	r20, r20
     416:	55 1f       	adc	r21, r21
     418:	6a 95       	dec	r22
     41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_output_PIN_on_port+0x110>
     41c:	ba 01       	movw	r22, r20
     41e:	60 95       	com	r22
     420:	62 23       	and	r22, r18
     422:	62 bb       	out	0x12, r22	; 18
     424:	08 95       	ret

00000426 <DIO_Toggle_PIN_on_port>:
		break;
	}
}
void DIO_Toggle_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7)
{
	switch (portname)
     426:	84 34       	cpi	r24, 0x44	; 68
     428:	09 f4       	brne	.+2      	; 0x42c <DIO_Toggle_PIN_on_port+0x6>
     42a:	3d c0       	rjmp	.+122    	; 0x4a6 <DIO_Toggle_PIN_on_port+0x80>
     42c:	85 34       	cpi	r24, 0x45	; 69
     42e:	40 f4       	brcc	.+16     	; 0x440 <DIO_Toggle_PIN_on_port+0x1a>
     430:	82 34       	cpi	r24, 0x42	; 66
     432:	f9 f0       	breq	.+62     	; 0x472 <DIO_Toggle_PIN_on_port+0x4c>
     434:	83 34       	cpi	r24, 0x43	; 67
     436:	50 f5       	brcc	.+84     	; 0x48c <DIO_Toggle_PIN_on_port+0x66>
     438:	81 34       	cpi	r24, 0x41	; 65
     43a:	09 f0       	breq	.+2      	; 0x43e <DIO_Toggle_PIN_on_port+0x18>
     43c:	40 c0       	rjmp	.+128    	; 0x4be <DIO_Toggle_PIN_on_port+0x98>
     43e:	0c c0       	rjmp	.+24     	; 0x458 <DIO_Toggle_PIN_on_port+0x32>
     440:	82 36       	cpi	r24, 0x62	; 98
     442:	b9 f0       	breq	.+46     	; 0x472 <DIO_Toggle_PIN_on_port+0x4c>
     444:	83 36       	cpi	r24, 0x63	; 99
     446:	18 f4       	brcc	.+6      	; 0x44e <DIO_Toggle_PIN_on_port+0x28>
     448:	81 36       	cpi	r24, 0x61	; 97
     44a:	c9 f5       	brne	.+114    	; 0x4be <DIO_Toggle_PIN_on_port+0x98>
     44c:	05 c0       	rjmp	.+10     	; 0x458 <DIO_Toggle_PIN_on_port+0x32>
     44e:	83 36       	cpi	r24, 0x63	; 99
     450:	e9 f0       	breq	.+58     	; 0x48c <DIO_Toggle_PIN_on_port+0x66>
     452:	84 36       	cpi	r24, 0x64	; 100
     454:	a1 f5       	brne	.+104    	; 0x4be <DIO_Toggle_PIN_on_port+0x98>
     456:	27 c0       	rjmp	.+78     	; 0x4a6 <DIO_Toggle_PIN_on_port+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,pin_number_0_7);
     458:	2b b3       	in	r18, 0x1b	; 27
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	ac 01       	movw	r20, r24
     460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_Toggle_PIN_on_port+0x40>
     462:	44 0f       	add	r20, r20
     464:	55 1f       	adc	r21, r21
     466:	6a 95       	dec	r22
     468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_Toggle_PIN_on_port+0x3c>
     46a:	ba 01       	movw	r22, r20
     46c:	62 27       	eor	r22, r18
     46e:	6b bb       	out	0x1b, r22	; 27
		break;
     470:	08 95       	ret
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,pin_number_0_7);
     472:	28 b3       	in	r18, 0x18	; 24
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	ac 01       	movw	r20, r24
     47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_Toggle_PIN_on_port+0x5a>
     47c:	44 0f       	add	r20, r20
     47e:	55 1f       	adc	r21, r21
     480:	6a 95       	dec	r22
     482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_Toggle_PIN_on_port+0x56>
     484:	ba 01       	movw	r22, r20
     486:	62 27       	eor	r22, r18
     488:	68 bb       	out	0x18, r22	; 24
		break;
     48a:	08 95       	ret
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,pin_number_0_7);
     48c:	25 b3       	in	r18, 0x15	; 21
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	ac 01       	movw	r20, r24
     494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_Toggle_PIN_on_port+0x74>
     496:	44 0f       	add	r20, r20
     498:	55 1f       	adc	r21, r21
     49a:	6a 95       	dec	r22
     49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_Toggle_PIN_on_port+0x70>
     49e:	ba 01       	movw	r22, r20
     4a0:	62 27       	eor	r22, r18
     4a2:	65 bb       	out	0x15, r22	; 21
		break;
     4a4:	08 95       	ret
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,pin_number_0_7);
     4a6:	22 b3       	in	r18, 0x12	; 18
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	ac 01       	movw	r20, r24
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_Toggle_PIN_on_port+0x8e>
     4b0:	44 0f       	add	r20, r20
     4b2:	55 1f       	adc	r21, r21
     4b4:	6a 95       	dec	r22
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_Toggle_PIN_on_port+0x8a>
     4b8:	ba 01       	movw	r22, r20
     4ba:	62 27       	eor	r22, r18
     4bc:	62 bb       	out	0x12, r22	; 18
     4be:	08 95       	ret

000004c0 <DIO_READ_PIN>:
	}
}
unsigned char DIO_READ_PIN (unsigned char portname,unsigned char pin_number_0_7)
{
	unsigned char val;
	switch (portname)
     4c0:	84 34       	cpi	r24, 0x44	; 68
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <DIO_READ_PIN+0x6>
     4c4:	51 c0       	rjmp	.+162    	; 0x568 <DIO_READ_PIN+0xa8>
     4c6:	85 34       	cpi	r24, 0x45	; 69
     4c8:	40 f4       	brcc	.+16     	; 0x4da <DIO_READ_PIN+0x1a>
     4ca:	82 34       	cpi	r24, 0x42	; 66
     4cc:	39 f1       	breq	.+78     	; 0x51c <DIO_READ_PIN+0x5c>
     4ce:	83 34       	cpi	r24, 0x43	; 67
     4d0:	c0 f5       	brcc	.+112    	; 0x542 <DIO_READ_PIN+0x82>
     4d2:	81 34       	cpi	r24, 0x41	; 65
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <DIO_READ_PIN+0x18>
     4d6:	5a c0       	rjmp	.+180    	; 0x58c <DIO_READ_PIN+0xcc>
     4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <DIO_READ_PIN+0x36>
     4da:	82 36       	cpi	r24, 0x62	; 98
     4dc:	f9 f0       	breq	.+62     	; 0x51c <DIO_READ_PIN+0x5c>
     4de:	83 36       	cpi	r24, 0x63	; 99
     4e0:	20 f4       	brcc	.+8      	; 0x4ea <DIO_READ_PIN+0x2a>
     4e2:	81 36       	cpi	r24, 0x61	; 97
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <DIO_READ_PIN+0x28>
     4e6:	52 c0       	rjmp	.+164    	; 0x58c <DIO_READ_PIN+0xcc>
     4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <DIO_READ_PIN+0x36>
     4ea:	83 36       	cpi	r24, 0x63	; 99
     4ec:	51 f1       	breq	.+84     	; 0x542 <DIO_READ_PIN+0x82>
     4ee:	84 36       	cpi	r24, 0x64	; 100
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <DIO_READ_PIN+0x34>
     4f2:	4c c0       	rjmp	.+152    	; 0x58c <DIO_READ_PIN+0xcc>
     4f4:	39 c0       	rjmp	.+114    	; 0x568 <DIO_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pin_number_0_7);
     4f6:	29 b3       	in	r18, 0x19	; 25
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	06 2e       	mov	r0, r22
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_READ_PIN+0x44>
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	0a 94       	dec	r0
     506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_READ_PIN+0x40>
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	82 23       	and	r24, r18
     50c:	93 23       	and	r25, r19
     50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_READ_PIN+0x54>
     510:	96 95       	lsr	r25
     512:	87 95       	ror	r24
     514:	6a 95       	dec	r22
     516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_READ_PIN+0x50>
     518:	98 2f       	mov	r25, r24
		break;
     51a:	38 c0       	rjmp	.+112    	; 0x58c <DIO_READ_PIN+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin_number_0_7);
     51c:	26 b3       	in	r18, 0x16	; 22
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	06 2e       	mov	r0, r22
     524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_READ_PIN+0x6a>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_READ_PIN+0x66>
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	82 23       	and	r24, r18
     532:	93 23       	and	r25, r19
     534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_READ_PIN+0x7a>
     536:	96 95       	lsr	r25
     538:	87 95       	ror	r24
     53a:	6a 95       	dec	r22
     53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_READ_PIN+0x76>
     53e:	98 2f       	mov	r25, r24
		break;
     540:	25 c0       	rjmp	.+74     	; 0x58c <DIO_READ_PIN+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin_number_0_7);
     542:	23 b3       	in	r18, 0x13	; 19
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	06 2e       	mov	r0, r22
     54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_READ_PIN+0x90>
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	0a 94       	dec	r0
     552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_READ_PIN+0x8c>
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	82 23       	and	r24, r18
     558:	93 23       	and	r25, r19
     55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_READ_PIN+0xa0>
     55c:	96 95       	lsr	r25
     55e:	87 95       	ror	r24
     560:	6a 95       	dec	r22
     562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_READ_PIN+0x9c>
     564:	98 2f       	mov	r25, r24
		break;
     566:	12 c0       	rjmp	.+36     	; 0x58c <DIO_READ_PIN+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin_number_0_7);
     568:	20 b3       	in	r18, 0x10	; 16
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	06 2e       	mov	r0, r22
     570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_READ_PIN+0xb6>
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	0a 94       	dec	r0
     578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_READ_PIN+0xb2>
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	82 23       	and	r24, r18
     57e:	93 23       	and	r25, r19
     580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_READ_PIN+0xc6>
     582:	96 95       	lsr	r25
     584:	87 95       	ror	r24
     586:	6a 95       	dec	r22
     588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_READ_PIN+0xc2>
     58a:	98 2f       	mov	r25, r24
		break;
		default:
		break;	
	}
	return val;
}
     58c:	89 2f       	mov	r24, r25
     58e:	08 95       	ret

00000590 <DIO_set_PORT_dir>:
void DIO_set_PORT_dir (unsigned char portname,unsigned char portvalue)
{
	switch (portname)
     590:	84 34       	cpi	r24, 0x44	; 68
     592:	d9 f0       	breq	.+54     	; 0x5ca <DIO_set_PORT_dir+0x3a>
     594:	85 34       	cpi	r24, 0x45	; 69
     596:	38 f4       	brcc	.+14     	; 0x5a6 <DIO_set_PORT_dir+0x16>
     598:	82 34       	cpi	r24, 0x42	; 66
     59a:	99 f0       	breq	.+38     	; 0x5c2 <DIO_set_PORT_dir+0x32>
     59c:	83 34       	cpi	r24, 0x43	; 67
     59e:	98 f4       	brcc	.+38     	; 0x5c6 <DIO_set_PORT_dir+0x36>
     5a0:	81 34       	cpi	r24, 0x41	; 65
     5a2:	a1 f4       	brne	.+40     	; 0x5cc <DIO_set_PORT_dir+0x3c>
     5a4:	0c c0       	rjmp	.+24     	; 0x5be <DIO_set_PORT_dir+0x2e>
     5a6:	82 36       	cpi	r24, 0x62	; 98
     5a8:	61 f0       	breq	.+24     	; 0x5c2 <DIO_set_PORT_dir+0x32>
     5aa:	83 36       	cpi	r24, 0x63	; 99
     5ac:	18 f4       	brcc	.+6      	; 0x5b4 <DIO_set_PORT_dir+0x24>
     5ae:	81 36       	cpi	r24, 0x61	; 97
     5b0:	69 f4       	brne	.+26     	; 0x5cc <DIO_set_PORT_dir+0x3c>
     5b2:	05 c0       	rjmp	.+10     	; 0x5be <DIO_set_PORT_dir+0x2e>
     5b4:	83 36       	cpi	r24, 0x63	; 99
     5b6:	39 f0       	breq	.+14     	; 0x5c6 <DIO_set_PORT_dir+0x36>
     5b8:	84 36       	cpi	r24, 0x64	; 100
     5ba:	41 f4       	brne	.+16     	; 0x5cc <DIO_set_PORT_dir+0x3c>
     5bc:	06 c0       	rjmp	.+12     	; 0x5ca <DIO_set_PORT_dir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=portvalue;
     5be:	6a bb       	out	0x1a, r22	; 26
		break;
     5c0:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=portvalue;
     5c2:	67 bb       	out	0x17, r22	; 23
		break;
     5c4:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=portvalue;
     5c6:	64 bb       	out	0x14, r22	; 20
		break;
     5c8:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=portvalue;
     5ca:	61 bb       	out	0x11, r22	; 17
     5cc:	08 95       	ret

000005ce <DIO_output_on_PORT>:
		break;
	}
}
void DIO_output_on_PORT (unsigned char portname,unsigned char output_on_port)
{
	switch (portname)
     5ce:	84 34       	cpi	r24, 0x44	; 68
     5d0:	d9 f0       	breq	.+54     	; 0x608 <DIO_output_on_PORT+0x3a>
     5d2:	85 34       	cpi	r24, 0x45	; 69
     5d4:	38 f4       	brcc	.+14     	; 0x5e4 <DIO_output_on_PORT+0x16>
     5d6:	82 34       	cpi	r24, 0x42	; 66
     5d8:	99 f0       	breq	.+38     	; 0x600 <DIO_output_on_PORT+0x32>
     5da:	83 34       	cpi	r24, 0x43	; 67
     5dc:	98 f4       	brcc	.+38     	; 0x604 <DIO_output_on_PORT+0x36>
     5de:	81 34       	cpi	r24, 0x41	; 65
     5e0:	a1 f4       	brne	.+40     	; 0x60a <DIO_output_on_PORT+0x3c>
     5e2:	0c c0       	rjmp	.+24     	; 0x5fc <DIO_output_on_PORT+0x2e>
     5e4:	82 36       	cpi	r24, 0x62	; 98
     5e6:	61 f0       	breq	.+24     	; 0x600 <DIO_output_on_PORT+0x32>
     5e8:	83 36       	cpi	r24, 0x63	; 99
     5ea:	18 f4       	brcc	.+6      	; 0x5f2 <DIO_output_on_PORT+0x24>
     5ec:	81 36       	cpi	r24, 0x61	; 97
     5ee:	69 f4       	brne	.+26     	; 0x60a <DIO_output_on_PORT+0x3c>
     5f0:	05 c0       	rjmp	.+10     	; 0x5fc <DIO_output_on_PORT+0x2e>
     5f2:	83 36       	cpi	r24, 0x63	; 99
     5f4:	39 f0       	breq	.+14     	; 0x604 <DIO_output_on_PORT+0x36>
     5f6:	84 36       	cpi	r24, 0x64	; 100
     5f8:	41 f4       	brne	.+16     	; 0x60a <DIO_output_on_PORT+0x3c>
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <DIO_output_on_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=output_on_port;
     5fc:	6b bb       	out	0x1b, r22	; 27
		break;
     5fe:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=output_on_port;
     600:	68 bb       	out	0x18, r22	; 24
		break;
     602:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=output_on_port;
     604:	65 bb       	out	0x15, r22	; 21
		break;
     606:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=output_on_port;
     608:	62 bb       	out	0x12, r22	; 18
     60a:	08 95       	ret

0000060c <DIO_Toggle_PORT>:
		break;
	}
}
void DIO_Toggle_PORT (unsigned char portname)
{
	switch (portname)
     60c:	84 34       	cpi	r24, 0x44	; 68
     60e:	09 f1       	breq	.+66     	; 0x652 <DIO_Toggle_PORT+0x46>
     610:	85 34       	cpi	r24, 0x45	; 69
     612:	38 f4       	brcc	.+14     	; 0x622 <DIO_Toggle_PORT+0x16>
     614:	82 34       	cpi	r24, 0x42	; 66
     616:	a9 f0       	breq	.+42     	; 0x642 <DIO_Toggle_PORT+0x36>
     618:	83 34       	cpi	r24, 0x43	; 67
     61a:	b8 f4       	brcc	.+46     	; 0x64a <DIO_Toggle_PORT+0x3e>
     61c:	81 34       	cpi	r24, 0x41	; 65
     61e:	e1 f4       	brne	.+56     	; 0x658 <DIO_Toggle_PORT+0x4c>
     620:	0c c0       	rjmp	.+24     	; 0x63a <DIO_Toggle_PORT+0x2e>
     622:	82 36       	cpi	r24, 0x62	; 98
     624:	71 f0       	breq	.+28     	; 0x642 <DIO_Toggle_PORT+0x36>
     626:	83 36       	cpi	r24, 0x63	; 99
     628:	18 f4       	brcc	.+6      	; 0x630 <DIO_Toggle_PORT+0x24>
     62a:	81 36       	cpi	r24, 0x61	; 97
     62c:	a9 f4       	brne	.+42     	; 0x658 <DIO_Toggle_PORT+0x4c>
     62e:	05 c0       	rjmp	.+10     	; 0x63a <DIO_Toggle_PORT+0x2e>
     630:	83 36       	cpi	r24, 0x63	; 99
     632:	59 f0       	breq	.+22     	; 0x64a <DIO_Toggle_PORT+0x3e>
     634:	84 36       	cpi	r24, 0x64	; 100
     636:	81 f4       	brne	.+32     	; 0x658 <DIO_Toggle_PORT+0x4c>
     638:	0c c0       	rjmp	.+24     	; 0x652 <DIO_Toggle_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     63a:	8b b3       	in	r24, 0x1b	; 27
     63c:	80 95       	com	r24
     63e:	8b bb       	out	0x1b, r24	; 27
		break;
     640:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     642:	88 b3       	in	r24, 0x18	; 24
     644:	80 95       	com	r24
     646:	88 bb       	out	0x18, r24	; 24
		break;
     648:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     64a:	85 b3       	in	r24, 0x15	; 21
     64c:	80 95       	com	r24
     64e:	85 bb       	out	0x15, r24	; 21
		break;
     650:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     652:	82 b3       	in	r24, 0x12	; 18
     654:	80 95       	com	r24
     656:	82 bb       	out	0x12, r24	; 18
     658:	08 95       	ret

0000065a <DIO_READ_PORT>:
	}
}
unsigned char DIO_READ_PORT (unsigned char portname)
{
	unsigned char returned_value;
	switch (portname)
     65a:	84 34       	cpi	r24, 0x44	; 68
     65c:	d9 f0       	breq	.+54     	; 0x694 <DIO_READ_PORT+0x3a>
     65e:	85 34       	cpi	r24, 0x45	; 69
     660:	38 f4       	brcc	.+14     	; 0x670 <DIO_READ_PORT+0x16>
     662:	82 34       	cpi	r24, 0x42	; 66
     664:	99 f0       	breq	.+38     	; 0x68c <DIO_READ_PORT+0x32>
     666:	83 34       	cpi	r24, 0x43	; 67
     668:	98 f4       	brcc	.+38     	; 0x690 <DIO_READ_PORT+0x36>
     66a:	81 34       	cpi	r24, 0x41	; 65
     66c:	a1 f4       	brne	.+40     	; 0x696 <DIO_READ_PORT+0x3c>
     66e:	0c c0       	rjmp	.+24     	; 0x688 <DIO_READ_PORT+0x2e>
     670:	82 36       	cpi	r24, 0x62	; 98
     672:	61 f0       	breq	.+24     	; 0x68c <DIO_READ_PORT+0x32>
     674:	83 36       	cpi	r24, 0x63	; 99
     676:	18 f4       	brcc	.+6      	; 0x67e <DIO_READ_PORT+0x24>
     678:	81 36       	cpi	r24, 0x61	; 97
     67a:	69 f4       	brne	.+26     	; 0x696 <DIO_READ_PORT+0x3c>
     67c:	05 c0       	rjmp	.+10     	; 0x688 <DIO_READ_PORT+0x2e>
     67e:	83 36       	cpi	r24, 0x63	; 99
     680:	39 f0       	breq	.+14     	; 0x690 <DIO_READ_PORT+0x36>
     682:	84 36       	cpi	r24, 0x64	; 100
     684:	41 f4       	brne	.+16     	; 0x696 <DIO_READ_PORT+0x3c>
     686:	06 c0       	rjmp	.+12     	; 0x694 <DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		returned_value=PORTA;
     688:	8b b3       	in	r24, 0x1b	; 27
		break;
     68a:	08 95       	ret
		case 'B':
		case 'b':
		returned_value=PORTB;
     68c:	88 b3       	in	r24, 0x18	; 24
		break;
     68e:	08 95       	ret
		case 'C':
		case 'c':
		returned_value=PORTC;
     690:	85 b3       	in	r24, 0x15	; 21
		break;
     692:	08 95       	ret
		case 'D':
		case 'd':
		returned_value=PORTD;
     694:	82 b3       	in	r24, 0x12	; 18
		break;
		default:
		break;
	}
}
     696:	08 95       	ret

00000698 <DIO_enable_PULLUP>:
void DIO_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7,unsigned char enable_pullup)
{
	switch (portname)
     698:	84 34       	cpi	r24, 0x44	; 68
     69a:	09 f4       	brne	.+2      	; 0x69e <DIO_enable_PULLUP+0x6>
     69c:	71 c0       	rjmp	.+226    	; 0x780 <DIO_enable_PULLUP+0xe8>
     69e:	85 34       	cpi	r24, 0x45	; 69
     6a0:	48 f4       	brcc	.+18     	; 0x6b4 <DIO_enable_PULLUP+0x1c>
     6a2:	82 34       	cpi	r24, 0x42	; 66
     6a4:	99 f1       	breq	.+102    	; 0x70c <DIO_enable_PULLUP+0x74>
     6a6:	83 34       	cpi	r24, 0x43	; 67
     6a8:	08 f0       	brcs	.+2      	; 0x6ac <DIO_enable_PULLUP+0x14>
     6aa:	4d c0       	rjmp	.+154    	; 0x746 <DIO_enable_PULLUP+0xae>
     6ac:	81 34       	cpi	r24, 0x41	; 65
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <DIO_enable_PULLUP+0x1a>
     6b0:	83 c0       	rjmp	.+262    	; 0x7b8 <DIO_enable_PULLUP+0x120>
     6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <DIO_enable_PULLUP+0x3a>
     6b4:	82 36       	cpi	r24, 0x62	; 98
     6b6:	51 f1       	breq	.+84     	; 0x70c <DIO_enable_PULLUP+0x74>
     6b8:	83 36       	cpi	r24, 0x63	; 99
     6ba:	20 f4       	brcc	.+8      	; 0x6c4 <DIO_enable_PULLUP+0x2c>
     6bc:	81 36       	cpi	r24, 0x61	; 97
     6be:	09 f0       	breq	.+2      	; 0x6c2 <DIO_enable_PULLUP+0x2a>
     6c0:	7b c0       	rjmp	.+246    	; 0x7b8 <DIO_enable_PULLUP+0x120>
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <DIO_enable_PULLUP+0x3a>
     6c4:	83 36       	cpi	r24, 0x63	; 99
     6c6:	09 f4       	brne	.+2      	; 0x6ca <DIO_enable_PULLUP+0x32>
     6c8:	3e c0       	rjmp	.+124    	; 0x746 <DIO_enable_PULLUP+0xae>
     6ca:	84 36       	cpi	r24, 0x64	; 100
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <DIO_enable_PULLUP+0x38>
     6ce:	74 c0       	rjmp	.+232    	; 0x7b8 <DIO_enable_PULLUP+0x120>
     6d0:	57 c0       	rjmp	.+174    	; 0x780 <DIO_enable_PULLUP+0xe8>
	{
		case 'A':
		case 'a':
		if (enable_pullup==1)
     6d2:	41 30       	cpi	r20, 0x01	; 1
     6d4:	69 f4       	brne	.+26     	; 0x6f0 <DIO_enable_PULLUP+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
     6d6:	2b b3       	in	r18, 0x1b	; 27
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	ac 01       	movw	r20, r24
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_enable_PULLUP+0x4c>
     6e0:	44 0f       	add	r20, r20
     6e2:	55 1f       	adc	r21, r21
     6e4:	6a 95       	dec	r22
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_enable_PULLUP+0x48>
     6e8:	ba 01       	movw	r22, r20
     6ea:	62 2b       	or	r22, r18
     6ec:	6b bb       	out	0x1b, r22	; 27
     6ee:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
     6f0:	2b b3       	in	r18, 0x1b	; 27
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ac 01       	movw	r20, r24
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_enable_PULLUP+0x66>
     6fa:	44 0f       	add	r20, r20
     6fc:	55 1f       	adc	r21, r21
     6fe:	6a 95       	dec	r22
     700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_enable_PULLUP+0x62>
     702:	ba 01       	movw	r22, r20
     704:	60 95       	com	r22
     706:	62 23       	and	r22, r18
     708:	6b bb       	out	0x1b, r22	; 27
     70a:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (enable_pullup==1)
     70c:	41 30       	cpi	r20, 0x01	; 1
     70e:	69 f4       	brne	.+26     	; 0x72a <DIO_enable_PULLUP+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
     710:	28 b3       	in	r18, 0x18	; 24
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	ac 01       	movw	r20, r24
     718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_enable_PULLUP+0x86>
     71a:	44 0f       	add	r20, r20
     71c:	55 1f       	adc	r21, r21
     71e:	6a 95       	dec	r22
     720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_enable_PULLUP+0x82>
     722:	ba 01       	movw	r22, r20
     724:	62 2b       	or	r22, r18
     726:	68 bb       	out	0x18, r22	; 24
     728:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
     72a:	28 b3       	in	r18, 0x18	; 24
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	ac 01       	movw	r20, r24
     732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_enable_PULLUP+0xa0>
     734:	44 0f       	add	r20, r20
     736:	55 1f       	adc	r21, r21
     738:	6a 95       	dec	r22
     73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_enable_PULLUP+0x9c>
     73c:	ba 01       	movw	r22, r20
     73e:	60 95       	com	r22
     740:	62 23       	and	r22, r18
     742:	68 bb       	out	0x18, r22	; 24
     744:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (enable_pullup==1)
     746:	41 30       	cpi	r20, 0x01	; 1
     748:	69 f4       	brne	.+26     	; 0x764 <DIO_enable_PULLUP+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
     74a:	25 b3       	in	r18, 0x15	; 21
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	ac 01       	movw	r20, r24
     752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_enable_PULLUP+0xc0>
     754:	44 0f       	add	r20, r20
     756:	55 1f       	adc	r21, r21
     758:	6a 95       	dec	r22
     75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_enable_PULLUP+0xbc>
     75c:	ba 01       	movw	r22, r20
     75e:	62 2b       	or	r22, r18
     760:	65 bb       	out	0x15, r22	; 21
     762:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
     764:	25 b3       	in	r18, 0x15	; 21
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	ac 01       	movw	r20, r24
     76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_enable_PULLUP+0xda>
     76e:	44 0f       	add	r20, r20
     770:	55 1f       	adc	r21, r21
     772:	6a 95       	dec	r22
     774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_enable_PULLUP+0xd6>
     776:	ba 01       	movw	r22, r20
     778:	60 95       	com	r22
     77a:	62 23       	and	r22, r18
     77c:	65 bb       	out	0x15, r22	; 21
     77e:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (enable_pullup==1)
     780:	41 30       	cpi	r20, 0x01	; 1
     782:	69 f4       	brne	.+26     	; 0x79e <DIO_enable_PULLUP+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
     784:	22 b3       	in	r18, 0x12	; 18
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	ac 01       	movw	r20, r24
     78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_enable_PULLUP+0xfa>
     78e:	44 0f       	add	r20, r20
     790:	55 1f       	adc	r21, r21
     792:	6a 95       	dec	r22
     794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_enable_PULLUP+0xf6>
     796:	ba 01       	movw	r22, r20
     798:	62 2b       	or	r22, r18
     79a:	62 bb       	out	0x12, r22	; 18
     79c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
     79e:	22 b3       	in	r18, 0x12	; 18
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	ac 01       	movw	r20, r24
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_enable_PULLUP+0x114>
     7a8:	44 0f       	add	r20, r20
     7aa:	55 1f       	adc	r21, r21
     7ac:	6a 95       	dec	r22
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_enable_PULLUP+0x110>
     7b0:	ba 01       	movw	r22, r20
     7b2:	60 95       	com	r22
     7b4:	62 23       	and	r22, r18
     7b6:	62 bb       	out	0x12, r22	; 18
     7b8:	08 95       	ret

000007ba <enable_pulse>:
#define command 0
#define data 1

void static enable_pulse (void)
{
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,1);
     7ba:	83 e6       	ldi	r24, 0x63	; 99
     7bc:	64 e0       	ldi	r22, 0x04	; 4
     7be:	41 e0       	ldi	r20, 0x01	; 1
     7c0:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
     7c4:	8f e9       	ldi	r24, 0x9F	; 159
     7c6:	9f e0       	ldi	r25, 0x0F	; 15
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <enable_pulse+0xe>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <enable_pulse+0x14>
     7ce:	00 00       	nop
	_delay_ms(2);
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,0);
     7d0:	83 e6       	ldi	r24, 0x63	; 99
     7d2:	64 e0       	ldi	r22, 0x04	; 4
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
}
     7da:	08 95       	ret

000007dc <LCD_send_char>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
     7dc:	af 92       	push	r10
     7de:	bf 92       	push	r11
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	c0 e0       	ldi	r28, 0x00	; 0
     7f2:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
     7f4:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
     7f6:	0f 2e       	mov	r0, r31
     7f8:	f7 e0       	ldi	r31, 0x07	; 7
     7fa:	ef 2e       	mov	r14, r31
     7fc:	ff 24       	eor	r15, r15
     7fe:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     800:	cc 24       	eor	r12, r12
     802:	dd 24       	eor	r13, r13
     804:	c3 94       	inc	r12
     806:	a8 2e       	mov	r10, r24
     808:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
			x=3;
     80a:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
     80c:	a7 01       	movw	r20, r14
     80e:	4c 1b       	sub	r20, r28
     810:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     812:	c6 01       	movw	r24, r12
     814:	04 2e       	mov	r0, r20
     816:	02 c0       	rjmp	.+4      	; 0x81c <LCD_send_char+0x40>
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	0a 94       	dec	r0
     81e:	e2 f7       	brpl	.-8      	; 0x818 <LCD_send_char+0x3c>
     820:	8a 21       	and	r24, r10
     822:	9b 21       	and	r25, r11
     824:	9c 01       	movw	r18, r24
     826:	02 c0       	rjmp	.+4      	; 0x82c <LCD_send_char+0x50>
     828:	36 95       	lsr	r19
     82a:	27 95       	ror	r18
     82c:	4a 95       	dec	r20
     82e:	e2 f7       	brpl	.-8      	; 0x828 <LCD_send_char+0x4c>
     830:	a9 01       	movw	r20, r18
     832:	83 e6       	ldi	r24, 0x63	; 99
     834:	61 2f       	mov	r22, r17
     836:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
     83a:	c3 30       	cpi	r28, 0x03	; 3
     83c:	21 f0       	breq	.+8      	; 0x846 <LCD_send_char+0x6a>
     83e:	c7 30       	cpi	r28, 0x07	; 7
     840:	11 f0       	breq	.+4      	; 0x846 <LCD_send_char+0x6a>
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
     842:	11 50       	subi	r17, 0x01	; 1
     844:	08 c0       	rjmp	.+16     	; 0x856 <LCD_send_char+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
     846:	83 e6       	ldi	r24, 0x63	; 99
     848:	65 e0       	ldi	r22, 0x05	; 5
     84a:	41 e0       	ldi	r20, 0x01	; 1
     84c:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
			enable_pulse();
     850:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enable_pulse>
			x=3;
     854:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
     856:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
     858:	c8 30       	cpi	r28, 0x08	; 8
     85a:	d1 05       	cpc	r29, r1
     85c:	b9 f6       	brne	.-82     	; 0x80c <LCD_send_char+0x30>
     85e:	8f ec       	ldi	r24, 0xCF	; 207
     860:	97 e0       	ldi	r25, 0x07	; 7
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <__stack+0x3>
     866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
     868:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	08 95       	ret

00000880 <LCD_send_cmd>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
     880:	af 92       	push	r10
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	c0 e0       	ldi	r28, 0x00	; 0
     896:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//;
     898:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
     89a:	0f 2e       	mov	r0, r31
     89c:	f7 e0       	ldi	r31, 0x07	; 7
     89e:	ef 2e       	mov	r14, r31
     8a0:	ff 24       	eor	r15, r15
     8a2:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     8a4:	cc 24       	eor	r12, r12
     8a6:	dd 24       	eor	r13, r13
     8a8:	c3 94       	inc	r12
     8aa:	a8 2e       	mov	r10, r24
     8ac:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
			x=3;
     8ae:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
     8b0:	a7 01       	movw	r20, r14
     8b2:	4c 1b       	sub	r20, r28
     8b4:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
     8b6:	c6 01       	movw	r24, r12
     8b8:	04 2e       	mov	r0, r20
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <LCD_send_cmd+0x40>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	0a 94       	dec	r0
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <LCD_send_cmd+0x3c>
     8c4:	8a 21       	and	r24, r10
     8c6:	9b 21       	and	r25, r11
     8c8:	9c 01       	movw	r18, r24
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <LCD_send_cmd+0x50>
     8cc:	36 95       	lsr	r19
     8ce:	27 95       	ror	r18
     8d0:	4a 95       	dec	r20
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <LCD_send_cmd+0x4c>
     8d4:	a9 01       	movw	r20, r18
     8d6:	83 e6       	ldi	r24, 0x63	; 99
     8d8:	61 2f       	mov	r22, r17
     8da:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
     8de:	c3 30       	cpi	r28, 0x03	; 3
     8e0:	21 f0       	breq	.+8      	; 0x8ea <LCD_send_cmd+0x6a>
     8e2:	c7 30       	cpi	r28, 0x07	; 7
     8e4:	11 f0       	breq	.+4      	; 0x8ea <LCD_send_cmd+0x6a>
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
     8e6:	11 50       	subi	r17, 0x01	; 1
     8e8:	08 c0       	rjmp	.+16     	; 0x8fa <LCD_send_cmd+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
     8ea:	83 e6       	ldi	r24, 0x63	; 99
     8ec:	65 e0       	ldi	r22, 0x05	; 5
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
			enable_pulse();
     8f4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <enable_pulse>
			x=3;
     8f8:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
     8fa:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
     8fc:	c8 30       	cpi	r28, 0x08	; 8
     8fe:	d1 05       	cpc	r29, r1
     900:	b9 f6       	brne	.-82     	; 0x8b0 <LCD_send_cmd+0x30>
     902:	8f ec       	ldi	r24, 0xCF	; 207
     904:	97 e0       	ldi	r25, 0x07	; 7
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	f1 f7       	brne	.-4      	; 0x906 <LCD_send_cmd+0x86>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <LCD_send_cmd+0x8c>
     90c:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ff 90       	pop	r15
     918:	ef 90       	pop	r14
     91a:	df 90       	pop	r13
     91c:	cf 90       	pop	r12
     91e:	bf 90       	pop	r11
     920:	af 90       	pop	r10
     922:	08 95       	ret

00000924 <LCD_CLEAR_Screen>:
#endif


void LCD_CLEAR_Screen (void)
{
	LCD_send_cmd(0x01);
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
     92a:	8f e1       	ldi	r24, 0x1F	; 31
     92c:	9e e4       	ldi	r25, 0x4E	; 78
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <LCD_CLEAR_Screen+0xa>
     932:	00 c0       	rjmp	.+0      	; 0x934 <LCD_CLEAR_Screen+0x10>
     934:	00 00       	nop
	_delay_ms(10);
}
     936:	08 95       	ret

00000938 <LCD_INIT>:
	LCD_send_cmd(ENTRY_MODE_RTL);
	
}
#elif defined Four_BITS_MODE
void LCD_INIT (void)
{
     938:	cf 93       	push	r28
     93a:	8f e7       	ldi	r24, 0x7F	; 127
     93c:	98 e3       	ldi	r25, 0x38	; 56
     93e:	a1 e0       	ldi	r26, 0x01	; 1
     940:	81 50       	subi	r24, 0x01	; 1
     942:	90 40       	sbci	r25, 0x00	; 0
     944:	a0 40       	sbci	r26, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <LCD_INIT+0x8>
     948:	00 c0       	rjmp	.+0      	; 0x94a <LCD_INIT+0x12>
     94a:	00 00       	nop
	_delay_ms(50);
	unsigned char counter=0;
     94c:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
     94e:	83 e6       	ldi	r24, 0x63	; 99
     950:	6c 2f       	mov	r22, r28
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
void LCD_INIT (void)
{
	_delay_ms(50);
	unsigned char counter=0;
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
     958:	cf 5f       	subi	r28, 0xFF	; 255
     95a:	c4 30       	cpi	r28, 0x04	; 4
     95c:	c1 f7       	brne	.-16     	; 0x94e <LCD_INIT+0x16>
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
		x++;
	}
	DIO_set_PIN_dir(En_Rg_selection,En_Pn_selection,1);
     95e:	83 e6       	ldi	r24, 0x63	; 99
     960:	64 e0       	ldi	r22, 0x04	; 4
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	DIO_set_PIN_dir(RS_Rg_selection,RS_Pn_selection,1);
     968:	83 e6       	ldi	r24, 0x63	; 99
     96a:	65 e0       	ldi	r22, 0x05	; 5
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	LCD_send_cmd(RETURN_HOME);
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
     978:	af e0       	ldi	r26, 0x0F	; 15
     97a:	b7 e2       	ldi	r27, 0x27	; 39
     97c:	11 97       	sbiw	r26, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <LCD_INIT+0x44>
     980:	00 c0       	rjmp	.+0      	; 0x982 <LCD_INIT+0x4a>
     982:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(0x28);
     984:	88 e2       	ldi	r24, 0x28	; 40
     986:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
     98a:	8e e0       	ldi	r24, 0x0E	; 14
     98c:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
	LCD_send_cmd(CLEAR_SCREEN);
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
     996:	8f e0       	ldi	r24, 0x0F	; 15
     998:	97 e2       	ldi	r25, 0x27	; 39
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	f1 f7       	brne	.-4      	; 0x99a <LCD_INIT+0x62>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <LCD_INIT+0x68>
     9a0:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(ENTRY_MODE_RTL);
     9a2:	86 e0       	ldi	r24, 0x06	; 6
     9a4:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
}
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <LCD_MOVE_CURSOR>:
#endif

void LCD_MOVE_CURSOR (unsigned char row,unsigned char coloumn)
{
	if (row>2||row<1||coloumn>16||coloumn<1)
     9ac:	98 2f       	mov	r25, r24
     9ae:	91 50       	subi	r25, 0x01	; 1
     9b0:	92 30       	cpi	r25, 0x02	; 2
     9b2:	20 f4       	brcc	.+8      	; 0x9bc <LCD_MOVE_CURSOR+0x10>
     9b4:	61 31       	cpi	r22, 0x11	; 17
     9b6:	10 f4       	brcc	.+4      	; 0x9bc <LCD_MOVE_CURSOR+0x10>
     9b8:	66 23       	and	r22, r22
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <LCD_MOVE_CURSOR+0x18>
	{
		LCD_send_cmd(0x80);
     9bc:	80 e8       	ldi	r24, 0x80	; 128
     9be:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
     9c2:	08 95       	ret
	}
	else if (row==1)
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	29 f4       	brne	.+10     	; 0x9d2 <LCD_MOVE_CURSOR+0x26>
	{
		LCD_send_cmd(0x80+coloumn-1);
     9c8:	86 2f       	mov	r24, r22
     9ca:	81 58       	subi	r24, 0x81	; 129
     9cc:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
     9d0:	08 95       	ret
	}
	else if (row==2)
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	21 f4       	brne	.+8      	; 0x9de <LCD_MOVE_CURSOR+0x32>
	{
		LCD_send_cmd(0xc0+coloumn-1);
     9d6:	86 2f       	mov	r24, r22
     9d8:	81 54       	subi	r24, 0x41	; 65
     9da:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
     9de:	08 95       	ret

000009e0 <LCD_send_string>:
	}
}
void LCD_send_string (char*ptr)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ec 01       	movw	r28, r24
	while (*ptr!=0)
     9e6:	88 81       	ld	r24, Y
     9e8:	88 23       	and	r24, r24
     9ea:	31 f0       	breq	.+12     	; 0x9f8 <LCD_send_string+0x18>
	else if (row==2)
	{
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
     9ec:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		LCD_send_char(*ptr);
     9ee:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
{
	while (*ptr!=0)
     9f2:	89 91       	ld	r24, Y+
     9f4:	88 23       	and	r24, r24
     9f6:	d9 f7       	brne	.-10     	; 0x9ee <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	08 95       	ret

000009fe <scan_value>:
int scan_value (unsigned char first_asci,int first_value)
{
	
	first_value*=10;
     9fe:	26 2f       	mov	r18, r22
     a00:	37 2f       	mov	r19, r23
     a02:	22 0f       	add	r18, r18
     a04:	33 1f       	adc	r19, r19
     a06:	a9 01       	movw	r20, r18
     a08:	44 0f       	add	r20, r20
     a0a:	55 1f       	adc	r21, r21
     a0c:	44 0f       	add	r20, r20
     a0e:	55 1f       	adc	r21, r21
     a10:	24 0f       	add	r18, r20
     a12:	35 1f       	adc	r19, r21
	first_value+=(first_asci-0x30);
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	c0 97       	sbiw	r24, 0x30	; 48
     a18:	82 0f       	add	r24, r18
     a1a:	93 1f       	adc	r25, r19
	
	return first_value;
}
     a1c:	08 95       	ret

00000a1e <print_val>:
void print_val (int val)
{
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	7c 01       	movw	r14, r24
	int asci_val,counter=1,x=val;
	if (val==0)
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	21 f4       	brne	.+8      	; 0xa38 <print_val+0x1a>
	{
		LCD_send_char('0');
     a30:	80 e3       	ldi	r24, 0x30	; 48
     a32:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
     a36:	40 c0       	rjmp	.+128    	; 0xab8 <print_val+0x9a>
	}
	else if (val<10)
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	e8 16       	cp	r14, r24
     a3c:	f1 04       	cpc	r15, r1
     a3e:	2c f4       	brge	.+10     	; 0xa4a <print_val+0x2c>
	{
		LCD_send_char(val+0x30);
     a40:	8e 2d       	mov	r24, r14
     a42:	80 5d       	subi	r24, 0xD0	; 208
     a44:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
     a48:	37 c0       	rjmp	.+110    	; 0xab8 <print_val+0x9a>
	int asci_val,counter=1,x=val;
	if (val==0)
	{
		LCD_send_char('0');
	}
	else if (val<10)
     a4a:	c7 01       	movw	r24, r14
     a4c:	c1 e0       	ldi	r28, 0x01	; 1
     a4e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else
	{
		while (x>=10)
		{
			x=x/10;
     a50:	ea e0       	ldi	r30, 0x0A	; 10
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	bf 01       	movw	r22, r30
     a56:	0e 94 b0 08 	call	0x1160	; 0x1160 <__divmodhi4>
     a5a:	cb 01       	movw	r24, r22
			counter*=10;
     a5c:	9e 01       	movw	r18, r28
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	cc 0f       	add	r28, r28
     a64:	dd 1f       	adc	r29, r29
     a66:	cc 0f       	add	r28, r28
     a68:	dd 1f       	adc	r29, r29
     a6a:	cc 0f       	add	r28, r28
     a6c:	dd 1f       	adc	r29, r29
     a6e:	c2 0f       	add	r28, r18
     a70:	d3 1f       	adc	r29, r19
	{
		LCD_send_char(val+0x30);
	}
	else
	{
		while (x>=10)
     a72:	6a 30       	cpi	r22, 0x0A	; 10
     a74:	71 05       	cpc	r23, r1
     a76:	74 f7       	brge	.-36     	; 0xa54 <print_val+0x36>
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
     a78:	ca 30       	cpi	r28, 0x0A	; 10
     a7a:	d1 05       	cpc	r29, r1
     a7c:	ac f0       	brlt	.+42     	; 0xaa8 <print_val+0x8a>
		{
			asci_val=(val/counter)%10;
     a7e:	0a e0       	ldi	r16, 0x0A	; 10
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	c7 01       	movw	r24, r14
     a84:	be 01       	movw	r22, r28
     a86:	0e 94 b0 08 	call	0x1160	; 0x1160 <__divmodhi4>
     a8a:	cb 01       	movw	r24, r22
     a8c:	b8 01       	movw	r22, r16
     a8e:	0e 94 b0 08 	call	0x1160	; 0x1160 <__divmodhi4>
			LCD_send_char(asci_val+0x30);
     a92:	80 5d       	subi	r24, 0xD0	; 208
     a94:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			counter/=10;
     a98:	ce 01       	movw	r24, r28
     a9a:	b8 01       	movw	r22, r16
     a9c:	0e 94 b0 08 	call	0x1160	; 0x1160 <__divmodhi4>
     aa0:	eb 01       	movw	r28, r22
		while (x>=10)
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
     aa2:	6a 30       	cpi	r22, 0x0A	; 10
     aa4:	71 05       	cpc	r23, r1
     aa6:	6c f7       	brge	.-38     	; 0xa82 <print_val+0x64>
		{
			asci_val=(val/counter)%10;
			LCD_send_char(asci_val+0x30);
			counter/=10;
		}
		LCD_send_char((val%10)+0x30);
     aa8:	c7 01       	movw	r24, r14
     aaa:	6a e0       	ldi	r22, 0x0A	; 10
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	0e 94 b0 08 	call	0x1160	; 0x1160 <__divmodhi4>
     ab2:	80 5d       	subi	r24, 0xD0	; 208
     ab4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
	}
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	08 95       	ret

00000ac6 <LED_INIT>:
 *  Author: MT
 */ 
#include "DIO.h"
void LED_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,1);
     ac6:	41 e0       	ldi	r20, 0x01	; 1
     ac8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
}
     acc:	08 95       	ret

00000ace <BUTTON_INIT>:
void BUTTON_INIT (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
}
     ad4:	08 95       	ret

00000ad6 <BUTTON_INIT_enable_PULLUP>:
void BUTTON_INIT_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	d8 2f       	mov	r29, r24
     adc:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,1);
     ae4:	8d 2f       	mov	r24, r29
     ae6:	6c 2f       	mov	r22, r28
     ae8:	41 e0       	ldi	r20, 0x01	; 1
     aea:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_enable_PULLUP>
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <BUTTON_INIT_disable_PULLUP>:
void BUTTON_INIT_disable_PULLUP (unsigned char portname,unsigned char pin_number_0_7)
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	d8 2f       	mov	r29, r24
     afa:	c6 2f       	mov	r28, r22
	DIO_set_PIN_dir(portname,pin_number_0_7,0);
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	DIO_enable_PULLUP(portname,pin_number_0_7,0);
     b02:	8d 2f       	mov	r24, r29
     b04:	6c 2f       	mov	r22, r28
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_enable_PULLUP>
}
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <LED_ON>:

void LED_ON (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,1);
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
}
     b18:	08 95       	ret

00000b1a <LED_OFF>:
void LED_OFF (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_output_PIN_on_port(portname,pin_number_0_7,0);
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
}
     b20:	08 95       	ret

00000b22 <LED_TOGGLE>:
void LED_TOGGLE (unsigned char portname,unsigned char pin_number_0_7)
{
	DIO_Toggle_PIN_on_port(portname,pin_number_0_7);
     b22:	0e 94 13 02 	call	0x426	; 0x426 <DIO_Toggle_PIN_on_port>
}
     b26:	08 95       	ret

00000b28 <READ_PIN_status>:
unsigned char READ_PIN_status (unsigned char portname,unsigned char pin_number_0_7)
{	
	return DIO_READ_PIN(portname,pin_number_0_7);
     b28:	0e 94 60 02 	call	0x4c0	; 0x4c0 <DIO_READ_PIN>
}	
     b2c:	08 95       	ret

00000b2e <main>:
unsigned char check_mode_var=0,x=0;


int main(void)
{
    LCD_INIT();
     b2e:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_INIT>
	ADC_INIT();
     b32:	0e 94 49 00 	call	0x92	; 0x92 <ADC_INIT>
	SPI_SLAVE_INIT();
     b36:	0e 94 bc 00 	call	0x178	; 0x178 <SPI_SLAVE_INIT>
	sei();
     b3a:	78 94       	sei
	char i;
	int temp,volt_mV;
	LCD_send_cmd(DISPLAY_ON_CURSOR_OFF);
     b3c:	8c e0       	ldi	r24, 0x0C	; 12
     b3e:	0e 94 40 04 	call	0x880	; 0x880 <LCD_send_cmd>
	LCD_send_string("TEMP:");
     b42:	80 e6       	ldi	r24, 0x60	; 96
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_send_string>
	DIO_set_PIN_dir('d',7,1);
     b4a:	84 e6       	ldi	r24, 0x64	; 100
     b4c:	67 e0       	ldi	r22, 0x07	; 7
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_set_PIN_dir>
	DIO_output_PIN_on_port('d',7,0);
     b54:	84 e6       	ldi	r24, 0x64	; 100
     b56:	67 e0       	ldi	r22, 0x07	; 7
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
	LED_INIT('a',2);
     b5e:	81 e6       	ldi	r24, 0x61	; 97
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	0e 94 63 05 	call	0xac6	; 0xac6 <LED_INIT>
	LED_INIT('a',3);
     b66:	81 e6       	ldi	r24, 0x61	; 97
     b68:	63 e0       	ldi	r22, 0x03	; 3
     b6a:	0e 94 63 05 	call	0xac6	; 0xac6 <LED_INIT>
	LED_INIT('a',4);
     b6e:	81 e6       	ldi	r24, 0x61	; 97
     b70:	64 e0       	ldi	r22, 0x04	; 4
     b72:	0e 94 63 05 	call	0xac6	; 0xac6 <LED_INIT>
		//temp=0.25*ADC_read();//(2.56[V]*read_value*1000[to get V in mv])/1024[level]*10[mV_10mV for every degree]
		volt_mV=ADC_read()*2.5;
		LCD_MOVE_CURSOR(1,6);
		if (volt_mV>=1000)
		{
			temp=(volt_mV-1000)/10;
     b76:	0f 2e       	mov	r0, r31
     b78:	fa e0       	ldi	r31, 0x0A	; 10
     b7a:	ef 2e       	mov	r14, r31
     b7c:	ff 24       	eor	r15, r15
     b7e:	f0 2d       	mov	r31, r0
			LCD_send_char(' ');
		} 
		else
		{
			
			temp=(1000-volt_mV)/10;
     b80:	0f 2e       	mov	r0, r31
     b82:	f8 ee       	ldi	r31, 0xE8	; 232
     b84:	cf 2e       	mov	r12, r31
     b86:	f3 e0       	ldi	r31, 0x03	; 3
     b88:	df 2e       	mov	r13, r31
     b8a:	f0 2d       	mov	r31, r0
		if (x==check_mode)
		{
			LED_ON('a',2);
			LED_ON('a',3);
			LED_ON('a',4);
			LCD_MOVE_CURSOR(1,1);
     b8c:	bb 24       	eor	r11, r11
     b8e:	68 94       	set
     b90:	b4 f8       	bld	r11, 4
			_delay_ms(10000);
			LED_OFF('a',2);
			LED_OFF('a',3);
			LED_OFF('a',4);
			LCD_CLEAR_Screen();
			LCD_send_string("TEMP:");
     b92:	0f 2e       	mov	r0, r31
     b94:	f0 e6       	ldi	r31, 0x60	; 96
     b96:	8f 2e       	mov	r8, r31
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	9f 2e       	mov	r9, r31
     b9c:	f0 2d       	mov	r31, r0
	LED_INIT('a',4);
	
	while(1)
    {
		//temp=0.25*ADC_read();//(2.56[V]*read_value*1000[to get V in mv])/1024[level]*10[mV_10mV for every degree]
		volt_mV=ADC_read()*2.5;
     b9e:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_read>
     ba2:	bc 01       	movw	r22, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__floatunsisf>
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e2       	ldi	r20, 0x20	; 32
     bb2:	50 e4       	ldi	r21, 0x40	; 64
     bb4:	0e 94 4d 08 	call	0x109a	; 0x109a <__mulsf3>
     bb8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__fixsfsi>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	ec 01       	movw	r28, r24
		LCD_MOVE_CURSOR(1,6);
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	66 e0       	ldi	r22, 0x06	; 6
     bc6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <LCD_MOVE_CURSOR>
		if (volt_mV>=1000)
     bca:	23 e0       	ldi	r18, 0x03	; 3
     bcc:	c8 3e       	cpi	r28, 0xE8	; 232
     bce:	d2 07       	cpc	r29, r18
     bd0:	cc f0       	brlt	.+50     	; 0xc04 <main+0xd6>
		{
			temp=(volt_mV-1000)/10;
     bd2:	ce 01       	movw	r24, r28
     bd4:	88 5e       	subi	r24, 0xE8	; 232
     bd6:	93 40       	sbci	r25, 0x03	; 3
     bd8:	b7 01       	movw	r22, r14
     bda:	0e 94 b0 08 	call	0x1160	; 0x1160 <__divmodhi4>
     bde:	86 2f       	mov	r24, r22
     be0:	97 2f       	mov	r25, r23
     be2:	c6 2f       	mov	r28, r22
     be4:	d7 2f       	mov	r29, r23
			print_val(temp);
     be6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <print_val>
			LCD_send_char(0xDf); //degree sign
     bea:	8f ed       	ldi	r24, 0xDF	; 223
     bec:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			LCD_send_char('C'); // C sign
     bf0:	83 e4       	ldi	r24, 0x43	; 67
     bf2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			LCD_send_char(' ');
     bf6:	80 e2       	ldi	r24, 0x20	; 32
     bf8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			LCD_send_char(' ');
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
     c02:	1a c0       	rjmp	.+52     	; 0xc38 <main+0x10a>
		} 
		else
		{
			
			temp=(1000-volt_mV)/10;
     c04:	c6 01       	movw	r24, r12
     c06:	8c 1b       	sub	r24, r28
     c08:	9d 0b       	sbc	r25, r29
     c0a:	b7 01       	movw	r22, r14
     c0c:	0e 94 b0 08 	call	0x1160	; 0x1160 <__divmodhi4>
     c10:	16 2f       	mov	r17, r22
     c12:	07 2f       	mov	r16, r23
     c14:	c6 2f       	mov	r28, r22
     c16:	d7 2f       	mov	r29, r23
			LCD_send_char('-');
     c18:	8d e2       	ldi	r24, 0x2D	; 45
     c1a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			print_val(temp);
     c1e:	81 2f       	mov	r24, r17
     c20:	90 2f       	mov	r25, r16
     c22:	0e 94 0f 05 	call	0xa1e	; 0xa1e <print_val>
			LCD_send_char(0xDf); //degree sign
     c26:	8f ed       	ldi	r24, 0xDF	; 223
     c28:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			LCD_send_char('C'); // C sign
     c2c:	83 e4       	ldi	r24, 0x43	; 67
     c2e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			LCD_send_char(' ');
     c32:	80 e2       	ldi	r24, 0x20	; 32
     c34:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
			
		}
		if (temp>=50&temp<60)
     c38:	ce 01       	movw	r24, r28
     c3a:	c2 97       	sbiw	r24, 0x32	; 50
     c3c:	8a 30       	cpi	r24, 0x0A	; 10
     c3e:	91 05       	cpc	r25, r1
     c40:	48 f4       	brcc	.+18     	; 0xc54 <main+0x126>
		{
			LED_ON('a',2);
     c42:	81 e6       	ldi	r24, 0x61	; 97
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_ON>
			LED_OFF('a',4);
     c4a:	81 e6       	ldi	r24, 0x61	; 97
     c4c:	64 e0       	ldi	r22, 0x04	; 4
     c4e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LED_OFF>
     c52:	19 c0       	rjmp	.+50     	; 0xc86 <main+0x158>
		}
		else if (temp>=60)
     c54:	cc 33       	cpi	r28, 0x3C	; 60
     c56:	d1 05       	cpc	r29, r1
     c58:	74 f0       	brlt	.+28     	; 0xc76 <main+0x148>
		{
			LED_ON('a',2);
     c5a:	81 e6       	ldi	r24, 0x61	; 97
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_ON>
			LED_ON('a',3);
     c62:	81 e6       	ldi	r24, 0x61	; 97
     c64:	63 e0       	ldi	r22, 0x03	; 3
     c66:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_ON>
			DIO_output_PIN_on_port('d',7,1);
     c6a:	84 e6       	ldi	r24, 0x64	; 100
     c6c:	67 e0       	ldi	r22, 0x07	; 7
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	0e 94 82 01 	call	0x304	; 0x304 <DIO_output_PIN_on_port>
     c74:	08 c0       	rjmp	.+16     	; 0xc86 <main+0x158>
		}
		else
		{
			LED_OFF('a',2);
     c76:	81 e6       	ldi	r24, 0x61	; 97
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LED_OFF>
			LED_ON('a',4);
     c7e:	81 e6       	ldi	r24, 0x61	; 97
     c80:	64 e0       	ldi	r22, 0x04	; 4
     c82:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_ON>
		}
		if (x==check_mode)
     c86:	80 91 66 00 	lds	r24, 0x0066
     c8a:	8a 3a       	cpi	r24, 0xAA	; 170
     c8c:	09 f0       	breq	.+2      	; 0xc90 <main+0x162>
     c8e:	87 cf       	rjmp	.-242    	; 0xb9e <main+0x70>
		{
			LED_ON('a',2);
     c90:	81 e6       	ldi	r24, 0x61	; 97
     c92:	62 e0       	ldi	r22, 0x02	; 2
     c94:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_ON>
			LED_ON('a',3);
     c98:	81 e6       	ldi	r24, 0x61	; 97
     c9a:	63 e0       	ldi	r22, 0x03	; 3
     c9c:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_ON>
			LED_ON('a',4);
     ca0:	81 e6       	ldi	r24, 0x61	; 97
     ca2:	64 e0       	ldi	r22, 0x04	; 4
     ca4:	0e 94 89 05 	call	0xb12	; 0xb12 <LED_ON>
			LCD_MOVE_CURSOR(1,1);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	0e 94 d6 04 	call	0x9ac	; 0x9ac <LCD_MOVE_CURSOR>
     cb0:	cb 2d       	mov	r28, r11
			for (i=0;i<=15;i++)
			{
				LCD_send_char(0xff);
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
     cb8:	c1 50       	subi	r28, 0x01	; 1
		{
			LED_ON('a',2);
			LED_ON('a',3);
			LED_ON('a',4);
			LCD_MOVE_CURSOR(1,1);
			for (i=0;i<=15;i++)
     cba:	d9 f7       	brne	.-10     	; 0xcb2 <main+0x184>
			{
				LCD_send_char(0xff);
			}
			LCD_MOVE_CURSOR(2,1);
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <LCD_MOVE_CURSOR>
     cc4:	cb 2d       	mov	r28, r11
			for (i=0;i<=15;i++)
			{
				LCD_send_char(0xff);
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <LCD_send_char>
     ccc:	c1 50       	subi	r28, 0x01	; 1
			for (i=0;i<=15;i++)
			{
				LCD_send_char(0xff);
			}
			LCD_MOVE_CURSOR(2,1);
			for (i=0;i<=15;i++)
     cce:	d9 f7       	brne	.-10     	; 0xcc6 <main+0x198>
     cd0:	8f ef       	ldi	r24, 0xFF	; 255
     cd2:	93 e2       	ldi	r25, 0x23	; 35
     cd4:	a4 ef       	ldi	r26, 0xF4	; 244
     cd6:	81 50       	subi	r24, 0x01	; 1
     cd8:	90 40       	sbci	r25, 0x00	; 0
     cda:	a0 40       	sbci	r26, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <main+0x1a8>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <main+0x1b2>
     ce0:	00 00       	nop
			{
				LCD_send_char(0xff);
			}
			_delay_ms(10000);
			LED_OFF('a',2);
     ce2:	81 e6       	ldi	r24, 0x61	; 97
     ce4:	62 e0       	ldi	r22, 0x02	; 2
     ce6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LED_OFF>
			LED_OFF('a',3);
     cea:	81 e6       	ldi	r24, 0x61	; 97
     cec:	63 e0       	ldi	r22, 0x03	; 3
     cee:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LED_OFF>
			LED_OFF('a',4);
     cf2:	81 e6       	ldi	r24, 0x61	; 97
     cf4:	64 e0       	ldi	r22, 0x04	; 4
     cf6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LED_OFF>
			LCD_CLEAR_Screen();
     cfa:	0e 94 92 04 	call	0x924	; 0x924 <LCD_CLEAR_Screen>
			LCD_send_string("TEMP:");
     cfe:	c4 01       	movw	r24, r8
     d00:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <LCD_send_string>
			x=0;
     d04:	10 92 66 00 	sts	0x0066, r1
     d08:	4a cf       	rjmp	.-364    	; 0xb9e <main+0x70>

00000d0a <__vector_12>:
		LCD_send_char('C'); // C sign
		LCD_MOVE_CURSOR(1,6);*/
    }
}
ISR(SPI_STC_vect)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
	x=SPI_SLAVE_recieve_char(1);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <SPI_SLAVE_recieve_char>
     d32:	80 93 66 00 	sts	0x0066, r24
}
     d36:	ff 91       	pop	r31
     d38:	ef 91       	pop	r30
     d3a:	bf 91       	pop	r27
     d3c:	af 91       	pop	r26
     d3e:	9f 91       	pop	r25
     d40:	8f 91       	pop	r24
     d42:	7f 91       	pop	r23
     d44:	6f 91       	pop	r22
     d46:	5f 91       	pop	r21
     d48:	4f 91       	pop	r20
     d4a:	3f 91       	pop	r19
     d4c:	2f 91       	pop	r18
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <timer2_INIT_OVERFLOW_Interrupt>:
#include <avr/interrupt.h>
#include <avr/io.h>

void timer2_INIT_OVERFLOW_Interrupt (void)
{
	SET_BIT(ASSR,AS2);//choose the oscillation source [0 for internal / 1 for TOSC2]
     d58:	82 b5       	in	r24, 0x22	; 34
     d5a:	88 60       	ori	r24, 0x08	; 8
     d5c:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS20);//choose the prescaler factor from table
     d5e:	85 b5       	in	r24, 0x25	; 37
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
     d64:	85 b5       	in	r24, 0x25	; 37
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	85 bd       	out	0x25, r24	; 37
	
	//enable interrupt
	sei();
     d6a:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);//for overflow interrupt
     d6c:	89 b7       	in	r24, 0x39	; 57
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	89 bf       	out	0x39, r24	; 57
}
     d72:	08 95       	ret

00000d74 <timer1_INIT_WAVE_Fast_PMW_A>:
void timer1_INIT_WAVE_Fast_PMW_A (double value)
{
	value=value*0.0055555555555556+1.5;
     d74:	21 e6       	ldi	r18, 0x61	; 97
     d76:	3b e0       	ldi	r19, 0x0B	; 11
     d78:	46 eb       	ldi	r20, 0xB6	; 182
     d7a:	5b e3       	ldi	r21, 0x3B	; 59
     d7c:	0e 94 4d 08 	call	0x109a	; 0x109a <__mulsf3>
	SET_BIT(DDRD,5);//set bin d5 to be output bin
     d80:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(DDRD,4);
     d82:	8c 9a       	sbi	0x11, 4	; 17
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
     d84:	2f b5       	in	r18, 0x2f	; 47
     d86:	2e 7f       	andi	r18, 0xFE	; 254
     d88:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,WGM11);
     d8a:	2f b5       	in	r18, 0x2f	; 47
     d8c:	22 60       	ori	r18, 0x02	; 2
     d8e:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
     d90:	2e b5       	in	r18, 0x2e	; 46
     d92:	28 60       	ori	r18, 0x08	; 8
     d94:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
     d96:	2e b5       	in	r18, 0x2e	; 46
     d98:	20 61       	ori	r18, 0x10	; 16
     d9a:	2e bd       	out	0x2e, r18	; 46
	sei();
	SET_BIT(TIMSK,TOIE2);//for overflow interrupt
}
void timer1_INIT_WAVE_Fast_PMW_A (double value)
{
	value=value*0.0055555555555556+1.5;
     d9c:	46 2f       	mov	r20, r22
     d9e:	57 2f       	mov	r21, r23
     da0:	68 2f       	mov	r22, r24
     da2:	79 2f       	mov	r23, r25
     da4:	cb 01       	movw	r24, r22
     da6:	ba 01       	movw	r22, r20
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 ec       	ldi	r20, 0xC0	; 192
     dae:	5f e3       	ldi	r21, 0x3F	; 63
     db0:	0e 94 2a 07 	call	0xe54	; 0xe54 <__addsf3>
	SET_BIT(DDRD,4);
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
	OCR1A=value*1000;//load the OCR1A,ICR1 values
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	4a e7       	ldi	r20, 0x7A	; 122
     dba:	54 e4       	ldi	r21, 0x44	; 68
     dbc:	0e 94 4d 08 	call	0x109a	; 0x109a <__mulsf3>
     dc0:	0e 94 93 07 	call	0xf26	; 0xf26 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9b bd       	out	0x2b, r25	; 43
     dca:	8a bd       	out	0x2a, r24	; 42
	OCR1B=value*1000;
     dcc:	99 bd       	out	0x29, r25	; 41
     dce:	88 bd       	out	0x28, r24	; 40
	ICR1=19999;
     dd0:	8f e1       	ldi	r24, 0x1F	; 31
     dd2:	9e e4       	ldi	r25, 0x4E	; 78
     dd4:	97 bd       	out	0x27, r25	; 39
     dd6:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1B,CS11);//no prescaling
     dd8:	8e b5       	in	r24, 0x2e	; 46
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1A1);
     dde:	8f b5       	in	r24, 0x2f	; 47
     de0:	80 68       	ori	r24, 0x80	; 128
     de2:	8f bd       	out	0x2f, r24	; 47
}
     de4:	08 95       	ret

00000de6 <timer1_INIT_WAVE_Fast_PMW_B>:

void timer1_INIT_WAVE_Fast_PMW_B (double value)
{
	value=value*0.0055555555555556+1.5;
     de6:	21 e6       	ldi	r18, 0x61	; 97
     de8:	3b e0       	ldi	r19, 0x0B	; 11
     dea:	46 eb       	ldi	r20, 0xB6	; 182
     dec:	5b e3       	ldi	r21, 0x3B	; 59
     dee:	0e 94 4d 08 	call	0x109a	; 0x109a <__mulsf3>
	SET_BIT(DDRD,4);//set bin d5 to be output bin
     df2:	8c 9a       	sbi	0x11, 4	; 17
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
     df4:	2f b5       	in	r18, 0x2f	; 47
     df6:	2e 7f       	andi	r18, 0xFE	; 254
     df8:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1A,WGM11);
     dfa:	2f b5       	in	r18, 0x2f	; 47
     dfc:	22 60       	ori	r18, 0x02	; 2
     dfe:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
     e00:	2e b5       	in	r18, 0x2e	; 46
     e02:	28 60       	ori	r18, 0x08	; 8
     e04:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
     e06:	2e b5       	in	r18, 0x2e	; 46
     e08:	20 61       	ori	r18, 0x10	; 16
     e0a:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1A,COM1A1);
}

void timer1_INIT_WAVE_Fast_PMW_B (double value)
{
	value=value*0.0055555555555556+1.5;
     e0c:	46 2f       	mov	r20, r22
     e0e:	57 2f       	mov	r21, r23
     e10:	68 2f       	mov	r22, r24
     e12:	79 2f       	mov	r23, r25
     e14:	cb 01       	movw	r24, r22
     e16:	ba 01       	movw	r22, r20
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 ec       	ldi	r20, 0xC0	; 192
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	0e 94 2a 07 	call	0xe54	; 0xe54 <__addsf3>
	SET_BIT(DDRD,4);//set bin d5 to be output bin
	CLEAR_BIT(TCCR1A,WGM10);//select fast PWM mode with ICR1 as top
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	SET_BIT(TCCR1B,WGM13);
	OCR1B=value*1000;//load the OCR1A,ICR1 values
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	4a e7       	ldi	r20, 0x7A	; 122
     e2a:	54 e4       	ldi	r21, 0x44	; 68
     e2c:	0e 94 4d 08 	call	0x109a	; 0x109a <__mulsf3>
     e30:	0e 94 93 07 	call	0xf26	; 0xf26 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	99 bd       	out	0x29, r25	; 41
     e3a:	88 bd       	out	0x28, r24	; 40
	ICR1=19999;
     e3c:	8f e1       	ldi	r24, 0x1F	; 31
     e3e:	9e e4       	ldi	r25, 0x4E	; 78
     e40:	97 bd       	out	0x27, r25	; 39
     e42:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1B,CS11);//no prescaling
     e44:	8e b5       	in	r24, 0x2e	; 46
     e46:	82 60       	ori	r24, 0x02	; 2
     e48:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1B1);
     e4a:	8f b5       	in	r24, 0x2f	; 47
     e4c:	80 62       	ori	r24, 0x20	; 32
     e4e:	8f bd       	out	0x2f, r24	; 47
     e50:	08 95       	ret

00000e52 <__subsf3>:
     e52:	50 58       	subi	r21, 0x80	; 128

00000e54 <__addsf3>:
     e54:	bb 27       	eor	r27, r27
     e56:	aa 27       	eor	r26, r26
     e58:	0e d0       	rcall	.+28     	; 0xe76 <__addsf3x>
     e5a:	e5 c0       	rjmp	.+458    	; 0x1026 <__fp_round>
     e5c:	d6 d0       	rcall	.+428    	; 0x100a <__fp_pscA>
     e5e:	30 f0       	brcs	.+12     	; 0xe6c <__addsf3+0x18>
     e60:	db d0       	rcall	.+438    	; 0x1018 <__fp_pscB>
     e62:	20 f0       	brcs	.+8      	; 0xe6c <__addsf3+0x18>
     e64:	31 f4       	brne	.+12     	; 0xe72 <__addsf3+0x1e>
     e66:	9f 3f       	cpi	r25, 0xFF	; 255
     e68:	11 f4       	brne	.+4      	; 0xe6e <__addsf3+0x1a>
     e6a:	1e f4       	brtc	.+6      	; 0xe72 <__addsf3+0x1e>
     e6c:	cb c0       	rjmp	.+406    	; 0x1004 <__fp_nan>
     e6e:	0e f4       	brtc	.+2      	; 0xe72 <__addsf3+0x1e>
     e70:	e0 95       	com	r30
     e72:	e7 fb       	bst	r30, 7
     e74:	c1 c0       	rjmp	.+386    	; 0xff8 <__fp_inf>

00000e76 <__addsf3x>:
     e76:	e9 2f       	mov	r30, r25
     e78:	e7 d0       	rcall	.+462    	; 0x1048 <__fp_split3>
     e7a:	80 f3       	brcs	.-32     	; 0xe5c <__addsf3+0x8>
     e7c:	ba 17       	cp	r27, r26
     e7e:	62 07       	cpc	r22, r18
     e80:	73 07       	cpc	r23, r19
     e82:	84 07       	cpc	r24, r20
     e84:	95 07       	cpc	r25, r21
     e86:	18 f0       	brcs	.+6      	; 0xe8e <__addsf3x+0x18>
     e88:	71 f4       	brne	.+28     	; 0xea6 <__addsf3x+0x30>
     e8a:	9e f5       	brtc	.+102    	; 0xef2 <__addsf3x+0x7c>
     e8c:	ff c0       	rjmp	.+510    	; 0x108c <__fp_zero>
     e8e:	0e f4       	brtc	.+2      	; 0xe92 <__addsf3x+0x1c>
     e90:	e0 95       	com	r30
     e92:	0b 2e       	mov	r0, r27
     e94:	ba 2f       	mov	r27, r26
     e96:	a0 2d       	mov	r26, r0
     e98:	0b 01       	movw	r0, r22
     e9a:	b9 01       	movw	r22, r18
     e9c:	90 01       	movw	r18, r0
     e9e:	0c 01       	movw	r0, r24
     ea0:	ca 01       	movw	r24, r20
     ea2:	a0 01       	movw	r20, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	ff 27       	eor	r31, r31
     ea8:	59 1b       	sub	r21, r25
     eaa:	99 f0       	breq	.+38     	; 0xed2 <__addsf3x+0x5c>
     eac:	59 3f       	cpi	r21, 0xF9	; 249
     eae:	50 f4       	brcc	.+20     	; 0xec4 <__addsf3x+0x4e>
     eb0:	50 3e       	cpi	r21, 0xE0	; 224
     eb2:	68 f1       	brcs	.+90     	; 0xf0e <__addsf3x+0x98>
     eb4:	1a 16       	cp	r1, r26
     eb6:	f0 40       	sbci	r31, 0x00	; 0
     eb8:	a2 2f       	mov	r26, r18
     eba:	23 2f       	mov	r18, r19
     ebc:	34 2f       	mov	r19, r20
     ebe:	44 27       	eor	r20, r20
     ec0:	58 5f       	subi	r21, 0xF8	; 248
     ec2:	f3 cf       	rjmp	.-26     	; 0xeaa <__addsf3x+0x34>
     ec4:	46 95       	lsr	r20
     ec6:	37 95       	ror	r19
     ec8:	27 95       	ror	r18
     eca:	a7 95       	ror	r26
     ecc:	f0 40       	sbci	r31, 0x00	; 0
     ece:	53 95       	inc	r21
     ed0:	c9 f7       	brne	.-14     	; 0xec4 <__addsf3x+0x4e>
     ed2:	7e f4       	brtc	.+30     	; 0xef2 <__addsf3x+0x7c>
     ed4:	1f 16       	cp	r1, r31
     ed6:	ba 0b       	sbc	r27, r26
     ed8:	62 0b       	sbc	r22, r18
     eda:	73 0b       	sbc	r23, r19
     edc:	84 0b       	sbc	r24, r20
     ede:	ba f0       	brmi	.+46     	; 0xf0e <__addsf3x+0x98>
     ee0:	91 50       	subi	r25, 0x01	; 1
     ee2:	a1 f0       	breq	.+40     	; 0xf0c <__addsf3x+0x96>
     ee4:	ff 0f       	add	r31, r31
     ee6:	bb 1f       	adc	r27, r27
     ee8:	66 1f       	adc	r22, r22
     eea:	77 1f       	adc	r23, r23
     eec:	88 1f       	adc	r24, r24
     eee:	c2 f7       	brpl	.-16     	; 0xee0 <__addsf3x+0x6a>
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <__addsf3x+0x98>
     ef2:	ba 0f       	add	r27, r26
     ef4:	62 1f       	adc	r22, r18
     ef6:	73 1f       	adc	r23, r19
     ef8:	84 1f       	adc	r24, r20
     efa:	48 f4       	brcc	.+18     	; 0xf0e <__addsf3x+0x98>
     efc:	87 95       	ror	r24
     efe:	77 95       	ror	r23
     f00:	67 95       	ror	r22
     f02:	b7 95       	ror	r27
     f04:	f7 95       	ror	r31
     f06:	9e 3f       	cpi	r25, 0xFE	; 254
     f08:	08 f0       	brcs	.+2      	; 0xf0c <__addsf3x+0x96>
     f0a:	b3 cf       	rjmp	.-154    	; 0xe72 <__addsf3+0x1e>
     f0c:	93 95       	inc	r25
     f0e:	88 0f       	add	r24, r24
     f10:	08 f0       	brcs	.+2      	; 0xf14 <__addsf3x+0x9e>
     f12:	99 27       	eor	r25, r25
     f14:	ee 0f       	add	r30, r30
     f16:	97 95       	ror	r25
     f18:	87 95       	ror	r24
     f1a:	08 95       	ret

00000f1c <__fixsfsi>:
     f1c:	04 d0       	rcall	.+8      	; 0xf26 <__fixunssfsi>
     f1e:	68 94       	set
     f20:	b1 11       	cpse	r27, r1
     f22:	b5 c0       	rjmp	.+362    	; 0x108e <__fp_szero>
     f24:	08 95       	ret

00000f26 <__fixunssfsi>:
     f26:	98 d0       	rcall	.+304    	; 0x1058 <__fp_splitA>
     f28:	88 f0       	brcs	.+34     	; 0xf4c <__fixunssfsi+0x26>
     f2a:	9f 57       	subi	r25, 0x7F	; 127
     f2c:	90 f0       	brcs	.+36     	; 0xf52 <__fixunssfsi+0x2c>
     f2e:	b9 2f       	mov	r27, r25
     f30:	99 27       	eor	r25, r25
     f32:	b7 51       	subi	r27, 0x17	; 23
     f34:	a0 f0       	brcs	.+40     	; 0xf5e <__fixunssfsi+0x38>
     f36:	d1 f0       	breq	.+52     	; 0xf6c <__fixunssfsi+0x46>
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 1f       	adc	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	1a f0       	brmi	.+6      	; 0xf48 <__fixunssfsi+0x22>
     f42:	ba 95       	dec	r27
     f44:	c9 f7       	brne	.-14     	; 0xf38 <__fixunssfsi+0x12>
     f46:	12 c0       	rjmp	.+36     	; 0xf6c <__fixunssfsi+0x46>
     f48:	b1 30       	cpi	r27, 0x01	; 1
     f4a:	81 f0       	breq	.+32     	; 0xf6c <__fixunssfsi+0x46>
     f4c:	9f d0       	rcall	.+318    	; 0x108c <__fp_zero>
     f4e:	b1 e0       	ldi	r27, 0x01	; 1
     f50:	08 95       	ret
     f52:	9c c0       	rjmp	.+312    	; 0x108c <__fp_zero>
     f54:	67 2f       	mov	r22, r23
     f56:	78 2f       	mov	r23, r24
     f58:	88 27       	eor	r24, r24
     f5a:	b8 5f       	subi	r27, 0xF8	; 248
     f5c:	39 f0       	breq	.+14     	; 0xf6c <__fixunssfsi+0x46>
     f5e:	b9 3f       	cpi	r27, 0xF9	; 249
     f60:	cc f3       	brlt	.-14     	; 0xf54 <__fixunssfsi+0x2e>
     f62:	86 95       	lsr	r24
     f64:	77 95       	ror	r23
     f66:	67 95       	ror	r22
     f68:	b3 95       	inc	r27
     f6a:	d9 f7       	brne	.-10     	; 0xf62 <__fixunssfsi+0x3c>
     f6c:	3e f4       	brtc	.+14     	; 0xf7c <__fixunssfsi+0x56>
     f6e:	90 95       	com	r25
     f70:	80 95       	com	r24
     f72:	70 95       	com	r23
     f74:	61 95       	neg	r22
     f76:	7f 4f       	sbci	r23, 0xFF	; 255
     f78:	8f 4f       	sbci	r24, 0xFF	; 255
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	08 95       	ret

00000f7e <__floatunsisf>:
     f7e:	e8 94       	clt
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <__floatsisf+0x12>

00000f82 <__floatsisf>:
     f82:	97 fb       	bst	r25, 7
     f84:	3e f4       	brtc	.+14     	; 0xf94 <__floatsisf+0x12>
     f86:	90 95       	com	r25
     f88:	80 95       	com	r24
     f8a:	70 95       	com	r23
     f8c:	61 95       	neg	r22
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	99 23       	and	r25, r25
     f96:	a9 f0       	breq	.+42     	; 0xfc2 <__floatsisf+0x40>
     f98:	f9 2f       	mov	r31, r25
     f9a:	96 e9       	ldi	r25, 0x96	; 150
     f9c:	bb 27       	eor	r27, r27
     f9e:	93 95       	inc	r25
     fa0:	f6 95       	lsr	r31
     fa2:	87 95       	ror	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	f1 11       	cpse	r31, r1
     fac:	f8 cf       	rjmp	.-16     	; 0xf9e <__floatsisf+0x1c>
     fae:	fa f4       	brpl	.+62     	; 0xfee <__floatsisf+0x6c>
     fb0:	bb 0f       	add	r27, r27
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <__floatsisf+0x36>
     fb4:	60 ff       	sbrs	r22, 0
     fb6:	1b c0       	rjmp	.+54     	; 0xfee <__floatsisf+0x6c>
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <__floatsisf+0x6c>
     fc2:	88 23       	and	r24, r24
     fc4:	11 f0       	breq	.+4      	; 0xfca <__floatsisf+0x48>
     fc6:	96 e9       	ldi	r25, 0x96	; 150
     fc8:	11 c0       	rjmp	.+34     	; 0xfec <__floatsisf+0x6a>
     fca:	77 23       	and	r23, r23
     fcc:	21 f0       	breq	.+8      	; 0xfd6 <__floatsisf+0x54>
     fce:	9e e8       	ldi	r25, 0x8E	; 142
     fd0:	87 2f       	mov	r24, r23
     fd2:	76 2f       	mov	r23, r22
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <__floatsisf+0x5e>
     fd6:	66 23       	and	r22, r22
     fd8:	71 f0       	breq	.+28     	; 0xff6 <__floatsisf+0x74>
     fda:	96 e8       	ldi	r25, 0x86	; 134
     fdc:	86 2f       	mov	r24, r22
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	2a f0       	brmi	.+10     	; 0xfee <__floatsisf+0x6c>
     fe4:	9a 95       	dec	r25
     fe6:	66 0f       	add	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	da f7       	brpl	.-10     	; 0xfe4 <__floatsisf+0x62>
     fee:	88 0f       	add	r24, r24
     ff0:	96 95       	lsr	r25
     ff2:	87 95       	ror	r24
     ff4:	97 f9       	bld	r25, 7
     ff6:	08 95       	ret

00000ff8 <__fp_inf>:
     ff8:	97 f9       	bld	r25, 7
     ffa:	9f 67       	ori	r25, 0x7F	; 127
     ffc:	80 e8       	ldi	r24, 0x80	; 128
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	08 95       	ret

00001004 <__fp_nan>:
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	80 ec       	ldi	r24, 0xC0	; 192
    1008:	08 95       	ret

0000100a <__fp_pscA>:
    100a:	00 24       	eor	r0, r0
    100c:	0a 94       	dec	r0
    100e:	16 16       	cp	r1, r22
    1010:	17 06       	cpc	r1, r23
    1012:	18 06       	cpc	r1, r24
    1014:	09 06       	cpc	r0, r25
    1016:	08 95       	ret

00001018 <__fp_pscB>:
    1018:	00 24       	eor	r0, r0
    101a:	0a 94       	dec	r0
    101c:	12 16       	cp	r1, r18
    101e:	13 06       	cpc	r1, r19
    1020:	14 06       	cpc	r1, r20
    1022:	05 06       	cpc	r0, r21
    1024:	08 95       	ret

00001026 <__fp_round>:
    1026:	09 2e       	mov	r0, r25
    1028:	03 94       	inc	r0
    102a:	00 0c       	add	r0, r0
    102c:	11 f4       	brne	.+4      	; 0x1032 <__fp_round+0xc>
    102e:	88 23       	and	r24, r24
    1030:	52 f0       	brmi	.+20     	; 0x1046 <__fp_round+0x20>
    1032:	bb 0f       	add	r27, r27
    1034:	40 f4       	brcc	.+16     	; 0x1046 <__fp_round+0x20>
    1036:	bf 2b       	or	r27, r31
    1038:	11 f4       	brne	.+4      	; 0x103e <__fp_round+0x18>
    103a:	60 ff       	sbrs	r22, 0
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <__fp_round+0x20>
    103e:	6f 5f       	subi	r22, 0xFF	; 255
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	8f 4f       	sbci	r24, 0xFF	; 255
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	08 95       	ret

00001048 <__fp_split3>:
    1048:	57 fd       	sbrc	r21, 7
    104a:	90 58       	subi	r25, 0x80	; 128
    104c:	44 0f       	add	r20, r20
    104e:	55 1f       	adc	r21, r21
    1050:	59 f0       	breq	.+22     	; 0x1068 <__fp_splitA+0x10>
    1052:	5f 3f       	cpi	r21, 0xFF	; 255
    1054:	71 f0       	breq	.+28     	; 0x1072 <__fp_splitA+0x1a>
    1056:	47 95       	ror	r20

00001058 <__fp_splitA>:
    1058:	88 0f       	add	r24, r24
    105a:	97 fb       	bst	r25, 7
    105c:	99 1f       	adc	r25, r25
    105e:	61 f0       	breq	.+24     	; 0x1078 <__fp_splitA+0x20>
    1060:	9f 3f       	cpi	r25, 0xFF	; 255
    1062:	79 f0       	breq	.+30     	; 0x1082 <__fp_splitA+0x2a>
    1064:	87 95       	ror	r24
    1066:	08 95       	ret
    1068:	12 16       	cp	r1, r18
    106a:	13 06       	cpc	r1, r19
    106c:	14 06       	cpc	r1, r20
    106e:	55 1f       	adc	r21, r21
    1070:	f2 cf       	rjmp	.-28     	; 0x1056 <__fp_split3+0xe>
    1072:	46 95       	lsr	r20
    1074:	f1 df       	rcall	.-30     	; 0x1058 <__fp_splitA>
    1076:	08 c0       	rjmp	.+16     	; 0x1088 <__fp_splitA+0x30>
    1078:	16 16       	cp	r1, r22
    107a:	17 06       	cpc	r1, r23
    107c:	18 06       	cpc	r1, r24
    107e:	99 1f       	adc	r25, r25
    1080:	f1 cf       	rjmp	.-30     	; 0x1064 <__fp_splitA+0xc>
    1082:	86 95       	lsr	r24
    1084:	71 05       	cpc	r23, r1
    1086:	61 05       	cpc	r22, r1
    1088:	08 94       	sec
    108a:	08 95       	ret

0000108c <__fp_zero>:
    108c:	e8 94       	clt

0000108e <__fp_szero>:
    108e:	bb 27       	eor	r27, r27
    1090:	66 27       	eor	r22, r22
    1092:	77 27       	eor	r23, r23
    1094:	cb 01       	movw	r24, r22
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret

0000109a <__mulsf3>:
    109a:	0b d0       	rcall	.+22     	; 0x10b2 <__mulsf3x>
    109c:	c4 cf       	rjmp	.-120    	; 0x1026 <__fp_round>
    109e:	b5 df       	rcall	.-150    	; 0x100a <__fp_pscA>
    10a0:	28 f0       	brcs	.+10     	; 0x10ac <__mulsf3+0x12>
    10a2:	ba df       	rcall	.-140    	; 0x1018 <__fp_pscB>
    10a4:	18 f0       	brcs	.+6      	; 0x10ac <__mulsf3+0x12>
    10a6:	95 23       	and	r25, r21
    10a8:	09 f0       	breq	.+2      	; 0x10ac <__mulsf3+0x12>
    10aa:	a6 cf       	rjmp	.-180    	; 0xff8 <__fp_inf>
    10ac:	ab cf       	rjmp	.-170    	; 0x1004 <__fp_nan>
    10ae:	11 24       	eor	r1, r1
    10b0:	ee cf       	rjmp	.-36     	; 0x108e <__fp_szero>

000010b2 <__mulsf3x>:
    10b2:	ca df       	rcall	.-108    	; 0x1048 <__fp_split3>
    10b4:	a0 f3       	brcs	.-24     	; 0x109e <__mulsf3+0x4>

000010b6 <__mulsf3_pse>:
    10b6:	95 9f       	mul	r25, r21
    10b8:	d1 f3       	breq	.-12     	; 0x10ae <__mulsf3+0x14>
    10ba:	95 0f       	add	r25, r21
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	55 1f       	adc	r21, r21
    10c0:	62 9f       	mul	r22, r18
    10c2:	f0 01       	movw	r30, r0
    10c4:	72 9f       	mul	r23, r18
    10c6:	bb 27       	eor	r27, r27
    10c8:	f0 0d       	add	r31, r0
    10ca:	b1 1d       	adc	r27, r1
    10cc:	63 9f       	mul	r22, r19
    10ce:	aa 27       	eor	r26, r26
    10d0:	f0 0d       	add	r31, r0
    10d2:	b1 1d       	adc	r27, r1
    10d4:	aa 1f       	adc	r26, r26
    10d6:	64 9f       	mul	r22, r20
    10d8:	66 27       	eor	r22, r22
    10da:	b0 0d       	add	r27, r0
    10dc:	a1 1d       	adc	r26, r1
    10de:	66 1f       	adc	r22, r22
    10e0:	82 9f       	mul	r24, r18
    10e2:	22 27       	eor	r18, r18
    10e4:	b0 0d       	add	r27, r0
    10e6:	a1 1d       	adc	r26, r1
    10e8:	62 1f       	adc	r22, r18
    10ea:	73 9f       	mul	r23, r19
    10ec:	b0 0d       	add	r27, r0
    10ee:	a1 1d       	adc	r26, r1
    10f0:	62 1f       	adc	r22, r18
    10f2:	83 9f       	mul	r24, r19
    10f4:	a0 0d       	add	r26, r0
    10f6:	61 1d       	adc	r22, r1
    10f8:	22 1f       	adc	r18, r18
    10fa:	74 9f       	mul	r23, r20
    10fc:	33 27       	eor	r19, r19
    10fe:	a0 0d       	add	r26, r0
    1100:	61 1d       	adc	r22, r1
    1102:	23 1f       	adc	r18, r19
    1104:	84 9f       	mul	r24, r20
    1106:	60 0d       	add	r22, r0
    1108:	21 1d       	adc	r18, r1
    110a:	82 2f       	mov	r24, r18
    110c:	76 2f       	mov	r23, r22
    110e:	6a 2f       	mov	r22, r26
    1110:	11 24       	eor	r1, r1
    1112:	9f 57       	subi	r25, 0x7F	; 127
    1114:	50 40       	sbci	r21, 0x00	; 0
    1116:	8a f0       	brmi	.+34     	; 0x113a <__mulsf3_pse+0x84>
    1118:	e1 f0       	breq	.+56     	; 0x1152 <__mulsf3_pse+0x9c>
    111a:	88 23       	and	r24, r24
    111c:	4a f0       	brmi	.+18     	; 0x1130 <__mulsf3_pse+0x7a>
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	bb 1f       	adc	r27, r27
    1124:	66 1f       	adc	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	91 50       	subi	r25, 0x01	; 1
    112c:	50 40       	sbci	r21, 0x00	; 0
    112e:	a9 f7       	brne	.-22     	; 0x111a <__mulsf3_pse+0x64>
    1130:	9e 3f       	cpi	r25, 0xFE	; 254
    1132:	51 05       	cpc	r21, r1
    1134:	70 f0       	brcs	.+28     	; 0x1152 <__mulsf3_pse+0x9c>
    1136:	60 cf       	rjmp	.-320    	; 0xff8 <__fp_inf>
    1138:	aa cf       	rjmp	.-172    	; 0x108e <__fp_szero>
    113a:	5f 3f       	cpi	r21, 0xFF	; 255
    113c:	ec f3       	brlt	.-6      	; 0x1138 <__mulsf3_pse+0x82>
    113e:	98 3e       	cpi	r25, 0xE8	; 232
    1140:	dc f3       	brlt	.-10     	; 0x1138 <__mulsf3_pse+0x82>
    1142:	86 95       	lsr	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	b7 95       	ror	r27
    114a:	f7 95       	ror	r31
    114c:	e7 95       	ror	r30
    114e:	9f 5f       	subi	r25, 0xFF	; 255
    1150:	c1 f7       	brne	.-16     	; 0x1142 <__mulsf3_pse+0x8c>
    1152:	fe 2b       	or	r31, r30
    1154:	88 0f       	add	r24, r24
    1156:	91 1d       	adc	r25, r1
    1158:	96 95       	lsr	r25
    115a:	87 95       	ror	r24
    115c:	97 f9       	bld	r25, 7
    115e:	08 95       	ret

00001160 <__divmodhi4>:
    1160:	97 fb       	bst	r25, 7
    1162:	09 2e       	mov	r0, r25
    1164:	07 26       	eor	r0, r23
    1166:	0a d0       	rcall	.+20     	; 0x117c <__divmodhi4_neg1>
    1168:	77 fd       	sbrc	r23, 7
    116a:	04 d0       	rcall	.+8      	; 0x1174 <__divmodhi4_neg2>
    116c:	2e d0       	rcall	.+92     	; 0x11ca <__udivmodhi4>
    116e:	06 d0       	rcall	.+12     	; 0x117c <__divmodhi4_neg1>
    1170:	00 20       	and	r0, r0
    1172:	1a f4       	brpl	.+6      	; 0x117a <__divmodhi4_exit>

00001174 <__divmodhi4_neg2>:
    1174:	70 95       	com	r23
    1176:	61 95       	neg	r22
    1178:	7f 4f       	sbci	r23, 0xFF	; 255

0000117a <__divmodhi4_exit>:
    117a:	08 95       	ret

0000117c <__divmodhi4_neg1>:
    117c:	f6 f7       	brtc	.-4      	; 0x117a <__divmodhi4_exit>
    117e:	90 95       	com	r25
    1180:	81 95       	neg	r24
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__udivmodsi4>:
    1186:	a1 e2       	ldi	r26, 0x21	; 33
    1188:	1a 2e       	mov	r1, r26
    118a:	aa 1b       	sub	r26, r26
    118c:	bb 1b       	sub	r27, r27
    118e:	fd 01       	movw	r30, r26
    1190:	0d c0       	rjmp	.+26     	; 0x11ac <__udivmodsi4_ep>

00001192 <__udivmodsi4_loop>:
    1192:	aa 1f       	adc	r26, r26
    1194:	bb 1f       	adc	r27, r27
    1196:	ee 1f       	adc	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	a2 17       	cp	r26, r18
    119c:	b3 07       	cpc	r27, r19
    119e:	e4 07       	cpc	r30, r20
    11a0:	f5 07       	cpc	r31, r21
    11a2:	20 f0       	brcs	.+8      	; 0x11ac <__udivmodsi4_ep>
    11a4:	a2 1b       	sub	r26, r18
    11a6:	b3 0b       	sbc	r27, r19
    11a8:	e4 0b       	sbc	r30, r20
    11aa:	f5 0b       	sbc	r31, r21

000011ac <__udivmodsi4_ep>:
    11ac:	66 1f       	adc	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	1a 94       	dec	r1
    11b6:	69 f7       	brne	.-38     	; 0x1192 <__udivmodsi4_loop>
    11b8:	60 95       	com	r22
    11ba:	70 95       	com	r23
    11bc:	80 95       	com	r24
    11be:	90 95       	com	r25
    11c0:	9b 01       	movw	r18, r22
    11c2:	ac 01       	movw	r20, r24
    11c4:	bd 01       	movw	r22, r26
    11c6:	cf 01       	movw	r24, r30
    11c8:	08 95       	ret

000011ca <__udivmodhi4>:
    11ca:	aa 1b       	sub	r26, r26
    11cc:	bb 1b       	sub	r27, r27
    11ce:	51 e1       	ldi	r21, 0x11	; 17
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <__udivmodhi4_ep>

000011d2 <__udivmodhi4_loop>:
    11d2:	aa 1f       	adc	r26, r26
    11d4:	bb 1f       	adc	r27, r27
    11d6:	a6 17       	cp	r26, r22
    11d8:	b7 07       	cpc	r27, r23
    11da:	10 f0       	brcs	.+4      	; 0x11e0 <__udivmodhi4_ep>
    11dc:	a6 1b       	sub	r26, r22
    11de:	b7 0b       	sbc	r27, r23

000011e0 <__udivmodhi4_ep>:
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	5a 95       	dec	r21
    11e6:	a9 f7       	brne	.-22     	; 0x11d2 <__udivmodhi4_loop>
    11e8:	80 95       	com	r24
    11ea:	90 95       	com	r25
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	08 95       	ret

000011f2 <_exit>:
    11f2:	f8 94       	cli

000011f4 <__stop_program>:
    11f4:	ff cf       	rjmp	.-2      	; 0x11f4 <__stop_program>
