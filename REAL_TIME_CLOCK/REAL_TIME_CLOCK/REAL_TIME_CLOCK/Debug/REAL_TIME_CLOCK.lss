
REAL_TIME_CLOCK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000f36  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007a  0080007a  00000fe4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001738  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b6  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d1  00000000  00000000  00002b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acf  00000000  00000000  0000313f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00003c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000439  00000000  00000000  00003fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013a9  00000000  00000000  00004415  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000057be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ba 05 	call	0xb74	; 0xb74 <main>
  8a:	0c 94 99 07 	jmp	0xf32	; 0xf32 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_set_PIN_dir>:
#include <avr/io.h>
#include "STD_BIT_MACRO.h"

void DIO_set_PIN_dir (unsigned char portname,unsigned char pin_number_0_7,unsigned char direction)
{
	switch (portname)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_set_PIN_dir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_set_PIN_dir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_set_PIN_dir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_set_PIN_dir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_set_PIN_dir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_set_PIN_dir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_set_PIN_dir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_set_PIN_dir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_set_PIN_dir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_set_PIN_dir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_set_PIN_dir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_set_PIN_dir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_set_PIN_dir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_set_PIN_dir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_set_PIN_dir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_set_PIN_dir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_set_PIN_dir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_set_PIN_dir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_set_PIN_dir+0xe8>
	{
		case 'A':
		case 'a':
		if (direction==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_set_PIN_dir+0x58>
		{
			SET_BIT(DDRA,pin_number_0_7);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_set_PIN_dir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_set_PIN_dir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin_number_0_7);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_set_PIN_dir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_set_PIN_dir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		//DDRA=dir==1?DDRA|(1<<pin):DDRA&~(1<<pin);
		case 'B':
		case 'b':
		if (direction==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_set_PIN_dir+0x92>
		{
			SET_BIT(DDRB,pin_number_0_7);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_set_PIN_dir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_set_PIN_dir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin_number_0_7);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_set_PIN_dir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_set_PIN_dir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (direction==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_set_PIN_dir+0xcc>
		{
			SET_BIT(DDRC,pin_number_0_7);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_set_PIN_dir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_set_PIN_dir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin_number_0_7);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_set_PIN_dir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_set_PIN_dir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (direction==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_set_PIN_dir+0x106>
		{
			SET_BIT(DDRD,pin_number_0_7);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_set_PIN_dir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_set_PIN_dir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin_number_0_7);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_set_PIN_dir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_set_PIN_dir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_output_PIN_on_port>:
		break;
	}
}
void DIO_output_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7,unsigned char output)
{
	switch (portname)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_output_PIN_on_port+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_output_PIN_on_port+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_output_PIN_on_port+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_output_PIN_on_port+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_output_PIN_on_port+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_output_PIN_on_port+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_output_PIN_on_port+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_output_PIN_on_port+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_output_PIN_on_port+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_output_PIN_on_port+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_output_PIN_on_port+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_output_PIN_on_port+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_output_PIN_on_port+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_output_PIN_on_port+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_output_PIN_on_port+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_output_PIN_on_port+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_output_PIN_on_port+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_output_PIN_on_port+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_output_PIN_on_port+0xe8>
	{
		case 'A':
		case 'a':
		if (output==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_output_PIN_on_port+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_output_PIN_on_port+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_output_PIN_on_port+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_output_PIN_on_port+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_output_PIN_on_port+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (output==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_output_PIN_on_port+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_output_PIN_on_port+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_output_PIN_on_port+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_output_PIN_on_port+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_output_PIN_on_port+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (output==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_output_PIN_on_port+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_output_PIN_on_port+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_output_PIN_on_port+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_output_PIN_on_port+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_output_PIN_on_port+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (output==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_output_PIN_on_port+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_output_PIN_on_port+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_output_PIN_on_port+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_output_PIN_on_port+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_output_PIN_on_port+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_Toggle_PIN_on_port>:
		break;
	}
}
void DIO_Toggle_PIN_on_port (unsigned char portname,unsigned char pin_number_0_7)
{
	switch (portname)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_Toggle_PIN_on_port+0x6>
 2da:	3d c0       	rjmp	.+122    	; 0x356 <DIO_Toggle_PIN_on_port+0x80>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_Toggle_PIN_on_port+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DIO_Toggle_PIN_on_port+0x4c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	50 f5       	brcc	.+84     	; 0x33c <DIO_Toggle_PIN_on_port+0x66>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_Toggle_PIN_on_port+0x18>
 2ec:	40 c0       	rjmp	.+128    	; 0x36e <DIO_Toggle_PIN_on_port+0x98>
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <DIO_Toggle_PIN_on_port+0x32>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	b9 f0       	breq	.+46     	; 0x322 <DIO_Toggle_PIN_on_port+0x4c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <DIO_Toggle_PIN_on_port+0x28>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	c9 f5       	brne	.+114    	; 0x36e <DIO_Toggle_PIN_on_port+0x98>
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <DIO_Toggle_PIN_on_port+0x32>
 2fe:	83 36       	cpi	r24, 0x63	; 99
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_Toggle_PIN_on_port+0x66>
 302:	84 36       	cpi	r24, 0x64	; 100
 304:	a1 f5       	brne	.+104    	; 0x36e <DIO_Toggle_PIN_on_port+0x98>
 306:	27 c0       	rjmp	.+78     	; 0x356 <DIO_Toggle_PIN_on_port+0x80>
	{
		case 'A':
		case 'a':
		TOGGLE_BIT(PORTA,pin_number_0_7);
 308:	2b b3       	in	r18, 0x1b	; 27
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	ac 01       	movw	r20, r24
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_Toggle_PIN_on_port+0x40>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	6a 95       	dec	r22
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_Toggle_PIN_on_port+0x3c>
 31a:	ba 01       	movw	r22, r20
 31c:	62 27       	eor	r22, r18
 31e:	6b bb       	out	0x1b, r22	; 27
		break;
 320:	08 95       	ret
		case 'B':
		case 'b':
		TOGGLE_BIT(PORTB,pin_number_0_7);
 322:	28 b3       	in	r18, 0x18	; 24
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ac 01       	movw	r20, r24
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Toggle_PIN_on_port+0x5a>
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Toggle_PIN_on_port+0x56>
 334:	ba 01       	movw	r22, r20
 336:	62 27       	eor	r22, r18
 338:	68 bb       	out	0x18, r22	; 24
		break;
 33a:	08 95       	ret
		case 'C':
		case 'c':
		TOGGLE_BIT(PORTC,pin_number_0_7);
 33c:	25 b3       	in	r18, 0x15	; 21
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ac 01       	movw	r20, r24
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_Toggle_PIN_on_port+0x74>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_Toggle_PIN_on_port+0x70>
 34e:	ba 01       	movw	r22, r20
 350:	62 27       	eor	r22, r18
 352:	65 bb       	out	0x15, r22	; 21
		break;
 354:	08 95       	ret
		case 'D':
		case 'd':
		TOGGLE_BIT(PORTD,pin_number_0_7);
 356:	22 b3       	in	r18, 0x12	; 18
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	ac 01       	movw	r20, r24
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_Toggle_PIN_on_port+0x8e>
 360:	44 0f       	add	r20, r20
 362:	55 1f       	adc	r21, r21
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_Toggle_PIN_on_port+0x8a>
 368:	ba 01       	movw	r22, r20
 36a:	62 27       	eor	r22, r18
 36c:	62 bb       	out	0x12, r22	; 18
 36e:	08 95       	ret

00000370 <DIO_READ_PIN>:
	}
}
unsigned char DIO_READ_PIN (unsigned char portname,unsigned char pin_number_0_7)
{
	unsigned char val;
	switch (portname)
 370:	84 34       	cpi	r24, 0x44	; 68
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_READ_PIN+0x6>
 374:	51 c0       	rjmp	.+162    	; 0x418 <DIO_READ_PIN+0xa8>
 376:	85 34       	cpi	r24, 0x45	; 69
 378:	40 f4       	brcc	.+16     	; 0x38a <DIO_READ_PIN+0x1a>
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	39 f1       	breq	.+78     	; 0x3cc <DIO_READ_PIN+0x5c>
 37e:	83 34       	cpi	r24, 0x43	; 67
 380:	c0 f5       	brcc	.+112    	; 0x3f2 <DIO_READ_PIN+0x82>
 382:	81 34       	cpi	r24, 0x41	; 65
 384:	09 f0       	breq	.+2      	; 0x388 <DIO_READ_PIN+0x18>
 386:	5a c0       	rjmp	.+180    	; 0x43c <DIO_READ_PIN+0xcc>
 388:	0e c0       	rjmp	.+28     	; 0x3a6 <DIO_READ_PIN+0x36>
 38a:	82 36       	cpi	r24, 0x62	; 98
 38c:	f9 f0       	breq	.+62     	; 0x3cc <DIO_READ_PIN+0x5c>
 38e:	83 36       	cpi	r24, 0x63	; 99
 390:	20 f4       	brcc	.+8      	; 0x39a <DIO_READ_PIN+0x2a>
 392:	81 36       	cpi	r24, 0x61	; 97
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_READ_PIN+0x28>
 396:	52 c0       	rjmp	.+164    	; 0x43c <DIO_READ_PIN+0xcc>
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <DIO_READ_PIN+0x36>
 39a:	83 36       	cpi	r24, 0x63	; 99
 39c:	51 f1       	breq	.+84     	; 0x3f2 <DIO_READ_PIN+0x82>
 39e:	84 36       	cpi	r24, 0x64	; 100
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_READ_PIN+0x34>
 3a2:	4c c0       	rjmp	.+152    	; 0x43c <DIO_READ_PIN+0xcc>
 3a4:	39 c0       	rjmp	.+114    	; 0x418 <DIO_READ_PIN+0xa8>
	{
		case 'A':
		case 'a':
		val=READ_BIT(PINA,pin_number_0_7);
 3a6:	29 b3       	in	r18, 0x19	; 25
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	06 2e       	mov	r0, r22
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_READ_PIN+0x44>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	0a 94       	dec	r0
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_READ_PIN+0x40>
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	82 23       	and	r24, r18
 3bc:	93 23       	and	r25, r19
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_READ_PIN+0x54>
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_READ_PIN+0x50>
 3c8:	98 2f       	mov	r25, r24
		break;
 3ca:	38 c0       	rjmp	.+112    	; 0x43c <DIO_READ_PIN+0xcc>
		case 'B':
		case 'b':
		val=READ_BIT(PINB,pin_number_0_7);
 3cc:	26 b3       	in	r18, 0x16	; 22
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	06 2e       	mov	r0, r22
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_READ_PIN+0x6a>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_READ_PIN+0x66>
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	82 23       	and	r24, r18
 3e2:	93 23       	and	r25, r19
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_READ_PIN+0x7a>
 3e6:	96 95       	lsr	r25
 3e8:	87 95       	ror	r24
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_READ_PIN+0x76>
 3ee:	98 2f       	mov	r25, r24
		break;
 3f0:	25 c0       	rjmp	.+74     	; 0x43c <DIO_READ_PIN+0xcc>
		case 'C':
		case 'c':
		val=READ_BIT(PINC,pin_number_0_7);
 3f2:	23 b3       	in	r18, 0x13	; 19
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	06 2e       	mov	r0, r22
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_READ_PIN+0x90>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_READ_PIN+0x8c>
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	82 23       	and	r24, r18
 408:	93 23       	and	r25, r19
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_READ_PIN+0xa0>
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_READ_PIN+0x9c>
 414:	98 2f       	mov	r25, r24
		break;
 416:	12 c0       	rjmp	.+36     	; 0x43c <DIO_READ_PIN+0xcc>
		case 'D':
		case 'd':
		val=READ_BIT(PIND,pin_number_0_7);
 418:	20 b3       	in	r18, 0x10	; 16
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	06 2e       	mov	r0, r22
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_READ_PIN+0xb6>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_READ_PIN+0xb2>
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	82 23       	and	r24, r18
 42e:	93 23       	and	r25, r19
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_READ_PIN+0xc6>
 432:	96 95       	lsr	r25
 434:	87 95       	ror	r24
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_READ_PIN+0xc2>
 43a:	98 2f       	mov	r25, r24
		break;
		default:
		break;	
	}
	return val;
}
 43c:	89 2f       	mov	r24, r25
 43e:	08 95       	ret

00000440 <DIO_set_PORT_dir>:
void DIO_set_PORT_dir (unsigned char portname,unsigned char portvalue)
{
	switch (portname)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <DIO_set_PORT_dir+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <DIO_set_PORT_dir+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <DIO_set_PORT_dir+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_set_PORT_dir+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <DIO_set_PORT_dir+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_set_PORT_dir+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <DIO_set_PORT_dir+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_set_PORT_dir+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <DIO_set_PORT_dir+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_set_PORT_dir+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <DIO_set_PORT_dir+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <DIO_set_PORT_dir+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_set_PORT_dir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=portvalue;
 46e:	6a bb       	out	0x1a, r22	; 26
		break;
 470:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=portvalue;
 472:	67 bb       	out	0x17, r22	; 23
		break;
 474:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=portvalue;
 476:	64 bb       	out	0x14, r22	; 20
		break;
 478:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=portvalue;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <DIO_output_on_PORT>:
		break;
	}
}
void DIO_output_on_PORT (unsigned char portname,unsigned char output_on_port)
{
	switch (portname)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_output_on_PORT+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <DIO_output_on_PORT+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_output_on_PORT+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_output_on_PORT+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_output_on_PORT+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_output_on_PORT+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_output_on_PORT+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_output_on_PORT+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_output_on_PORT+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_output_on_PORT+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_output_on_PORT+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_output_on_PORT+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_output_on_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=output_on_port;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=output_on_port;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=output_on_port;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=output_on_port;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <DIO_Toggle_PORT>:
		break;
	}
}
void DIO_Toggle_PORT (unsigned char portname)
{
	switch (portname)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	09 f1       	breq	.+66     	; 0x502 <DIO_Toggle_PORT+0x46>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_Toggle_PORT+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	a9 f0       	breq	.+42     	; 0x4f2 <DIO_Toggle_PORT+0x36>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	b8 f4       	brcc	.+46     	; 0x4fa <DIO_Toggle_PORT+0x3e>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	e1 f4       	brne	.+56     	; 0x508 <DIO_Toggle_PORT+0x4c>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_Toggle_PORT+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	71 f0       	breq	.+28     	; 0x4f2 <DIO_Toggle_PORT+0x36>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_Toggle_PORT+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	a9 f4       	brne	.+42     	; 0x508 <DIO_Toggle_PORT+0x4c>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_Toggle_PORT+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	59 f0       	breq	.+22     	; 0x4fa <DIO_Toggle_PORT+0x3e>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	81 f4       	brne	.+32     	; 0x508 <DIO_Toggle_PORT+0x4c>
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <DIO_Toggle_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 4ea:	8b b3       	in	r24, 0x1b	; 27
 4ec:	80 95       	com	r24
 4ee:	8b bb       	out	0x1b, r24	; 27
		break;
 4f0:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
 4f2:	88 b3       	in	r24, 0x18	; 24
 4f4:	80 95       	com	r24
 4f6:	88 bb       	out	0x18, r24	; 24
		break;
 4f8:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
 4fa:	85 b3       	in	r24, 0x15	; 21
 4fc:	80 95       	com	r24
 4fe:	85 bb       	out	0x15, r24	; 21
		break;
 500:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
 502:	82 b3       	in	r24, 0x12	; 18
 504:	80 95       	com	r24
 506:	82 bb       	out	0x12, r24	; 18
 508:	08 95       	ret

0000050a <DIO_READ_PORT>:
	}
}
unsigned char DIO_READ_PORT (unsigned char portname)
{
	unsigned char returned_value;
	switch (portname)
 50a:	84 34       	cpi	r24, 0x44	; 68
 50c:	d9 f0       	breq	.+54     	; 0x544 <DIO_READ_PORT+0x3a>
 50e:	85 34       	cpi	r24, 0x45	; 69
 510:	38 f4       	brcc	.+14     	; 0x520 <DIO_READ_PORT+0x16>
 512:	82 34       	cpi	r24, 0x42	; 66
 514:	99 f0       	breq	.+38     	; 0x53c <DIO_READ_PORT+0x32>
 516:	83 34       	cpi	r24, 0x43	; 67
 518:	98 f4       	brcc	.+38     	; 0x540 <DIO_READ_PORT+0x36>
 51a:	81 34       	cpi	r24, 0x41	; 65
 51c:	a1 f4       	brne	.+40     	; 0x546 <DIO_READ_PORT+0x3c>
 51e:	0c c0       	rjmp	.+24     	; 0x538 <DIO_READ_PORT+0x2e>
 520:	82 36       	cpi	r24, 0x62	; 98
 522:	61 f0       	breq	.+24     	; 0x53c <DIO_READ_PORT+0x32>
 524:	83 36       	cpi	r24, 0x63	; 99
 526:	18 f4       	brcc	.+6      	; 0x52e <DIO_READ_PORT+0x24>
 528:	81 36       	cpi	r24, 0x61	; 97
 52a:	69 f4       	brne	.+26     	; 0x546 <DIO_READ_PORT+0x3c>
 52c:	05 c0       	rjmp	.+10     	; 0x538 <DIO_READ_PORT+0x2e>
 52e:	83 36       	cpi	r24, 0x63	; 99
 530:	39 f0       	breq	.+14     	; 0x540 <DIO_READ_PORT+0x36>
 532:	84 36       	cpi	r24, 0x64	; 100
 534:	41 f4       	brne	.+16     	; 0x546 <DIO_READ_PORT+0x3c>
 536:	06 c0       	rjmp	.+12     	; 0x544 <DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		returned_value=PORTA;
 538:	8b b3       	in	r24, 0x1b	; 27
		break;
 53a:	08 95       	ret
		case 'B':
		case 'b':
		returned_value=PORTB;
 53c:	88 b3       	in	r24, 0x18	; 24
		break;
 53e:	08 95       	ret
		case 'C':
		case 'c':
		returned_value=PORTC;
 540:	85 b3       	in	r24, 0x15	; 21
		break;
 542:	08 95       	ret
		case 'D':
		case 'd':
		returned_value=PORTD;
 544:	82 b3       	in	r24, 0x12	; 18
		break;
		default:
		break;
	}
}
 546:	08 95       	ret

00000548 <DIO_enable_PULLUP>:
void DIO_enable_PULLUP (unsigned char portname,unsigned char pin_number_0_7,unsigned char enable_pullup)
{
	switch (portname)
 548:	84 34       	cpi	r24, 0x44	; 68
 54a:	09 f4       	brne	.+2      	; 0x54e <DIO_enable_PULLUP+0x6>
 54c:	71 c0       	rjmp	.+226    	; 0x630 <DIO_enable_PULLUP+0xe8>
 54e:	85 34       	cpi	r24, 0x45	; 69
 550:	48 f4       	brcc	.+18     	; 0x564 <DIO_enable_PULLUP+0x1c>
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	99 f1       	breq	.+102    	; 0x5bc <DIO_enable_PULLUP+0x74>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	08 f0       	brcs	.+2      	; 0x55c <DIO_enable_PULLUP+0x14>
 55a:	4d c0       	rjmp	.+154    	; 0x5f6 <DIO_enable_PULLUP+0xae>
 55c:	81 34       	cpi	r24, 0x41	; 65
 55e:	09 f0       	breq	.+2      	; 0x562 <DIO_enable_PULLUP+0x1a>
 560:	83 c0       	rjmp	.+262    	; 0x668 <DIO_enable_PULLUP+0x120>
 562:	0f c0       	rjmp	.+30     	; 0x582 <DIO_enable_PULLUP+0x3a>
 564:	82 36       	cpi	r24, 0x62	; 98
 566:	51 f1       	breq	.+84     	; 0x5bc <DIO_enable_PULLUP+0x74>
 568:	83 36       	cpi	r24, 0x63	; 99
 56a:	20 f4       	brcc	.+8      	; 0x574 <DIO_enable_PULLUP+0x2c>
 56c:	81 36       	cpi	r24, 0x61	; 97
 56e:	09 f0       	breq	.+2      	; 0x572 <DIO_enable_PULLUP+0x2a>
 570:	7b c0       	rjmp	.+246    	; 0x668 <DIO_enable_PULLUP+0x120>
 572:	07 c0       	rjmp	.+14     	; 0x582 <DIO_enable_PULLUP+0x3a>
 574:	83 36       	cpi	r24, 0x63	; 99
 576:	09 f4       	brne	.+2      	; 0x57a <DIO_enable_PULLUP+0x32>
 578:	3e c0       	rjmp	.+124    	; 0x5f6 <DIO_enable_PULLUP+0xae>
 57a:	84 36       	cpi	r24, 0x64	; 100
 57c:	09 f0       	breq	.+2      	; 0x580 <DIO_enable_PULLUP+0x38>
 57e:	74 c0       	rjmp	.+232    	; 0x668 <DIO_enable_PULLUP+0x120>
 580:	57 c0       	rjmp	.+174    	; 0x630 <DIO_enable_PULLUP+0xe8>
	{
		case 'A':
		case 'a':
		if (enable_pullup==1)
 582:	41 30       	cpi	r20, 0x01	; 1
 584:	69 f4       	brne	.+26     	; 0x5a0 <DIO_enable_PULLUP+0x58>
		{
			SET_BIT(PORTA,pin_number_0_7);
 586:	2b b3       	in	r18, 0x1b	; 27
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	ac 01       	movw	r20, r24
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_enable_PULLUP+0x4c>
 590:	44 0f       	add	r20, r20
 592:	55 1f       	adc	r21, r21
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_enable_PULLUP+0x48>
 598:	ba 01       	movw	r22, r20
 59a:	62 2b       	or	r22, r18
 59c:	6b bb       	out	0x1b, r22	; 27
 59e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin_number_0_7);
 5a0:	2b b3       	in	r18, 0x1b	; 27
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	ac 01       	movw	r20, r24
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_enable_PULLUP+0x66>
 5aa:	44 0f       	add	r20, r20
 5ac:	55 1f       	adc	r21, r21
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_enable_PULLUP+0x62>
 5b2:	ba 01       	movw	r22, r20
 5b4:	60 95       	com	r22
 5b6:	62 23       	and	r22, r18
 5b8:	6b bb       	out	0x1b, r22	; 27
 5ba:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if (enable_pullup==1)
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	69 f4       	brne	.+26     	; 0x5da <DIO_enable_PULLUP+0x92>
		{
			SET_BIT(PORTB,pin_number_0_7);
 5c0:	28 b3       	in	r18, 0x18	; 24
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	ac 01       	movw	r20, r24
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_enable_PULLUP+0x86>
 5ca:	44 0f       	add	r20, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_enable_PULLUP+0x82>
 5d2:	ba 01       	movw	r22, r20
 5d4:	62 2b       	or	r22, r18
 5d6:	68 bb       	out	0x18, r22	; 24
 5d8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin_number_0_7);
 5da:	28 b3       	in	r18, 0x18	; 24
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	ac 01       	movw	r20, r24
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_enable_PULLUP+0xa0>
 5e4:	44 0f       	add	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_enable_PULLUP+0x9c>
 5ec:	ba 01       	movw	r22, r20
 5ee:	60 95       	com	r22
 5f0:	62 23       	and	r22, r18
 5f2:	68 bb       	out	0x18, r22	; 24
 5f4:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if (enable_pullup==1)
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	69 f4       	brne	.+26     	; 0x614 <DIO_enable_PULLUP+0xcc>
		{
			SET_BIT(PORTC,pin_number_0_7);
 5fa:	25 b3       	in	r18, 0x15	; 21
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	ac 01       	movw	r20, r24
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_enable_PULLUP+0xc0>
 604:	44 0f       	add	r20, r20
 606:	55 1f       	adc	r21, r21
 608:	6a 95       	dec	r22
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_enable_PULLUP+0xbc>
 60c:	ba 01       	movw	r22, r20
 60e:	62 2b       	or	r22, r18
 610:	65 bb       	out	0x15, r22	; 21
 612:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin_number_0_7);
 614:	25 b3       	in	r18, 0x15	; 21
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	ac 01       	movw	r20, r24
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_enable_PULLUP+0xda>
 61e:	44 0f       	add	r20, r20
 620:	55 1f       	adc	r21, r21
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_enable_PULLUP+0xd6>
 626:	ba 01       	movw	r22, r20
 628:	60 95       	com	r22
 62a:	62 23       	and	r22, r18
 62c:	65 bb       	out	0x15, r22	; 21
 62e:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if (enable_pullup==1)
 630:	41 30       	cpi	r20, 0x01	; 1
 632:	69 f4       	brne	.+26     	; 0x64e <DIO_enable_PULLUP+0x106>
		{
			SET_BIT(PORTD,pin_number_0_7);
 634:	22 b3       	in	r18, 0x12	; 18
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	ac 01       	movw	r20, r24
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_enable_PULLUP+0xfa>
 63e:	44 0f       	add	r20, r20
 640:	55 1f       	adc	r21, r21
 642:	6a 95       	dec	r22
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_enable_PULLUP+0xf6>
 646:	ba 01       	movw	r22, r20
 648:	62 2b       	or	r22, r18
 64a:	62 bb       	out	0x12, r22	; 18
 64c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin_number_0_7);
 64e:	22 b3       	in	r18, 0x12	; 18
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	ac 01       	movw	r20, r24
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_enable_PULLUP+0x114>
 658:	44 0f       	add	r20, r20
 65a:	55 1f       	adc	r21, r21
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_enable_PULLUP+0x110>
 660:	ba 01       	movw	r22, r20
 662:	60 95       	com	r22
 664:	62 23       	and	r22, r18
 666:	62 bb       	out	0x12, r22	; 18
 668:	08 95       	ret

0000066a <Keypad_INIT>:


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
 66a:	4f 92       	push	r4
 66c:	5f 92       	push	r5
 66e:	6f 92       	push	r6
 670:	7f 92       	push	r7
 672:	8f 92       	push	r8
 674:	9f 92       	push	r9
 676:	af 92       	push	r10
 678:	bf 92       	push	r11
 67a:	cf 92       	push	r12
 67c:	df 92       	push	r13
 67e:	ef 92       	push	r14
 680:	ff 92       	push	r15
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	f8 2e       	mov	r15, r24
 68c:	e4 2e       	mov	r14, r20
 68e:	00 e0       	ldi	r16, 0x00	; 0
 690:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
 692:	c6 2e       	mov	r12, r22
 694:	dd 24       	eor	r13, r13
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 696:	82 2e       	mov	r8, r18
 698:	99 24       	eor	r9, r9
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
		DIO_set_PIN_dir(input_portname,input_firstpin+counter,0);
		DIO_enable_PULLUP(input_portname,input_firstpin+counter,1);
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
 69a:	56 01       	movw	r10, r12
 69c:	08 94       	sec
 69e:	a1 1c       	adc	r10, r1
 6a0:	b1 1c       	adc	r11, r1
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
 6a2:	66 24       	eor	r6, r6
 6a4:	77 24       	eor	r7, r7
 6a6:	68 94       	set
 6a8:	61 f8       	bld	r6, 1
 6aa:	6c 0c       	add	r6, r12
 6ac:	7d 1c       	adc	r7, r13
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
 6ae:	0f 2e       	mov	r0, r31
 6b0:	f3 e0       	ldi	r31, 0x03	; 3
 6b2:	4f 2e       	mov	r4, r31
 6b4:	55 24       	eor	r5, r5
 6b6:	f0 2d       	mov	r31, r0
 6b8:	4c 0c       	add	r4, r12
 6ba:	5d 1c       	adc	r5, r13
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 6bc:	b8 01       	movw	r22, r16
 6be:	6c 0d       	add	r22, r12
 6c0:	7d 1d       	adc	r23, r13
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
 6c2:	8f 2d       	mov	r24, r15
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	41 e0       	ldi	r20, 0x01	; 1
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
#include "KEYPAD.h"


unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 6ce:	e8 01       	movw	r28, r16
 6d0:	c8 0d       	add	r28, r8
 6d2:	d9 1d       	adc	r29, r9
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_set_PIN_dir(output_portname,output_firstpin+counter,1);
		DIO_set_PIN_dir(input_portname,input_firstpin+counter,0);
 6d4:	8e 2d       	mov	r24, r14
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	be 01       	movw	r22, r28
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
		DIO_enable_PULLUP(input_portname,input_firstpin+counter,1);
 6e2:	8e 2d       	mov	r24, r14
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	be 01       	movw	r22, r28
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_enable_PULLUP>
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
 6f0:	8f 2d       	mov	r24, r15
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	b6 01       	movw	r22, r12
 6f6:	41 e0       	ldi	r20, 0x01	; 1
 6f8:	50 e0       	ldi	r21, 0x00	; 0
 6fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
 6fe:	8f 2d       	mov	r24, r15
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	b5 01       	movw	r22, r10
 704:	41 e0       	ldi	r20, 0x01	; 1
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
 70c:	8f 2d       	mov	r24, r15
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	b3 01       	movw	r22, r6
 712:	41 e0       	ldi	r20, 0x01	; 1
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
 71a:	8f 2d       	mov	r24, r15
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	b2 01       	movw	r22, r4
 720:	41 e0       	ldi	r20, 0x01	; 1
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 728:	0f 5f       	subi	r16, 0xFF	; 255
 72a:	1f 4f       	sbci	r17, 0xFF	; 255
unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{KEYPAD_RESET_SCREEN,'0','=','+'}};

void Keypad_INIT (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
 72c:	04 30       	cpi	r16, 0x04	; 4
 72e:	11 05       	cpc	r17, r1
 730:	29 f6       	brne	.-118    	; 0x6bc <Keypad_INIT+0x52>
		DIO_output_PIN_on_port(output_portname,output_firstpin+0,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	df 90       	pop	r13
 740:	cf 90       	pop	r12
 742:	bf 90       	pop	r11
 744:	af 90       	pop	r10
 746:	9f 90       	pop	r9
 748:	8f 90       	pop	r8
 74a:	7f 90       	pop	r7
 74c:	6f 90       	pop	r6
 74e:	5f 90       	pop	r5
 750:	4f 90       	pop	r4
 752:	08 95       	ret

00000754 <Keypad_READ>:
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
 754:	2f 92       	push	r2
 756:	3f 92       	push	r3
 758:	4f 92       	push	r4
 75a:	5f 92       	push	r5
 75c:	6f 92       	push	r6
 75e:	7f 92       	push	r7
 760:	8f 92       	push	r8
 762:	9f 92       	push	r9
 764:	af 92       	push	r10
 766:	bf 92       	push	r11
 768:	cf 92       	push	r12
 76a:	df 92       	push	r13
 76c:	ef 92       	push	r14
 76e:	ff 92       	push	r15
 770:	0f 93       	push	r16
 772:	1f 93       	push	r17
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	00 d0       	rcall	.+0      	; 0x77a <Keypad_READ+0x26>
 77a:	00 d0       	rcall	.+0      	; 0x77c <Keypad_READ+0x28>
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	68 2e       	mov	r6, r24
 782:	cc 24       	eor	r12, r12
 784:	dd 24       	eor	r13, r13
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 786:	86 2f       	mov	r24, r22
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	9a 83       	std	Y+2, r25	; 0x02
 78c:	89 83       	std	Y+1, r24	; 0x01
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
 78e:	77 24       	eor	r7, r7
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 790:	82 2e       	mov	r8, r18
 792:	99 24       	eor	r9, r9
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
 794:	f4 2e       	mov	r15, r20
 796:	e7 2c       	mov	r14, r7
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
 798:	16 01       	movw	r2, r12
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 79a:	49 80       	ldd	r4, Y+1	; 0x01
 79c:	5a 80       	ldd	r5, Y+2	; 0x02
 79e:	4c 0c       	add	r4, r12
 7a0:	5d 1c       	adc	r5, r13
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
 7a2:	86 2d       	mov	r24, r6
 7a4:	97 2d       	mov	r25, r7
 7a6:	b2 01       	movw	r22, r4
 7a8:	40 e0       	ldi	r20, 0x00	; 0
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 7b0:	1c 82       	std	Y+4, r1	; 0x04
 7b2:	1b 82       	std	Y+3, r1	; 0x03
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
 7b4:	ab 80       	ldd	r10, Y+3	; 0x03
 7b6:	bc 80       	ldd	r11, Y+4	; 0x04
		DIO_output_PIN_on_port(output_portname,output_firstpin+1,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+2,1);
		DIO_output_PIN_on_port(output_portname,output_firstpin+3,1);
	}
}
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
 7b8:	85 01       	movw	r16, r10
 7ba:	08 0d       	add	r16, r8
 7bc:	19 1d       	adc	r17, r9
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
		{
			if (DIO_READ_PIN(input_portname,input_firstpin+col)==0)
 7be:	8f 2d       	mov	r24, r15
 7c0:	9e 2d       	mov	r25, r14
 7c2:	b8 01       	movw	r22, r16
 7c4:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_READ_PIN>
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	e1 f4       	brne	.+56     	; 0x804 <Keypad_READ+0xb0>
			{
				while(DIO_READ_PIN(input_portname,input_firstpin+col)==0);
 7cc:	8f 2d       	mov	r24, r15
 7ce:	9e 2d       	mov	r25, r14
 7d0:	b8 01       	movw	r22, r16
 7d2:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_READ_PIN>
 7d6:	00 97       	sbiw	r24, 0x00	; 0
 7d8:	c9 f3       	breq	.-14     	; 0x7cc <Keypad_READ+0x78>
				return_val = arr[row][col];
 7da:	c1 01       	movw	r24, r2
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	8a 0d       	add	r24, r10
 7e6:	9b 1d       	adc	r25, r11
 7e8:	80 5a       	subi	r24, 0xA0	; 160
 7ea:	9f 4f       	sbci	r25, 0xFF	; 255
 7ec:	fc 01       	movw	r30, r24
 7ee:	00 81       	ld	r16, Z
				break;
			}
		}
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,1);
 7f0:	86 2d       	mov	r24, r6
 7f2:	97 2d       	mov	r25, r7
 7f4:	b2 01       	movw	r22, r4
 7f6:	41 e0       	ldi	r20, 0x01	; 1
 7f8:	50 e0       	ldi	r21, 0x00	; 0
 7fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		if (return_val!=0xff)
 7fe:	0f 3f       	cpi	r16, 0xFF	; 255
 800:	51 f0       	breq	.+20     	; 0x816 <Keypad_READ+0xc2>
 802:	12 c0       	rjmp	.+36     	; 0x828 <Keypad_READ+0xd4>
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	9c 81       	ldd	r25, Y+4	; 0x04
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	9c 83       	std	Y+4, r25	; 0x04
 80c:	8b 83       	std	Y+3, r24	; 0x03
	for (row=0;row<=3;row++)
	{
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,0);
		
		for (col=0;col<=3;col++)
 80e:	84 30       	cpi	r24, 0x04	; 4
 810:	91 05       	cpc	r25, r1
 812:	81 f6       	brne	.-96     	; 0x7b4 <Keypad_READ+0x60>
 814:	21 c0       	rjmp	.+66     	; 0x858 <Keypad_READ+0x104>
 816:	08 94       	sec
 818:	c1 1c       	adc	r12, r1
 81a:	d1 1c       	adc	r13, r1
unsigned char Keypad_READ (unsigned char output_portname,unsigned char output_firstpin,unsigned char input_portname,unsigned char input_firstpin)
{
	
	unsigned char row=0,col=0,return_val=NOT_PRESSED;
	
	for (row=0;row<=3;row++)
 81c:	94 e0       	ldi	r25, 0x04	; 4
 81e:	c9 16       	cp	r12, r25
 820:	d1 04       	cpc	r13, r1
 822:	09 f0       	breq	.+2      	; 0x826 <Keypad_READ+0xd2>
 824:	b9 cf       	rjmp	.-142    	; 0x798 <Keypad_READ+0x44>
 826:	0f ef       	ldi	r16, 0xFF	; 255
		{
			break;
		}
	}	
	return return_val;
}
 828:	80 2f       	mov	r24, r16
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	0f 91       	pop	r16
 83a:	ff 90       	pop	r15
 83c:	ef 90       	pop	r14
 83e:	df 90       	pop	r13
 840:	cf 90       	pop	r12
 842:	bf 90       	pop	r11
 844:	af 90       	pop	r10
 846:	9f 90       	pop	r9
 848:	8f 90       	pop	r8
 84a:	7f 90       	pop	r7
 84c:	6f 90       	pop	r6
 84e:	5f 90       	pop	r5
 850:	4f 90       	pop	r4
 852:	3f 90       	pop	r3
 854:	2f 90       	pop	r2
 856:	08 95       	ret
				return_val = arr[row][col];
				break;
			}
		}
		
		DIO_output_PIN_on_port(output_portname,output_firstpin+row,1);
 858:	86 2d       	mov	r24, r6
 85a:	97 2d       	mov	r25, r7
 85c:	b2 01       	movw	r22, r4
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 866:	d7 cf       	rjmp	.-82     	; 0x816 <Keypad_READ+0xc2>

00000868 <enable_pulse>:
#define command 0
#define data 1

void static enable_pulse (void)
{
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,1);
 868:	83 e6       	ldi	r24, 0x63	; 99
 86a:	65 e0       	ldi	r22, 0x05	; 5
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 872:	8f e9       	ldi	r24, 0x9F	; 159
 874:	9f e0       	ldi	r25, 0x0F	; 15
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	f1 f7       	brne	.-4      	; 0x876 <enable_pulse+0xe>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <enable_pulse+0x14>
 87c:	00 00       	nop
	_delay_ms(2);
	DIO_output_PIN_on_port(En_Rg_selection,En_Pn_selection,0);
 87e:	83 e6       	ldi	r24, 0x63	; 99
 880:	65 e0       	ldi	r22, 0x05	; 5
 882:	40 e0       	ldi	r20, 0x00	; 0
 884:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
}
 888:	08 95       	ret

0000088a <LCD_send_char>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
 88a:	af 92       	push	r10
 88c:	bf 92       	push	r11
 88e:	cf 92       	push	r12
 890:	df 92       	push	r13
 892:	ef 92       	push	r14
 894:	ff 92       	push	r15
 896:	0f 93       	push	r16
 898:	1f 93       	push	r17
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	c0 e0       	ldi	r28, 0x00	; 0
 8a0:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
 8a2:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
 8a4:	0f 2e       	mov	r0, r31
 8a6:	f7 e0       	ldi	r31, 0x07	; 7
 8a8:	ef 2e       	mov	r14, r31
 8aa:	ff 24       	eor	r15, r15
 8ac:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 8ae:	cc 24       	eor	r12, r12
 8b0:	dd 24       	eor	r13, r13
 8b2:	c3 94       	inc	r12
 8b4:	a8 2e       	mov	r10, r24
 8b6:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
			x=3;
 8b8:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
 8ba:	a7 01       	movw	r20, r14
 8bc:	4c 1b       	sub	r20, r28
 8be:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 8c0:	c6 01       	movw	r24, r12
 8c2:	04 2e       	mov	r0, r20
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <LCD_send_char+0x40>
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	0a 94       	dec	r0
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <LCD_send_char+0x3c>
 8ce:	8a 21       	and	r24, r10
 8d0:	9b 21       	and	r25, r11
 8d2:	9c 01       	movw	r18, r24
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <LCD_send_char+0x50>
 8d6:	36 95       	lsr	r19
 8d8:	27 95       	ror	r18
 8da:	4a 95       	dec	r20
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <LCD_send_char+0x4c>
 8de:	a9 01       	movw	r20, r18
 8e0:	83 e6       	ldi	r24, 0x63	; 99
 8e2:	61 2f       	mov	r22, r17
 8e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
 8e8:	c3 30       	cpi	r28, 0x03	; 3
 8ea:	21 f0       	breq	.+8      	; 0x8f4 <LCD_send_char+0x6a>
 8ec:	c7 30       	cpi	r28, 0x07	; 7
 8ee:	11 f0       	breq	.+4      	; 0x8f4 <LCD_send_char+0x6a>
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
	{
		
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
 8f0:	11 50       	subi	r17, 0x01	; 1
 8f2:	08 c0       	rjmp	.+16     	; 0x904 <LCD_send_char+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
 8f4:	83 e6       	ldi	r24, 0x63	; 99
 8f6:	64 e0       	ldi	r22, 0x04	; 4
 8f8:	41 e0       	ldi	r20, 0x01	; 1
 8fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
			enable_pulse();
 8fe:	0e 94 34 04 	call	0x868	; 0x868 <enable_pulse>
			x=3;
 902:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,data);
			enable_pulse();
 904:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_char (unsigned char letter)
{
	unsigned char counter=0,x=3;//RLCD_16_firstpin;
	for (counter;counter<=7;counter++)
 906:	c8 30       	cpi	r28, 0x08	; 8
 908:	d1 05       	cpc	r29, r1
 90a:	b9 f6       	brne	.-82     	; 0x8ba <LCD_send_char+0x30>
 90c:	8f ec       	ldi	r24, 0xCF	; 207
 90e:	97 e0       	ldi	r25, 0x07	; 7
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	f1 f7       	brne	.-4      	; 0x910 <LCD_send_char+0x86>
 914:	00 c0       	rjmp	.+0      	; 0x916 <LCD_send_char+0x8c>
 916:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	1f 91       	pop	r17
 91e:	0f 91       	pop	r16
 920:	ff 90       	pop	r15
 922:	ef 90       	pop	r14
 924:	df 90       	pop	r13
 926:	cf 90       	pop	r12
 928:	bf 90       	pop	r11
 92a:	af 90       	pop	r10
 92c:	08 95       	ret

0000092e <LCD_send_cmd>:
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
 92e:	af 92       	push	r10
 930:	bf 92       	push	r11
 932:	cf 92       	push	r12
 934:	df 92       	push	r13
 936:	ef 92       	push	r14
 938:	ff 92       	push	r15
 93a:	0f 93       	push	r16
 93c:	1f 93       	push	r17
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	c0 e0       	ldi	r28, 0x00	; 0
 944:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0,x=3;//;
 946:	13 e0       	ldi	r17, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
 948:	0f 2e       	mov	r0, r31
 94a:	f7 e0       	ldi	r31, 0x07	; 7
 94c:	ef 2e       	mov	r14, r31
 94e:	ff 24       	eor	r15, r15
 950:	f0 2d       	mov	r31, r0
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 952:	cc 24       	eor	r12, r12
 954:	dd 24       	eor	r13, r13
 956:	c3 94       	inc	r12
 958:	a8 2e       	mov	r10, r24
 95a:	bb 24       	eor	r11, r11
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
			x=3;
 95c:	03 e0       	ldi	r16, 0x03	; 3
	DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
	enable_pulse();
	_delay_ms(1);
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
 95e:	a7 01       	movw	r20, r14
 960:	4c 1b       	sub	r20, r28
 962:	5d 0b       	sbc	r21, r29
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
 964:	c6 01       	movw	r24, r12
 966:	04 2e       	mov	r0, r20
 968:	02 c0       	rjmp	.+4      	; 0x96e <LCD_send_cmd+0x40>
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	0a 94       	dec	r0
 970:	e2 f7       	brpl	.-8      	; 0x96a <LCD_send_cmd+0x3c>
 972:	8a 21       	and	r24, r10
 974:	9b 21       	and	r25, r11
 976:	9c 01       	movw	r18, r24
 978:	02 c0       	rjmp	.+4      	; 0x97e <LCD_send_cmd+0x50>
 97a:	36 95       	lsr	r19
 97c:	27 95       	ror	r18
 97e:	4a 95       	dec	r20
 980:	e2 f7       	brpl	.-8      	; 0x97a <LCD_send_cmd+0x4c>
 982:	a9 01       	movw	r20, r18
 984:	83 e6       	ldi	r24, 0x63	; 99
 986:	61 2f       	mov	r22, r17
 988:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		x--;
		if (counter==3||counter==7)
 98c:	c3 30       	cpi	r28, 0x03	; 3
 98e:	21 f0       	breq	.+8      	; 0x998 <LCD_send_cmd+0x6a>
 990:	c7 30       	cpi	r28, 0x07	; 7
 992:	11 f0       	breq	.+4      	; 0x998 <LCD_send_cmd+0x6a>
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
	{
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
 994:	11 50       	subi	r17, 0x01	; 1
 996:	08 c0       	rjmp	.+16     	; 0x9a8 <LCD_send_cmd+0x7a>
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
 998:	83 e6       	ldi	r24, 0x63	; 99
 99a:	64 e0       	ldi	r22, 0x04	; 4
 99c:	40 e0       	ldi	r20, 0x00	; 0
 99e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
			enable_pulse();
 9a2:	0e 94 34 04 	call	0x868	; 0x868 <enable_pulse>
			x=3;
 9a6:	10 2f       	mov	r17, r16
		DIO_output_PIN_on_port(RLCD_16,RLCD_16_firstpin+x,READ_BIT(letter,7-counter));
		x--;
		if (counter==3||counter==7)
		{
			DIO_output_PIN_on_port(RS_Rg_selection,RS_Pn_selection,command);
			enable_pulse();
 9a8:	21 96       	adiw	r28, 0x01	; 1
}
#elif defined Four_BITS_MODE
void LCD_send_cmd (unsigned char letter)
{
	unsigned char counter=0,x=3;//;
	for (counter;counter<=7;counter++)
 9aa:	c8 30       	cpi	r28, 0x08	; 8
 9ac:	d1 05       	cpc	r29, r1
 9ae:	b9 f6       	brne	.-82     	; 0x95e <LCD_send_cmd+0x30>
 9b0:	8f ec       	ldi	r24, 0xCF	; 207
 9b2:	97 e0       	ldi	r25, 0x07	; 7
 9b4:	01 97       	sbiw	r24, 0x01	; 1
 9b6:	f1 f7       	brne	.-4      	; 0x9b4 <LCD_send_cmd+0x86>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <LCD_send_cmd+0x8c>
 9ba:	00 00       	nop
			enable_pulse();
			x=3;
		}
	}
	_delay_ms(1);
}
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	1f 91       	pop	r17
 9c2:	0f 91       	pop	r16
 9c4:	ff 90       	pop	r15
 9c6:	ef 90       	pop	r14
 9c8:	df 90       	pop	r13
 9ca:	cf 90       	pop	r12
 9cc:	bf 90       	pop	r11
 9ce:	af 90       	pop	r10
 9d0:	08 95       	ret

000009d2 <LCD_CLEAR_Screen>:
#endif


void LCD_CLEAR_Screen (void)
{
	LCD_send_cmd(0x01);
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
 9d8:	8f e1       	ldi	r24, 0x1F	; 31
 9da:	9e e4       	ldi	r25, 0x4E	; 78
 9dc:	01 97       	sbiw	r24, 0x01	; 1
 9de:	f1 f7       	brne	.-4      	; 0x9dc <LCD_CLEAR_Screen+0xa>
 9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <LCD_CLEAR_Screen+0x10>
 9e2:	00 00       	nop
	_delay_ms(10);
}
 9e4:	08 95       	ret

000009e6 <LCD_INIT>:
	LCD_send_cmd(ENTRY_MODE_RTL);
	
}
#elif defined Four_BITS_MODE
void LCD_INIT (void)
{
 9e6:	cf 93       	push	r28
 9e8:	8f e7       	ldi	r24, 0x7F	; 127
 9ea:	98 e3       	ldi	r25, 0x38	; 56
 9ec:	a1 e0       	ldi	r26, 0x01	; 1
 9ee:	81 50       	subi	r24, 0x01	; 1
 9f0:	90 40       	sbci	r25, 0x00	; 0
 9f2:	a0 40       	sbci	r26, 0x00	; 0
 9f4:	e1 f7       	brne	.-8      	; 0x9ee <LCD_INIT+0x8>
 9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <LCD_INIT+0x12>
 9f8:	00 00       	nop
	_delay_ms(50);
	unsigned char counter=0;
 9fa:	c0 e0       	ldi	r28, 0x00	; 0
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
 9fc:	83 e6       	ldi	r24, 0x63	; 99
 9fe:	6c 2f       	mov	r22, r28
 a00:	41 e0       	ldi	r20, 0x01	; 1
 a02:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
void LCD_INIT (void)
{
	_delay_ms(50);
	unsigned char counter=0;
	unsigned char x=RLCD_16_firstpin;
	for (counter;counter<=3;counter++)
 a06:	cf 5f       	subi	r28, 0xFF	; 255
 a08:	c4 30       	cpi	r28, 0x04	; 4
 a0a:	c1 f7       	brne	.-16     	; 0x9fc <LCD_INIT+0x16>
	{
		DIO_set_PIN_dir(RLCD_16,x,1);
		x++;
	}
	DIO_set_PIN_dir(En_Rg_selection,En_Pn_selection,1);
 a0c:	83 e6       	ldi	r24, 0x63	; 99
 a0e:	65 e0       	ldi	r22, 0x05	; 5
 a10:	41 e0       	ldi	r20, 0x01	; 1
 a12:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_set_PIN_dir(RS_Rg_selection,RS_Pn_selection,1);
 a16:	83 e6       	ldi	r24, 0x63	; 99
 a18:	64 e0       	ldi	r22, 0x04	; 4
 a1a:	41 e0       	ldi	r20, 0x01	; 1
 a1c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	LCD_send_cmd(RETURN_HOME);
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
 a26:	af e0       	ldi	r26, 0x0F	; 15
 a28:	b7 e2       	ldi	r27, 0x27	; 39
 a2a:	11 97       	sbiw	r26, 0x01	; 1
 a2c:	f1 f7       	brne	.-4      	; 0xa2a <LCD_INIT+0x44>
 a2e:	00 c0       	rjmp	.+0      	; 0xa30 <LCD_INIT+0x4a>
 a30:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(0x28);
 a32:	88 e2       	ldi	r24, 0x28	; 40
 a34:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
	LCD_send_cmd(DISPLAY_ON_CURSOR_ON);
 a38:	8e e0       	ldi	r24, 0x0E	; 14
 a3a:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
	LCD_send_cmd(CLEAR_SCREEN);
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
 a44:	8f e0       	ldi	r24, 0x0F	; 15
 a46:	97 e2       	ldi	r25, 0x27	; 39
 a48:	01 97       	sbiw	r24, 0x01	; 1
 a4a:	f1 f7       	brne	.-4      	; 0xa48 <LCD_INIT+0x62>
 a4c:	00 c0       	rjmp	.+0      	; 0xa4e <LCD_INIT+0x68>
 a4e:	00 00       	nop
	_delay_ms(5);
	LCD_send_cmd(ENTRY_MODE_RTL);
 a50:	86 e0       	ldi	r24, 0x06	; 6
 a52:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
}
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <LCD_MOVE_CURSOR>:
#endif

void LCD_MOVE_CURSOR (unsigned char row,unsigned char coloumn)
{
	if (row>2||row<1||coloumn>16||coloumn<1)
 a5a:	98 2f       	mov	r25, r24
 a5c:	91 50       	subi	r25, 0x01	; 1
 a5e:	92 30       	cpi	r25, 0x02	; 2
 a60:	20 f4       	brcc	.+8      	; 0xa6a <LCD_MOVE_CURSOR+0x10>
 a62:	61 31       	cpi	r22, 0x11	; 17
 a64:	10 f4       	brcc	.+4      	; 0xa6a <LCD_MOVE_CURSOR+0x10>
 a66:	66 23       	and	r22, r22
 a68:	21 f4       	brne	.+8      	; 0xa72 <LCD_MOVE_CURSOR+0x18>
	{
		LCD_send_cmd(0x80);
 a6a:	80 e8       	ldi	r24, 0x80	; 128
 a6c:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
 a70:	08 95       	ret
	}
	else if (row==1)
 a72:	81 30       	cpi	r24, 0x01	; 1
 a74:	29 f4       	brne	.+10     	; 0xa80 <LCD_MOVE_CURSOR+0x26>
	{
		LCD_send_cmd(0x80+coloumn-1);
 a76:	86 2f       	mov	r24, r22
 a78:	81 58       	subi	r24, 0x81	; 129
 a7a:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
 a7e:	08 95       	ret
	}
	else if (row==2)
 a80:	82 30       	cpi	r24, 0x02	; 2
 a82:	21 f4       	brne	.+8      	; 0xa8c <LCD_MOVE_CURSOR+0x32>
	{
		LCD_send_cmd(0xc0+coloumn-1);
 a84:	86 2f       	mov	r24, r22
 a86:	81 54       	subi	r24, 0x41	; 65
 a88:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_send_cmd>
 a8c:	08 95       	ret

00000a8e <LCD_send_string>:
	}
}
void LCD_send_string (char*ptr)
{
 a8e:	cf 93       	push	r28
 a90:	df 93       	push	r29
 a92:	ec 01       	movw	r28, r24
	while (*ptr!=0)
 a94:	88 81       	ld	r24, Y
 a96:	88 23       	and	r24, r24
 a98:	31 f0       	breq	.+12     	; 0xaa6 <LCD_send_string+0x18>
	else if (row==2)
	{
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
 a9a:	21 96       	adiw	r28, 0x01	; 1
{
	while (*ptr!=0)
	{
		LCD_send_char(*ptr);
 a9c:	0e 94 45 04 	call	0x88a	; 0x88a <LCD_send_char>
		LCD_send_cmd(0xc0+coloumn-1);
	}
}
void LCD_send_string (char*ptr)
{
	while (*ptr!=0)
 aa0:	89 91       	ld	r24, Y+
 aa2:	88 23       	and	r24, r24
 aa4:	d9 f7       	brne	.-10     	; 0xa9c <LCD_send_string+0xe>
	{
		LCD_send_char(*ptr);
		ptr++;
	}
}
 aa6:	df 91       	pop	r29
 aa8:	cf 91       	pop	r28
 aaa:	08 95       	ret

00000aac <scan_value>:
int scan_value (unsigned char first_asci,int first_value)
{
	
	first_value*=10;
 aac:	26 2f       	mov	r18, r22
 aae:	37 2f       	mov	r19, r23
 ab0:	22 0f       	add	r18, r18
 ab2:	33 1f       	adc	r19, r19
 ab4:	a9 01       	movw	r20, r18
 ab6:	44 0f       	add	r20, r20
 ab8:	55 1f       	adc	r21, r21
 aba:	44 0f       	add	r20, r20
 abc:	55 1f       	adc	r21, r21
 abe:	24 0f       	add	r18, r20
 ac0:	35 1f       	adc	r19, r21
	first_value+=(first_asci-0x30);
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	c0 97       	sbiw	r24, 0x30	; 48
 ac6:	82 0f       	add	r24, r18
 ac8:	93 1f       	adc	r25, r19
	
	return first_value;
}
 aca:	08 95       	ret

00000acc <print_val>:
void print_val (int val)
{
 acc:	ef 92       	push	r14
 ace:	ff 92       	push	r15
 ad0:	0f 93       	push	r16
 ad2:	1f 93       	push	r17
 ad4:	cf 93       	push	r28
 ad6:	df 93       	push	r29
 ad8:	7c 01       	movw	r14, r24
	int asci_val,counter=1,x=val;
	if (val==0)
 ada:	00 97       	sbiw	r24, 0x00	; 0
 adc:	21 f4       	brne	.+8      	; 0xae6 <print_val+0x1a>
	{
		LCD_send_char('0');
 ade:	80 e3       	ldi	r24, 0x30	; 48
 ae0:	0e 94 45 04 	call	0x88a	; 0x88a <LCD_send_char>
 ae4:	40 c0       	rjmp	.+128    	; 0xb66 <print_val+0x9a>
	}
	else if (val<10)
 ae6:	8a e0       	ldi	r24, 0x0A	; 10
 ae8:	e8 16       	cp	r14, r24
 aea:	f1 04       	cpc	r15, r1
 aec:	2c f4       	brge	.+10     	; 0xaf8 <print_val+0x2c>
	{
		LCD_send_char(val+0x30);
 aee:	8e 2d       	mov	r24, r14
 af0:	80 5d       	subi	r24, 0xD0	; 208
 af2:	0e 94 45 04 	call	0x88a	; 0x88a <LCD_send_char>
 af6:	37 c0       	rjmp	.+110    	; 0xb66 <print_val+0x9a>
	int asci_val,counter=1,x=val;
	if (val==0)
	{
		LCD_send_char('0');
	}
	else if (val<10)
 af8:	c7 01       	movw	r24, r14
 afa:	c1 e0       	ldi	r28, 0x01	; 1
 afc:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else
	{
		while (x>=10)
		{
			x=x/10;
 afe:	ea e0       	ldi	r30, 0x0A	; 10
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	bf 01       	movw	r22, r30
 b04:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
 b08:	cb 01       	movw	r24, r22
			counter*=10;
 b0a:	9e 01       	movw	r18, r28
 b0c:	22 0f       	add	r18, r18
 b0e:	33 1f       	adc	r19, r19
 b10:	cc 0f       	add	r28, r28
 b12:	dd 1f       	adc	r29, r29
 b14:	cc 0f       	add	r28, r28
 b16:	dd 1f       	adc	r29, r29
 b18:	cc 0f       	add	r28, r28
 b1a:	dd 1f       	adc	r29, r29
 b1c:	c2 0f       	add	r28, r18
 b1e:	d3 1f       	adc	r29, r19
	{
		LCD_send_char(val+0x30);
	}
	else
	{
		while (x>=10)
 b20:	6a 30       	cpi	r22, 0x0A	; 10
 b22:	71 05       	cpc	r23, r1
 b24:	74 f7       	brge	.-36     	; 0xb02 <print_val+0x36>
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
 b26:	ca 30       	cpi	r28, 0x0A	; 10
 b28:	d1 05       	cpc	r29, r1
 b2a:	ac f0       	brlt	.+42     	; 0xb56 <print_val+0x8a>
		{
			asci_val=(val/counter)%10;
 b2c:	0a e0       	ldi	r16, 0x0A	; 10
 b2e:	10 e0       	ldi	r17, 0x00	; 0
 b30:	c7 01       	movw	r24, r14
 b32:	be 01       	movw	r22, r28
 b34:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
 b38:	cb 01       	movw	r24, r22
 b3a:	b8 01       	movw	r22, r16
 b3c:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
			LCD_send_char(asci_val+0x30);
 b40:	80 5d       	subi	r24, 0xD0	; 208
 b42:	0e 94 45 04 	call	0x88a	; 0x88a <LCD_send_char>
			counter/=10;
 b46:	ce 01       	movw	r24, r28
 b48:	b8 01       	movw	r22, r16
 b4a:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
 b4e:	eb 01       	movw	r28, r22
		while (x>=10)
		{
			x=x/10;
			counter*=10;
		}
		while (counter>=10)
 b50:	6a 30       	cpi	r22, 0x0A	; 10
 b52:	71 05       	cpc	r23, r1
 b54:	6c f7       	brge	.-38     	; 0xb30 <print_val+0x64>
		{
			asci_val=(val/counter)%10;
			LCD_send_char(asci_val+0x30);
			counter/=10;
		}
		LCD_send_char((val%10)+0x30);
 b56:	c7 01       	movw	r24, r14
 b58:	6a e0       	ldi	r22, 0x0A	; 10
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	0e 94 72 07 	call	0xee4	; 0xee4 <__divmodhi4>
 b60:	80 5d       	subi	r24, 0xD0	; 208
 b62:	0e 94 45 04 	call	0x88a	; 0x88a <LCD_send_char>
	}
}
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	1f 91       	pop	r17
 b6c:	0f 91       	pop	r16
 b6e:	ff 90       	pop	r15
 b70:	ef 90       	pop	r14
 b72:	08 95       	ret

00000b74 <main>:
#include "KEYPAD.h"
#include "TIMER.h"
volatile char second=0;

int main(void)
{
 b74:	cf 93       	push	r28
 b76:	df 93       	push	r29
 b78:	0f 92       	push	r0
 b7a:	cd b7       	in	r28, 0x3d	; 61
 b7c:	de b7       	in	r29, 0x3e	; 62
	timer2_INIT_OVERFLOW_Interrupt();
 b7e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <timer2_INIT_OVERFLOW_Interrupt>
	Keypad_INIT('d',0,'d',4);
 b82:	84 e6       	ldi	r24, 0x64	; 100
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	44 e6       	ldi	r20, 0x64	; 100
 b88:	24 e0       	ldi	r18, 0x04	; 4
 b8a:	0e 94 35 03 	call	0x66a	; 0x66a <Keypad_INIT>
	unsigned char minute=0,hours=0,pressed=NOT_PRESSED,first_digit,second_digit,i=0,c=0;
	
	SEVEN_SEGMENT_INT('a');
 b8e:	81 e6       	ldi	r24, 0x61	; 97
 b90:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <SEVEN_SEGMENT_INT>
	DIO_set_PIN_dir('c',0,1);
 b94:	83 e6       	ldi	r24, 0x63	; 99
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	41 e0       	ldi	r20, 0x01	; 1
 b9a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('c',1,1);
 b9e:	83 e6       	ldi	r24, 0x63	; 99
 ba0:	61 e0       	ldi	r22, 0x01	; 1
 ba2:	41 e0       	ldi	r20, 0x01	; 1
 ba4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('c',2,1);
 ba8:	83 e6       	ldi	r24, 0x63	; 99
 baa:	62 e0       	ldi	r22, 0x02	; 2
 bac:	41 e0       	ldi	r20, 0x01	; 1
 bae:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('c',3,1);
 bb2:	83 e6       	ldi	r24, 0x63	; 99
 bb4:	63 e0       	ldi	r22, 0x03	; 3
 bb6:	41 e0       	ldi	r20, 0x01	; 1
 bb8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('c',4,1);
 bbc:	83 e6       	ldi	r24, 0x63	; 99
 bbe:	64 e0       	ldi	r22, 0x04	; 4
 bc0:	41 e0       	ldi	r20, 0x01	; 1
 bc2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
	DIO_set_PIN_dir('c',5,1);
 bc6:	83 e6       	ldi	r24, 0x63	; 99
 bc8:	65 e0       	ldi	r22, 0x05	; 5
 bca:	41 e0       	ldi	r20, 0x01	; 1
 bcc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>

int main(void)
{
	timer2_INIT_OVERFLOW_Interrupt();
	Keypad_INIT('d',0,'d',4);
	unsigned char minute=0,hours=0,pressed=NOT_PRESSED,first_digit,second_digit,i=0,c=0;
 bd0:	19 82       	std	Y+1, r1	; 0x01
 bd2:	10 e0       	ldi	r17, 0x00	; 0
 bd4:	ff 24       	eor	r15, r15
 bd6:	dd 24       	eor	r13, r13
	
    while(1)
    {
		
		
		SEVEN_SEGMENT_write('a',second%10,1);
 bd8:	0f 2e       	mov	r0, r31
 bda:	fa e0       	ldi	r31, 0x0A	; 10
 bdc:	ef 2e       	mov	r14, r31
 bde:	f0 2d       	mov	r31, r0
 be0:	0a c0       	rjmp	.+20     	; 0xbf6 <main+0x82>
		else if (i==2)
		{
			if (c==1)
			{
				minute=0;
				minute=pressed;
 be2:	d8 2e       	mov	r13, r24
				c=2;
 be4:	82 e0       	ldi	r24, 0x02	; 2
 be6:	89 83       	std	Y+1, r24	; 0x01
 be8:	06 c0       	rjmp	.+12     	; 0xbf6 <main+0x82>
		else if (i==3)
		{
			if (c==1)
			{
				hours=0;
				hours=pressed;
 bea:	f8 2e       	mov	r15, r24
				c=2;
 bec:	92 e0       	ldi	r25, 0x02	; 2
 bee:	99 83       	std	Y+1, r25	; 0x01
			else if (c==2)
			{
				hours=hours*10+pressed;
				//c=0;
			}
			i=0;
 bf0:	10 e0       	ldi	r17, 0x00	; 0
 bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <main+0x82>
 bf4:	10 e0       	ldi	r17, 0x00	; 0
	
    while(1)
    {
		
		
		SEVEN_SEGMENT_write('a',second%10,1);
 bf6:	80 91 7a 00 	lds	r24, 0x007A
 bfa:	6e 2d       	mov	r22, r14
 bfc:	0e 94 66 07 	call	0xecc	; 0xecc <__udivmodqi4>
 c00:	81 e6       	ldi	r24, 0x61	; 97
 c02:	69 2f       	mov	r22, r25
 c04:	41 e0       	ldi	r20, 0x01	; 1
 c06:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('c',5,0);
 c0a:	83 e6       	ldi	r24, 0x63	; 99
 c0c:	65 e0       	ldi	r22, 0x05	; 5
 c0e:	40 e0       	ldi	r20, 0x00	; 0
 c10:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 c14:	ef ec       	ldi	r30, 0xCF	; 207
 c16:	f7 e0       	ldi	r31, 0x07	; 7
 c18:	31 97       	sbiw	r30, 0x01	; 1
 c1a:	f1 f7       	brne	.-4      	; 0xc18 <main+0xa4>
 c1c:	00 c0       	rjmp	.+0      	; 0xc1e <main+0xaa>
 c1e:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('c',5,1);
 c20:	83 e6       	ldi	r24, 0x63	; 99
 c22:	65 e0       	ldi	r22, 0x05	; 5
 c24:	41 e0       	ldi	r20, 0x01	; 1
 c26:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',second/10,1);
 c2a:	80 91 7a 00 	lds	r24, 0x007A
 c2e:	6e 2d       	mov	r22, r14
 c30:	0e 94 66 07 	call	0xecc	; 0xecc <__udivmodqi4>
 c34:	68 2f       	mov	r22, r24
 c36:	81 e6       	ldi	r24, 0x61	; 97
 c38:	41 e0       	ldi	r20, 0x01	; 1
 c3a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('c',4,0);
 c3e:	83 e6       	ldi	r24, 0x63	; 99
 c40:	64 e0       	ldi	r22, 0x04	; 4
 c42:	40 e0       	ldi	r20, 0x00	; 0
 c44:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 c48:	8f ec       	ldi	r24, 0xCF	; 207
 c4a:	97 e0       	ldi	r25, 0x07	; 7
 c4c:	01 97       	sbiw	r24, 0x01	; 1
 c4e:	f1 f7       	brne	.-4      	; 0xc4c <main+0xd8>
 c50:	00 c0       	rjmp	.+0      	; 0xc52 <main+0xde>
 c52:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('c',4,1);
 c54:	83 e6       	ldi	r24, 0x63	; 99
 c56:	64 e0       	ldi	r22, 0x04	; 4
 c58:	41 e0       	ldi	r20, 0x01	; 1
 c5a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',minute%10,1);
 c5e:	8d 2d       	mov	r24, r13
 c60:	6e 2d       	mov	r22, r14
 c62:	0e 94 66 07 	call	0xecc	; 0xecc <__udivmodqi4>
 c66:	08 2f       	mov	r16, r24
 c68:	81 e6       	ldi	r24, 0x61	; 97
 c6a:	69 2f       	mov	r22, r25
 c6c:	41 e0       	ldi	r20, 0x01	; 1
 c6e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('c',3,0);
 c72:	83 e6       	ldi	r24, 0x63	; 99
 c74:	63 e0       	ldi	r22, 0x03	; 3
 c76:	40 e0       	ldi	r20, 0x00	; 0
 c78:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 c7c:	ef ec       	ldi	r30, 0xCF	; 207
 c7e:	f7 e0       	ldi	r31, 0x07	; 7
 c80:	31 97       	sbiw	r30, 0x01	; 1
 c82:	f1 f7       	brne	.-4      	; 0xc80 <main+0x10c>
 c84:	00 c0       	rjmp	.+0      	; 0xc86 <main+0x112>
 c86:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('c',3,1);
 c88:	83 e6       	ldi	r24, 0x63	; 99
 c8a:	63 e0       	ldi	r22, 0x03	; 3
 c8c:	41 e0       	ldi	r20, 0x01	; 1
 c8e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',minute/10,1);
 c92:	81 e6       	ldi	r24, 0x61	; 97
 c94:	60 2f       	mov	r22, r16
 c96:	41 e0       	ldi	r20, 0x01	; 1
 c98:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('c',2,0);
 c9c:	83 e6       	ldi	r24, 0x63	; 99
 c9e:	62 e0       	ldi	r22, 0x02	; 2
 ca0:	40 e0       	ldi	r20, 0x00	; 0
 ca2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 ca6:	8f ec       	ldi	r24, 0xCF	; 207
 ca8:	97 e0       	ldi	r25, 0x07	; 7
 caa:	01 97       	sbiw	r24, 0x01	; 1
 cac:	f1 f7       	brne	.-4      	; 0xcaa <main+0x136>
 cae:	00 c0       	rjmp	.+0      	; 0xcb0 <main+0x13c>
 cb0:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('c',2,1);
 cb2:	83 e6       	ldi	r24, 0x63	; 99
 cb4:	62 e0       	ldi	r22, 0x02	; 2
 cb6:	41 e0       	ldi	r20, 0x01	; 1
 cb8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',hours%10,1);
 cbc:	8f 2d       	mov	r24, r15
 cbe:	6e 2d       	mov	r22, r14
 cc0:	0e 94 66 07 	call	0xecc	; 0xecc <__udivmodqi4>
 cc4:	08 2f       	mov	r16, r24
 cc6:	81 e6       	ldi	r24, 0x61	; 97
 cc8:	69 2f       	mov	r22, r25
 cca:	41 e0       	ldi	r20, 0x01	; 1
 ccc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('c',1,0);
 cd0:	83 e6       	ldi	r24, 0x63	; 99
 cd2:	61 e0       	ldi	r22, 0x01	; 1
 cd4:	40 e0       	ldi	r20, 0x00	; 0
 cd6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 cda:	ef ec       	ldi	r30, 0xCF	; 207
 cdc:	f7 e0       	ldi	r31, 0x07	; 7
 cde:	31 97       	sbiw	r30, 0x01	; 1
 ce0:	f1 f7       	brne	.-4      	; 0xcde <main+0x16a>
 ce2:	00 c0       	rjmp	.+0      	; 0xce4 <main+0x170>
 ce4:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('c',1,1);
 ce6:	83 e6       	ldi	r24, 0x63	; 99
 ce8:	61 e0       	ldi	r22, 0x01	; 1
 cea:	41 e0       	ldi	r20, 0x01	; 1
 cec:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		SEVEN_SEGMENT_write('a',hours/10,1);
 cf0:	81 e6       	ldi	r24, 0x61	; 97
 cf2:	60 2f       	mov	r22, r16
 cf4:	41 e0       	ldi	r20, 0x01	; 1
 cf6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SEVEN_SEGMENT_write>
		DIO_output_PIN_on_port('c',0,0);
 cfa:	83 e6       	ldi	r24, 0x63	; 99
 cfc:	60 e0       	ldi	r22, 0x00	; 0
 cfe:	40 e0       	ldi	r20, 0x00	; 0
 d00:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 d04:	8f ec       	ldi	r24, 0xCF	; 207
 d06:	97 e0       	ldi	r25, 0x07	; 7
 d08:	01 97       	sbiw	r24, 0x01	; 1
 d0a:	f1 f7       	brne	.-4      	; 0xd08 <main+0x194>
 d0c:	00 c0       	rjmp	.+0      	; 0xd0e <main+0x19a>
 d0e:	00 00       	nop
		_delay_ms(1);
		DIO_output_PIN_on_port('c',0,1);
 d10:	83 e6       	ldi	r24, 0x63	; 99
 d12:	60 e0       	ldi	r22, 0x00	; 0
 d14:	41 e0       	ldi	r20, 0x01	; 1
 d16:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
		
		if (second>=60)
 d1a:	80 91 7a 00 	lds	r24, 0x007A
 d1e:	8c 33       	cpi	r24, 0x3C	; 60
 d20:	20 f0       	brcs	.+8      	; 0xd2a <main+0x1b6>
        {
			second=0;
 d22:	10 92 7a 00 	sts	0x007A, r1
			minute++;
 d26:	d3 94       	inc	r13
 d28:	0a c0       	rjmp	.+20     	; 0xd3e <main+0x1ca>
        } 
        else if (minute>=60)
 d2a:	9b e3       	ldi	r25, 0x3B	; 59
 d2c:	9d 15       	cp	r25, r13
 d2e:	18 f4       	brcc	.+6      	; 0xd36 <main+0x1c2>
        {
			minute=0;
			hours++;
 d30:	f3 94       	inc	r15
			second=0;
			minute++;
        } 
        else if (minute>=60)
        {
			minute=0;
 d32:	dd 24       	eor	r13, r13
 d34:	04 c0       	rjmp	.+8      	; 0xd3e <main+0x1ca>
			hours++;
        } 
        else if (hours>=24)
 d36:	e7 e1       	ldi	r30, 0x17	; 23
 d38:	ef 15       	cp	r30, r15
 d3a:	08 f4       	brcc	.+2      	; 0xd3e <main+0x1ca>
        {
			hours=0;
 d3c:	ff 24       	eor	r15, r15
        }
		
		pressed=Keypad_READ('d',0,'d',4);
 d3e:	84 e6       	ldi	r24, 0x64	; 100
 d40:	60 e0       	ldi	r22, 0x00	; 0
 d42:	44 e6       	ldi	r20, 0x64	; 100
 d44:	24 e0       	ldi	r18, 0x04	; 4
 d46:	0e 94 aa 03 	call	0x754	; 0x754 <Keypad_READ>
		
		if (pressed!=NOT_PRESSED)
		{
			if (pressed==KEYPAD_RESET_SCREEN)
 d4a:	83 34       	cpi	r24, 0x43	; 67
 d4c:	19 f4       	brne	.+6      	; 0xd54 <main+0x1e0>
				/*_delay_ms(5000);
				pressed=Keypad_READ('d',0,'d',5);
				if (pressed==ke)
				{
				}*/
				i++;
 d4e:	1f 5f       	subi	r17, 0xFF	; 255
				c=1;
 d50:	f1 e0       	ldi	r31, 0x01	; 1
 d52:	f9 83       	std	Y+1, r31	; 0x01
			}				
		}
		if (i==1)
 d54:	11 30       	cpi	r17, 0x01	; 1
 d56:	d9 f4       	brne	.+54     	; 0xd8e <main+0x21a>
		{
			if (c==1)
 d58:	99 81       	ldd	r25, Y+1	; 0x01
 d5a:	91 30       	cpi	r25, 0x01	; 1
 d5c:	41 f4       	brne	.+16     	; 0xd6e <main+0x1fa>
			{
				second=0;
 d5e:	10 92 7a 00 	sts	0x007A, r1
				second=pressed-48;
 d62:	80 53       	subi	r24, 0x30	; 48
 d64:	80 93 7a 00 	sts	0x007A, r24
				c=2;
 d68:	e2 e0       	ldi	r30, 0x02	; 2
 d6a:	e9 83       	std	Y+1, r30	; 0x01
 d6c:	44 cf       	rjmp	.-376    	; 0xbf6 <main+0x82>
			} 
			else if (c==2)
 d6e:	f9 81       	ldd	r31, Y+1	; 0x01
 d70:	f2 30       	cpi	r31, 0x02	; 2
 d72:	09 f0       	breq	.+2      	; 0xd76 <main+0x202>
 d74:	40 cf       	rjmp	.-384    	; 0xbf6 <main+0x82>
			{
				second=second*10+(pressed-48);
 d76:	90 91 7a 00 	lds	r25, 0x007A
 d7a:	99 0f       	add	r25, r25
 d7c:	29 2f       	mov	r18, r25
 d7e:	22 0f       	add	r18, r18
 d80:	22 0f       	add	r18, r18
 d82:	92 0f       	add	r25, r18
 d84:	90 53       	subi	r25, 0x30	; 48
 d86:	89 0f       	add	r24, r25
 d88:	80 93 7a 00 	sts	0x007A, r24
 d8c:	34 cf       	rjmp	.-408    	; 0xbf6 <main+0x82>
				//c=0;
			}
		}
		else if (i==2)
 d8e:	12 30       	cpi	r17, 0x02	; 2
 d90:	71 f4       	brne	.+28     	; 0xdae <main+0x23a>
		{
			if (c==1)
 d92:	99 81       	ldd	r25, Y+1	; 0x01
 d94:	91 30       	cpi	r25, 0x01	; 1
 d96:	09 f4       	brne	.+2      	; 0xd9a <main+0x226>
 d98:	24 cf       	rjmp	.-440    	; 0xbe2 <main+0x6e>
			{
				minute=0;
				minute=pressed;
				c=2;
			}
			else if (c==2)
 d9a:	92 30       	cpi	r25, 0x02	; 2
 d9c:	09 f0       	breq	.+2      	; 0xda0 <main+0x22c>
 d9e:	2b cf       	rjmp	.-426    	; 0xbf6 <main+0x82>
			{
				minute=minute*10+pressed;
 da0:	dd 0c       	add	r13, r13
 da2:	9d 2d       	mov	r25, r13
 da4:	99 0f       	add	r25, r25
 da6:	99 0f       	add	r25, r25
 da8:	d9 0e       	add	r13, r25
 daa:	d8 0e       	add	r13, r24
 dac:	24 cf       	rjmp	.-440    	; 0xbf6 <main+0x82>
				//c=0;
			}
		}
		else if (i==3)
 dae:	13 30       	cpi	r17, 0x03	; 3
 db0:	09 f0       	breq	.+2      	; 0xdb4 <main+0x240>
 db2:	21 cf       	rjmp	.-446    	; 0xbf6 <main+0x82>
		{
			if (c==1)
 db4:	e9 81       	ldd	r30, Y+1	; 0x01
 db6:	e1 30       	cpi	r30, 0x01	; 1
 db8:	09 f4       	brne	.+2      	; 0xdbc <main+0x248>
 dba:	17 cf       	rjmp	.-466    	; 0xbea <main+0x76>
			{
				hours=0;
				hours=pressed;
				c=2;
			}
			else if (c==2)
 dbc:	e2 30       	cpi	r30, 0x02	; 2
 dbe:	09 f0       	breq	.+2      	; 0xdc2 <main+0x24e>
 dc0:	19 cf       	rjmp	.-462    	; 0xbf4 <main+0x80>
			{
				hours=hours*10+pressed;
 dc2:	ff 0c       	add	r15, r15
 dc4:	9f 2d       	mov	r25, r15
 dc6:	99 0f       	add	r25, r25
 dc8:	99 0f       	add	r25, r25
 dca:	f9 0e       	add	r15, r25
 dcc:	f8 0e       	add	r15, r24
				//c=0;
			}
			i=0;
 dce:	10 e0       	ldi	r17, 0x00	; 0
 dd0:	12 cf       	rjmp	.-476    	; 0xbf6 <main+0x82>

00000dd2 <__vector_5>:
		}
    }
}
ISR(TIMER2_OVF_vect)
{
 dd2:	1f 92       	push	r1
 dd4:	0f 92       	push	r0
 dd6:	0f b6       	in	r0, 0x3f	; 63
 dd8:	0f 92       	push	r0
 dda:	11 24       	eor	r1, r1
 ddc:	8f 93       	push	r24
	second++;
 dde:	80 91 7a 00 	lds	r24, 0x007A
 de2:	8f 5f       	subi	r24, 0xFF	; 255
 de4:	80 93 7a 00 	sts	0x007A, r24
 de8:	8f 91       	pop	r24
 dea:	0f 90       	pop	r0
 dec:	0f be       	out	0x3f, r0	; 63
 dee:	0f 90       	pop	r0
 df0:	1f 90       	pop	r1
 df2:	18 95       	reti

00000df4 <SEVEN_SEGMENT_INT>:
#include "DIO.h"

char SS[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
void SEVEN_SEGMENT_INT (unsigned char portname)
{
	DIO_set_PORT_dir(portname,0xff);
 df4:	6f ef       	ldi	r22, 0xFF	; 255
 df6:	0e 94 20 02 	call	0x440	; 0x440 <DIO_set_PORT_dir>
}
 dfa:	08 95       	ret

00000dfc <SEVEN_SEGMENT_write>:
void SEVEN_SEGMENT_write (unsigned char portname, unsigned char number,unsigned char Comm_Cathode_1_Comm_Anode_2)
{
	if (Comm_Cathode_1_Comm_Anode_2==1)
 dfc:	41 30       	cpi	r20, 0x01	; 1
 dfe:	41 f4       	brne	.+16     	; 0xe10 <SEVEN_SEGMENT_write+0x14>
	{
		DIO_output_on_PORT(portname,SS[number]);
 e00:	e0 e7       	ldi	r30, 0x70	; 112
 e02:	f0 e0       	ldi	r31, 0x00	; 0
 e04:	e6 0f       	add	r30, r22
 e06:	f1 1d       	adc	r31, r1
 e08:	60 81       	ld	r22, Z
 e0a:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_output_on_PORT>
 e0e:	08 95       	ret
	}
	else
	{
		DIO_output_on_PORT(portname,~SS[number]);
 e10:	e0 e7       	ldi	r30, 0x70	; 112
 e12:	f0 e0       	ldi	r31, 0x00	; 0
 e14:	e6 0f       	add	r30, r22
 e16:	f1 1d       	adc	r31, r1
 e18:	60 81       	ld	r22, Z
 e1a:	60 95       	com	r22
 e1c:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_output_on_PORT>
 e20:	08 95       	ret

00000e22 <SEVEN_SEGMENT_INT_BCD>:
	}
}
void SEVEN_SEGMENT_INT_BCD (unsigned char portname,unsigned char firstpin)
{
 e22:	1f 93       	push	r17
 e24:	cf 93       	push	r28
 e26:	df 93       	push	r29
 e28:	18 2f       	mov	r17, r24
 e2a:	c6 2f       	mov	r28, r22
	else
	{
		DIO_output_on_PORT(portname,~SS[number]);
	}
}
void SEVEN_SEGMENT_INT_BCD (unsigned char portname,unsigned char firstpin)
 e2c:	d6 2f       	mov	r29, r22
 e2e:	dc 5f       	subi	r29, 0xFC	; 252
{
	unsigned char counter=0;
	for (counter;counter<=3;counter++)
	{
		DIO_set_PIN_dir(portname,firstpin,1);
 e30:	81 2f       	mov	r24, r17
 e32:	6c 2f       	mov	r22, r28
 e34:	41 e0       	ldi	r20, 0x01	; 1
 e36:	0e 94 49 00 	call	0x92	; 0x92 <DIO_set_PIN_dir>
		firstpin++;
 e3a:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void SEVEN_SEGMENT_INT_BCD (unsigned char portname,unsigned char firstpin)
{
	unsigned char counter=0;
	for (counter;counter<=3;counter++)
 e3c:	cd 17       	cp	r28, r29
 e3e:	c1 f7       	brne	.-16     	; 0xe30 <SEVEN_SEGMENT_INT_BCD+0xe>
	{
		DIO_set_PIN_dir(portname,firstpin,1);
		firstpin++;
	}
}
 e40:	df 91       	pop	r29
 e42:	cf 91       	pop	r28
 e44:	1f 91       	pop	r17
 e46:	08 95       	ret

00000e48 <SEVEN_SEGMENT_write_BCD>:
void SEVEN_SEGMENT_write_BCD (unsigned char portname,unsigned char firstpin,unsigned char number)
{
 e48:	cf 92       	push	r12
 e4a:	df 92       	push	r13
 e4c:	ef 92       	push	r14
 e4e:	ff 92       	push	r15
 e50:	0f 93       	push	r16
 e52:	1f 93       	push	r17
 e54:	cf 93       	push	r28
 e56:	df 93       	push	r29
 e58:	08 2f       	mov	r16, r24
 e5a:	16 2f       	mov	r17, r22
 e5c:	c0 e0       	ldi	r28, 0x00	; 0
 e5e:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_output_PIN_on_port(portname,firstpin,READ_BIT(number,counter));
 e60:	ee 24       	eor	r14, r14
 e62:	ff 24       	eor	r15, r15
 e64:	e3 94       	inc	r14
 e66:	c4 2e       	mov	r12, r20
 e68:	dd 24       	eor	r13, r13
	{
		DIO_set_PIN_dir(portname,firstpin,1);
		firstpin++;
	}
}
void SEVEN_SEGMENT_write_BCD (unsigned char portname,unsigned char firstpin,unsigned char number)
 e6a:	6c 2f       	mov	r22, r28
 e6c:	61 0f       	add	r22, r17
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
	{
		DIO_output_PIN_on_port(portname,firstpin,READ_BIT(number,counter));
 e6e:	c7 01       	movw	r24, r14
 e70:	0c 2e       	mov	r0, r28
 e72:	02 c0       	rjmp	.+4      	; 0xe78 <SEVEN_SEGMENT_write_BCD+0x30>
 e74:	88 0f       	add	r24, r24
 e76:	99 1f       	adc	r25, r25
 e78:	0a 94       	dec	r0
 e7a:	e2 f7       	brpl	.-8      	; 0xe74 <SEVEN_SEGMENT_write_BCD+0x2c>
 e7c:	8c 21       	and	r24, r12
 e7e:	9d 21       	and	r25, r13
 e80:	9c 01       	movw	r18, r24
 e82:	0c 2e       	mov	r0, r28
 e84:	02 c0       	rjmp	.+4      	; 0xe8a <SEVEN_SEGMENT_write_BCD+0x42>
 e86:	36 95       	lsr	r19
 e88:	27 95       	ror	r18
 e8a:	0a 94       	dec	r0
 e8c:	e2 f7       	brpl	.-8      	; 0xe86 <SEVEN_SEGMENT_write_BCD+0x3e>
 e8e:	a9 01       	movw	r20, r18
 e90:	80 2f       	mov	r24, r16
 e92:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_output_PIN_on_port>
 e96:	21 96       	adiw	r28, 0x01	; 1
	}
}
void SEVEN_SEGMENT_write_BCD (unsigned char portname,unsigned char firstpin,unsigned char number)
{
	unsigned char counter=0;
	for (counter=0;counter<=3;counter++)
 e98:	c4 30       	cpi	r28, 0x04	; 4
 e9a:	d1 05       	cpc	r29, r1
 e9c:	31 f7       	brne	.-52     	; 0xe6a <SEVEN_SEGMENT_write_BCD+0x22>
	{
		DIO_output_PIN_on_port(portname,firstpin,READ_BIT(number,counter));
		firstpin++;
	}
 e9e:	df 91       	pop	r29
 ea0:	cf 91       	pop	r28
 ea2:	1f 91       	pop	r17
 ea4:	0f 91       	pop	r16
 ea6:	ff 90       	pop	r15
 ea8:	ef 90       	pop	r14
 eaa:	df 90       	pop	r13
 eac:	cf 90       	pop	r12
 eae:	08 95       	ret

00000eb0 <timer2_INIT_OVERFLOW_Interrupt>:
#include <avr/interrupt.h>
#include <avr/io.h>

void timer2_INIT_OVERFLOW_Interrupt (void)
{
	SET_BIT(ASSR,AS2);//choose the oscillation source [0 for internal / 1 for TOSC2]
 eb0:	82 b5       	in	r24, 0x22	; 34
 eb2:	88 60       	ori	r24, 0x08	; 8
 eb4:	82 bd       	out	0x22, r24	; 34
	
	SET_BIT(TCCR2,CS20);//choose the prescaler factor from table
 eb6:	85 b5       	in	r24, 0x25	; 37
 eb8:	81 60       	ori	r24, 0x01	; 1
 eba:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
 ebc:	85 b5       	in	r24, 0x25	; 37
 ebe:	84 60       	ori	r24, 0x04	; 4
 ec0:	85 bd       	out	0x25, r24	; 37
	
	//enable interrupt
	sei();
 ec2:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);//for overflow interrupt
 ec4:	89 b7       	in	r24, 0x39	; 57
 ec6:	80 64       	ori	r24, 0x40	; 64
 ec8:	89 bf       	out	0x39, r24	; 57
 eca:	08 95       	ret

00000ecc <__udivmodqi4>:
 ecc:	99 1b       	sub	r25, r25
 ece:	79 e0       	ldi	r23, 0x09	; 9
 ed0:	04 c0       	rjmp	.+8      	; 0xeda <__udivmodqi4_ep>

00000ed2 <__udivmodqi4_loop>:
 ed2:	99 1f       	adc	r25, r25
 ed4:	96 17       	cp	r25, r22
 ed6:	08 f0       	brcs	.+2      	; 0xeda <__udivmodqi4_ep>
 ed8:	96 1b       	sub	r25, r22

00000eda <__udivmodqi4_ep>:
 eda:	88 1f       	adc	r24, r24
 edc:	7a 95       	dec	r23
 ede:	c9 f7       	brne	.-14     	; 0xed2 <__udivmodqi4_loop>
 ee0:	80 95       	com	r24
 ee2:	08 95       	ret

00000ee4 <__divmodhi4>:
 ee4:	97 fb       	bst	r25, 7
 ee6:	09 2e       	mov	r0, r25
 ee8:	07 26       	eor	r0, r23
 eea:	0a d0       	rcall	.+20     	; 0xf00 <__divmodhi4_neg1>
 eec:	77 fd       	sbrc	r23, 7
 eee:	04 d0       	rcall	.+8      	; 0xef8 <__divmodhi4_neg2>
 ef0:	0c d0       	rcall	.+24     	; 0xf0a <__udivmodhi4>
 ef2:	06 d0       	rcall	.+12     	; 0xf00 <__divmodhi4_neg1>
 ef4:	00 20       	and	r0, r0
 ef6:	1a f4       	brpl	.+6      	; 0xefe <__divmodhi4_exit>

00000ef8 <__divmodhi4_neg2>:
 ef8:	70 95       	com	r23
 efa:	61 95       	neg	r22
 efc:	7f 4f       	sbci	r23, 0xFF	; 255

00000efe <__divmodhi4_exit>:
 efe:	08 95       	ret

00000f00 <__divmodhi4_neg1>:
 f00:	f6 f7       	brtc	.-4      	; 0xefe <__divmodhi4_exit>
 f02:	90 95       	com	r25
 f04:	81 95       	neg	r24
 f06:	9f 4f       	sbci	r25, 0xFF	; 255
 f08:	08 95       	ret

00000f0a <__udivmodhi4>:
 f0a:	aa 1b       	sub	r26, r26
 f0c:	bb 1b       	sub	r27, r27
 f0e:	51 e1       	ldi	r21, 0x11	; 17
 f10:	07 c0       	rjmp	.+14     	; 0xf20 <__udivmodhi4_ep>

00000f12 <__udivmodhi4_loop>:
 f12:	aa 1f       	adc	r26, r26
 f14:	bb 1f       	adc	r27, r27
 f16:	a6 17       	cp	r26, r22
 f18:	b7 07       	cpc	r27, r23
 f1a:	10 f0       	brcs	.+4      	; 0xf20 <__udivmodhi4_ep>
 f1c:	a6 1b       	sub	r26, r22
 f1e:	b7 0b       	sbc	r27, r23

00000f20 <__udivmodhi4_ep>:
 f20:	88 1f       	adc	r24, r24
 f22:	99 1f       	adc	r25, r25
 f24:	5a 95       	dec	r21
 f26:	a9 f7       	brne	.-22     	; 0xf12 <__udivmodhi4_loop>
 f28:	80 95       	com	r24
 f2a:	90 95       	com	r25
 f2c:	bc 01       	movw	r22, r24
 f2e:	cd 01       	movw	r24, r26
 f30:	08 95       	ret

00000f32 <_exit>:
 f32:	f8 94       	cli

00000f34 <__stop_program>:
 f34:	ff cf       	rjmp	.-2      	; 0xf34 <__stop_program>
